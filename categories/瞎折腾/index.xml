<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>瞎折腾 on Braindance</title><link>https://www.braindance.top/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/</link><description>Recent content in 瞎折腾 on Braindance</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.braindance.top/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>自建Vaultwarden并备份同步</title><link>https://www.braindance.top/posts/play_time/%E8%87%AA%E5%BB%BAvaultwarden%E5%B9%B6%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E8%87%AA%E5%BB%BAvaultwarden%E5%B9%B6%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;新买服务器，密码很多，保存密码，为了安全，防止被打，备份保底。&lt;/p&gt;
&lt;h2 id="前置步骤"&gt;前置步骤
&lt;/h2&gt;&lt;p&gt;自行安装1panel面板，并开启https和面板的安全配置，如防火墙、fail2ban等。或者根据配置的流程自己摸索单独配置。&lt;/p&gt;
&lt;h2 id="安装vaultwarden"&gt;安装Vaultwarden
&lt;/h2&gt;&lt;p&gt;我用的docker-composes.yaml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;vaultwarden&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;vaultwarden/server:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;container_name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;vaultwarden&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;restart&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ADMIN_TOKEN&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;xxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;DOMAIN&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://vw.3306.fun&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./vw-data/:/data/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;network_mode&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的&lt;code&gt;ADMIN_TOKEN&lt;/code&gt;很重要，相当于后台唯一的管理密码，虽然配置里写明文，用于第一次登录（&lt;del&gt;我不会说因为直接在容器里配置没成功&lt;/del&gt;），后面在管理面板再更改。&lt;/p&gt;
&lt;p&gt;之后创建站点反向代理容器的地址，以及开启https。&lt;/p&gt;
&lt;h2 id="设置waf和限制"&gt;设置waf和限制
&lt;/h2&gt;&lt;p&gt;在1panel的高级功能-WAF-网站设置，找到创建的站点，然后设置访问频率&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/1744507809102_image.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;p&gt;然后在Cloudflare WAF中创建一个&lt;strong&gt;速率限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/pZBr6nA3.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/nIDfbV3g.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加自定义规则设置&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;规则。阻止其他国家的访问，不想限制所有域名可以添加域名限制，我的表达式为&lt;code&gt;(http.host wildcard &amp;quot;example.com&amp;quot; and ip.src.country ne &amp;quot;CN&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置DNS记录&lt;/strong&gt;，添加记录并开启小黄云（已代理）。&lt;/p&gt;
&lt;p&gt;找到 SSL/TLS 概述，选择配置，自定义 SSL/TLS，选择完全（严格）。&lt;/p&gt;
&lt;h2 id="登录配置"&gt;登录配置
&lt;/h2&gt;&lt;p&gt;访问 &lt;a class="link" href="https://example.com/" target="_blank" rel="noopener"
&gt;https://example.com/&lt;/a&gt; 创建账户。然后访问后台地址&lt;code&gt;/admin&lt;/code&gt;输入创建docker时的&lt;code&gt;ADMIN_TOKEN&lt;/code&gt;登陆，之后&lt;strong&gt;关键步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将Domain URL设置为自己的网站。&lt;/li&gt;
&lt;li&gt;Client IP header设置为“cf**-**connecting-ip”，保证只有Cloudflare访问&lt;/li&gt;
&lt;li&gt;Admin token/Argon2 PHC 选项设置为新的&lt;code&gt;ADMIN_TOKEN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="admin后台限制"&gt;admin后台限制
&lt;/h2&gt;&lt;p&gt;因为admin页面权限过大，平时也用不到，所以可以在1panel中配置路径重定向到127.0.0.1，需要更改配置的时候关掉重定向，修改关闭再打开。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/ZUOYha2U.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;h2 id="其他配置"&gt;其他配置
&lt;/h2&gt;&lt;p&gt;在Vaultwarden开启两步验证等，自行摸索。&lt;/p&gt;
&lt;h2 id="同步配置"&gt;同步配置
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rclone&lt;/strong&gt;：用于将备份文件上传到 OneDrive。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GPG&lt;/strong&gt;：用于加密备份文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cron&lt;/strong&gt;：用于定时执行备份和更新脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装rclone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://rclone.org/install.sh | sudo bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证安装成功&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;rclone version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a class="link" href="https://linux.do/t/topic/238502" target="_blank" rel="noopener"
&gt;https://linux.do/t/topic/238502&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据帖子配置网盘：https://linux.do/t/topic/481620。最后代码修改为如下，后台挂载。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;rclone mount onedrive:/backup/ /mnt/onedrive --allow-non-empty --vfs-cache-mode full --daemon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;配置开机自动挂载&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法1：编辑 &lt;code&gt;~/.config/autostart/rclone-onedrive.desktop&lt;/code&gt; 添加以下内容&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Desktop Entry]
Type=Application
Name=Mount OneDrive with rclone
Exec=rclone mount onedrive:/backup/ /mnt/onedrive --allow-non-empty --vfs-cache-mode full --daemon writes &amp;amp;
Terminal=false
Hidden=false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;方法2：直接把挂载命令写成一个 sh 脚本文件，在 crontab 中添加配置每次开机后自动执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@reboot /path/to/rclone-onedrive.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="自动备份"&gt;自动备份
&lt;/h3&gt;&lt;p&gt;采用 sqlite3 先热备数据库，然后打包。备份计划每天一个日备份，保存在daily文件夹下，保留30份，循环覆写。每个月一个月备份，保存在monthly文件夹下，保留12份，循环覆写。注意安装依赖环境&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;apt-get install sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本文件如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#!/bin/bash
# 定义路径
# 数据地址
DATA_DIR=&amp;#34;/vw-data&amp;#34;
# 网盘挂载的地址
BACKUP_DIR=&amp;#34;/mnt/onedrive&amp;#34;
DAILY_BACKUP_DIR=&amp;#34;${BACKUP_DIR}/daily&amp;#34;
MONTHLY_BACKUP_DIR=&amp;#34;${BACKUP_DIR}/monthly&amp;#34;
WORK_DIR=&amp;#34;${BACKUP_DIR}/work&amp;#34;
DATE=$(date +%Y%m%d)
DAILY_BACKUP_RETENTION=30
MONTHLY_BACKUP_RETENTION=12
# 定义加密密码
GPG_PASSPHRASE=&amp;#34;your_secret_passphrase_here&amp;#34; # 你的加密密码
# 确保目标目录存在
mkdir -p &amp;#34;$DAILY_BACKUP_DIR&amp;#34; &amp;#34;$MONTHLY_BACKUP_DIR&amp;#34; &amp;#34;$WORK_DIR&amp;#34;
# Step 1: 执行SQLite3热备份
sqlite3 &amp;#34;${DATA_DIR}/db.sqlite3&amp;#34; &amp;#34;.backup &amp;#39;${WORK_DIR}/db_${DATE}.sqlite3&amp;#39;&amp;#34;
# Step 2: 打包备份文件
tar -czf &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34; -C &amp;#34;${WORK_DIR}&amp;#34; &amp;#34;db_${DATE}.sqlite3&amp;#34;
# Step 3: 加密备份文件
echo &amp;#34;$GPG_PASSPHRASE&amp;#34; | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 --output &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34; &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34;
# Step 4: 删除临时文件
rm &amp;#34;${WORK_DIR}/db_${DATE}.sqlite3&amp;#34; &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34;
# Step 5: 每月备份逻辑（每月第一天执行）
if [ &amp;#34;$(date +%d)&amp;#34; -eq 1 ]; then
cp &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34; &amp;#34;${MONTHLY_BACKUP_DIR}/&amp;#34;
fi
# Step 6: 保留最近的30份每日备份
cd &amp;#34;${DAILY_BACKUP_DIR}&amp;#34;
ls -tp | grep -v &amp;#39;/$&amp;#39; | tail -n +$((${DAILY_BACKUP_RETENTION}+1)) | xargs -I {} rm -- {}
# Step 7: 保留最近12个月的备份
cd &amp;#34;${MONTHLY_BACKUP_DIR}&amp;#34;
ls -tp | grep -v &amp;#39;/$&amp;#39; | tail -n +$((${MONTHLY_BACKUP_RETENTION}+1)) | xargs -I {} rm -- {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改脚本权限&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;chmod 700 /path/to/backup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建定时任务每天凌晨 2 点自动备份。使用crontab @reboot，记得加+x权限&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0 2 * * * /path/to/backup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以手动运行一次脚本，检查云盘中是否有备份文件，同时重启一下服务器查看网盘是否自动挂载。&lt;/p&gt;
&lt;h3 id="恢复备份"&gt;恢复备份
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以同样用管道符传入密码。（&lt;strong&gt;不推荐，安全问题&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo &amp;#34;$GPG_PASSPHRASE&amp;#34; | gpg --batch --yes --passphrase-fd 0 --decrypt --output &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34; &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;交互式输入密码，执行命令后会弹窗输出密码。（&lt;strong&gt;推荐&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;gpg --decrypt --output &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34; &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>ClawCloud使用体验</title><link>https://www.braindance.top/posts/vps_setup_clawcloud/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/vps_setup_clawcloud/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;快毕业了忙的飞起，上个服务器到期了我都没来得及管，现在写这篇博客还是在github的pages上，又接触了一些项目，想买个便宜好使的服务器玩玩。&lt;/p&gt;
&lt;p&gt;在论坛里搜到&lt;a class="link" href="https://claw.cloud/" target="_blank" rel="noopener"
&gt;ClawCloud&lt;/a&gt;评价不错，刚好最近有活动优惠就入手了一台系统为Debian，之前一直用的ubuntu，这下也换个玩玩。记录一下机器怎么样和自己配置过程，也边以后自己看。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2C / 2G / 40G / 1T&lt;/th&gt;
&lt;th&gt;$25.20 USD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="测评"&gt;测评
&lt;/h2&gt;&lt;p&gt;部分测试结果：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;VPS融合怪版本：2025.02.12
Shell项目地址：https://github.com/spiritLHLS/ecs
Go项目地址：https://github.com/oneclickvirt/ecs
---------------------基础信息查询--感谢所有开源项目---------------------
CPU 型号 : Intel(R) Xeon(R) Platinum
CPU 核心数 : 2
CPU 频率 : 2500.002 MHz
CPU 缓存 : L1: 32.00 KB / L2: 1.00 MB / L3: 33.00 MB
AES-NI指令集 : ✔ Enabled
VM-x/AMD-V支持 : ❌ Disabled
内存 : 130.84 MiB / 1.85 GiB
Swap : [ no swap partition or swap file detected ]
硬盘空间 : 911.28 MiB / 40110.19 MiB
启动盘路径 : /dev/vda1
系统在线时间 : 0 days, 0 hour 5 min
负载 : 1.02, 0.34, 0.12
系统 : Debian GNU/Linux 12 (bookworm) (x86_64)
架构 : x86_64 (64 Bit)
内核 : 6.1.0-31-cloud-amd64
TCP加速方式 : cubic
虚拟化架构 : KVM
NAT类型 : Full Cone
IPV4 ASN : AS45102 Alibaba (US) Technology Co., Ltd.
IPV4 位置 : Tokyo / Tokyo / JP
IPV6 ASN : AS45102 Alibaba
IPV6 位置 : Tokyo / Tokyo / Japan
IPV6 子网掩码 : 128
----------------------CPU测试--通过sysbench测试-------------------------
-&amp;gt; CPU 测试中 (Fast Mode, 1-Pass @ 5sec)
1 线程测试(单核)得分: 1062 Scores
2 线程测试(多核)得分: 1770 Scores
---------------------内存测试--感谢lemonbench开源-----------------------
-&amp;gt; 内存测试 Test (Fast Mode, 1-Pass @ 5sec)
单线程读测试: 5350.57 MB/s
单线程写测试: 5815.83 MB/s
------------------磁盘dd读写测试--感谢lemonbench开源--------------------
-&amp;gt; 磁盘IO测试中 (4K Block/1M Block, Direct Mode)
测试操作 写速度 读速度
100MB-4K Block 35.0 MB/s (8551 IOPS, 2.99s) 52.4 MB/s (12800 IOPS, 2.00s)
1GB-1M Block 232 MB/s (221 IOPS, 4.52s) 208 MB/s (198 IOPS, 5.04s)
---------------------磁盘fio读写测试--感谢yabs开源----------------------
Block Size | 4k (IOPS) | 64k (IOPS)
------ | --- ---- | ---- ----
Read | 20.68 MB/s (5.1k) | 96.31 MB/s (1.5k)
Write | 20.69 MB/s (5.1k) | 96.82 MB/s (1.5k)
Total | 41.37 MB/s (10.3k) | 193.13 MB/s (3.0k)
| |
Block Size | 512k (IOPS) | 1m (IOPS)
------ | --- ---- | ---- ----
Read | 91.97 MB/s (179) | 91.36 MB/s (89)
Write | 96.85 MB/s (189) | 97.44 MB/s (95)
Total | 188.82 MB/s (368) | 188.81 MB/s (184)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整测试结果连接如下：&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://paste.spiritlhl.net/#/show/WG2vI.txt" target="_blank" rel="noopener"
&gt;https://paste.spiritlhl.net/#/show/WG2vI.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="http://hpaste.spiritlhl.net/#/show/WG2vI.txt" target="_blank" rel="noopener"
&gt;http://hpaste.spiritlhl.net/#/show/WG2vI.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;咱也看不懂，也没有什么特殊需求，就部署点项目，下载包方便。&lt;/p&gt;
&lt;h2 id="配置"&gt;配置
&lt;/h2&gt;&lt;h3 id="更新组件包管理"&gt;更新组件、包管理
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt update #这个命令会更新软件包列表，让系统知道有哪些软件包可以更新。
sudo apt upgrade --only-upgrade #这个命令会安装所有可用的软件包更新。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="bbr"&gt;BBR
&lt;/h3&gt;&lt;p&gt;BBR 是 Google 提出的一种新型拥塞控制算法（Bottleneck Bandwidth and RTT），全称为瓶颈带宽和往返传播时间。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中，BBR 主要有以下特点和作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提高网络性能&lt;/strong&gt;：它可以显著提高吞吐量和降低 TCP 连接的延迟，使数据传输更加高效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适应不同网络环境&lt;/strong&gt;：适合高延迟、高带宽的网络链路，以及慢速接入网络的用户，能在一定丢包率的网络链路上充分利用带宽，并降低网络链路上的缓冲区占用率从而降低延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化拥塞控制&lt;/strong&gt;：BBR 改变了传统基于丢包反馈的拥塞控制机制，通过精确测量往返传播时间（RTT）和瓶颈带宽等参数来更有效地控制数据发送速率，避免了传统算法中因单纯丢包判断拥塞而导致的带宽利用率不高和端到端延迟大等问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升网络稳定性&lt;/strong&gt;：有助于减少网络拥塞和数据包丢失，提高网络的稳定性和可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;运行代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;amp;&amp;amp; chmod +x bbr.sh &amp;amp;&amp;amp; ./bbr.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;重启 VPS、使内核更新和BBR设置都生效&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;确认bbr是否开启&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;lsmod | grep bbr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结果为&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;tcp_bbr 20480 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="添加sawp"&gt;添加SAWP
&lt;/h3&gt;&lt;p&gt;注意到测评结果里没有SAWP。在虚拟专用服务器（VPS）中，SWAP 是当物理内存（RAM）已被占满时用于存储数据的磁盘空间。它充当 RAM 的溢出区，允许系统将不活跃的内存页移动到 SWAP 空间，从而为活跃进程释放 RAM。这在处理占用大量内存的应用程序或同时运行多个应用程序时特别有用。然而，访问 SWAP 空间的速度比访问 RAM 慢，因为它涉及磁盘 I/O 操作。因此，虽然 SWAP 可以帮助避免内存不足错误，但应适当配置以确保 VPS 的最佳性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用脚本添加&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -O swap.sh https://raw.githubusercontent.com/yuju520/Script/main/swap.sh &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x swap.sh &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; clear &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./swap.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意输入SWAP的大小为单位M&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看当前内存&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;free&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="添加用户"&gt;添加用户
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;修改root密码，创建新用户，加入sudo列表；&lt;/li&gt;
&lt;li&gt;关闭root账户登陆，普通用户开启免密登录，并关闭密码登录；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo adduser xiaoming
sudo passwd xiaoming
echo &amp;#39;xiaoming ALL=(ALL) ALL&amp;#39; | sudo tee /etc/sudoers.d/xiaoming
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;su xiaoming
sudo cat /etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果能够成功执行命令，说明 sudo 权限已正确添加&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后添加公钥内容到服务器&lt;code&gt;/home/user/.ssh/authorized_keys&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议登录验证一下！！！再关闭密码登录&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="关闭root登录用户密码登录"&gt;关闭root登录、用户密码登录
&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config &lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PermitRootLogin no # 禁用root登录
PasswordAuthentication no #禁用用户密码登录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不生效了注意一下&lt;code&gt;sshd_config.d&lt;/code&gt;目录下的内容。重启ssh。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;service ssh restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启不生效就&lt;code&gt;reboot&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="修改ssh端口"&gt;修改ssh端口
&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config &lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#Port 22
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="安装docker"&gt;安装Docker
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;# 安装Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="安装ufw"&gt;安装ufw
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、更新软件包&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、安装 UFW&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt install ufw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、如果你在远程位置连接你的服务器，在启用 UFW 防火墙之前，你必须显式允许进来的 SSH 连接。否则，你将永远都无法连接到机器上。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo ufw allow 22/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;如果 SSH 运行在非标准端口，你需要将上述命令中的 22 端口替换为对应的 SSH 端口。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5、启动 UFW&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo ufw enable
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="fail2ban"&gt;fail2ban
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、安装 Fail2ban&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt-get install fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、Debian 12 及以上的版本需要手动安装 rsyslog&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt-get install rsyslog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、启动 Fail2ban 服务&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo systemctl start fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4、开机自启动&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo systemctl enable fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5、查看 Fail2ban 服务状态。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo systemctl status fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="评价"&gt;评价
&lt;/h2&gt;&lt;p&gt;好使的一。官网也有测试的探针，我这是东京的比香港的好使点。终端的体验感觉也比rn的好多了。如果可以的话就传家宝了。&lt;/p&gt;</description></item><item><title>JetBrains 全家桶破解</title><link>https://www.braindance.top/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</link><pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</guid><description>&lt;p&gt;&lt;del&gt;突然想开发了我的 IDEA 还是 2021 的，IDEA 和 Pycharm 还在机械硬盘，装个最新的到固态里面。教育邮箱懒得申请了，失效了又要麻烦续杯。写出来记录一下以后自己参考。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="准备"&gt;准备
&lt;/h2&gt;&lt;p&gt;破解使用的是 &lt;a class="link" href="https://gitee.com/ja-netfilter/ja-netfilter" target="_blank" rel="noopener"
&gt;ja-netfilter&lt;/a&gt;：https://gitee.com/ja-netfilter/ja-netfilter。release 下载以后解压。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/07/6520f05f102ea.png"
loading="lazy"
alt="1696657544950.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config&lt;/code&gt; 配置文件默认为空，需要添加一些配置。plugins 是可以加载一些其他联动插件，本文使用的方法不用其他插件。&lt;/p&gt;
&lt;p&gt;找到 IDEA 或者 Pycharm 的 &lt;code&gt;Help&lt;/code&gt; &amp;mdash;&amp;gt; &lt;code&gt;Edit Custom VM Options&lt;/code&gt; 添加启动参数，路径是&lt;code&gt;ja-netfilter&lt;/code&gt;的 jar 包路径。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-javaagent:C:\\path\\to\\ja-netfilter.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Jetbrain全家桶在2022.2版本以上默认启用Java17&lt;/strong&gt;，所以用的时候需要在 VM Options 里额外增加下面两行参数。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里修改的 VM Options 配置文件路径是 C 盘下的本版本全局配置，也可以修改添加到安装目录下的 bin 目录中的 &lt;code&gt;idea64.exe.vmoptions&lt;/code&gt; 配置文件。&lt;/p&gt;
&lt;h2 id="修改其他配置"&gt;修改其他配置
&lt;/h2&gt;&lt;p&gt;修改 &lt;code&gt;config&lt;/code&gt; 修改文件夹下的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;congig/url.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[URL]
PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action
PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;congig/dns.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[DNS]
EQUAL,jetbrains.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="激活"&gt;激活
&lt;/h2&gt;&lt;h3 id="使用-power-插件"&gt;使用 power 插件
&lt;/h3&gt;&lt;p&gt;power 插件被作者成为非对称加密的屠龙刀，这种方式激活可以自定义信息，并且可以设置全家桶激活。&lt;/p&gt;
&lt;p&gt;参考大佬&lt;a class="link" href="https://xuzhengtong.com/2022/07/25/ja-netfilter/ja-netfilter-plugins-power/" target="_blank" rel="noopener"
&gt;博客文章&lt;/a&gt; 本地运行两个 python 文件，一个用于生成本地证书签名文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography &lt;span style="color:#f92672"&gt;import&lt;/span&gt; x509
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.backends &lt;span style="color:#f92672"&gt;import&lt;/span&gt; default_backend
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashes, serialization
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style="color:#f92672"&gt;import&lt;/span&gt; rsa
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.x509.oid &lt;span style="color:#f92672"&gt;import&lt;/span&gt; NameOID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;one_day &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ten_day &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3650&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;today &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;today()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;yesterday &lt;span style="color:#f92672"&gt;=&lt;/span&gt; today &lt;span style="color:#f92672"&gt;-&lt;/span&gt; one_day
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tomorrow &lt;span style="color:#f92672"&gt;=&lt;/span&gt; today &lt;span style="color:#f92672"&gt;+&lt;/span&gt; ten_day
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;private_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; rsa&lt;span style="color:#f92672"&gt;.&lt;/span&gt;generate_private_key(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; public_exponent&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;65537&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; key_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backend&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default_backend()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; private_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;CertificateBuilder()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;subject_name(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Name([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NameAttribute(NameOID&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMMON_NAME, &lt;span style="color:#e6db74"&gt;&amp;#39;MoYuno-from-2022-07-25&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;issuer_name(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Name([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NameAttribute(NameOID&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMMON_NAME, &lt;span style="color:#e6db74"&gt;&amp;#39;JetProfile CA&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;not_valid_before(yesterday)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;not_valid_after(tomorrow)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;serial_number(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;random_serial_number())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key(public_key)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;certificate &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; private_key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;private_key, algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashes&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SHA256(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backend&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default_backend()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;private_bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; private_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;private_bytes(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Encoding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PEM,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PrivateFormat&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TraditionalOpenSSL,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encryption_algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NoEncryption())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; certificate&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_bytes(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Encoding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PEM)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;ca.key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fout:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(private_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;ca.crt&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fout:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(public_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有一个生成 key 和伪造验签&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Hash &lt;span style="color:#f92672"&gt;import&lt;/span&gt; SHA1, SHA256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.PublicKey &lt;span style="color:#f92672"&gt;import&lt;/span&gt; RSA
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Signature &lt;span style="color:#f92672"&gt;import&lt;/span&gt; pkcs1_15
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Util.asn1 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; DerSequence, DerObjectId, DerNull, DerOctetString
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style="color:#f92672"&gt;import&lt;/span&gt; ceil_div
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography &lt;span style="color:#f92672"&gt;import&lt;/span&gt; x509
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style="color:#f92672"&gt;import&lt;/span&gt; padding
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# noinspection PyTypeChecker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkcs15_encode&lt;/span&gt;(msg_hash, emLen, with_hash_parameters&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; Implement the ``EMSA-PKCS1-V1_5-ENCODE`` function, as defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param msg_hash: hash object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param emLen: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param with_hash_parameters: bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :return: An ``emLen`` byte long string that encodes the hash.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerSequence([DerObjectId(msg_hash&lt;span style="color:#f92672"&gt;.&lt;/span&gt;oid)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; with_hash_parameters:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(DerNull()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digest &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerOctetString(msg_hash&lt;span style="color:#f92672"&gt;.&lt;/span&gt;digest())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestInfo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerSequence([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digest&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# We need at least 11 bytes for the remaining data: 3 fixed bytes and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# at least 8 bytes of padding).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; emLen &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len(digestInfo) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TypeError&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Selected hash algorithm has a too long digest (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt; bytes).&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; len(digest))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PS &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\xFF&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (emLen &lt;span style="color:#f92672"&gt;-&lt;/span&gt; len(digestInfo) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\x00\x01&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; PS &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\x00&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; digestInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;certBase64 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;MIIFTDCCAzSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMDcyNTIzMTcwOVoXDTMyMDcyMzIzMTcwOVowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDDx3gz77KvezmZJhwkF/10Q3vESk96tK6wJ00CSKkLybRDeQVOlHX3QAnPL7BjwCTzHqErsuyPuiZ6YTAVE/n7hLhIbh3lC+EBbxpa2hpIdIvUimr70iSrH9ZBWmnn5Fxy4r/r0tbxr34zpQzu4uWLiEqmOiDfRN+Zzj9FBaJ/gKsuhF7zNAbFHsClYntim5furDRITBra28nu0hfQIEBSHGPS2EKWTbKk2ifBLzMEDp99zIGEe/hrLpgBhdwGVD7VJsoeTXnvcgpt+91kiM918GWThO1L3eKU6W2mGZQv1bRyps7Fo61NElNWtJqqZ3KKyxJGyR1QpdOHd9flAesvYwb/lvc4uqYiKqwvvn+4iHPQlLtZDbzj0ICbKtVKSWgSprh0T5ZQGGNWXN4OMHtg9EuXvbagLshTEDkLKLzEBqSNpNmMmyzwyNO9/voQmHLjiWLdjVIYndjl15G+A9Dw5mVYqzKPMLEpHzg6ldkKJkGAxNBhCMUsmbEypT6r7wsdTvgEwFnP8ToOsAb12lSLxoR2bOT3xJ3WIfbyjvlBnauXfdu6SFF/82QFrLtQyddPvCHEiJTI0NmSYhjQObFohXMVVoXjGbXvuqgJNbc5UK06pCGQ2jKw4j6k1kw2g4fEYBd1fvEzb1/t+izpP8dEI0365xh0C1dpQjUj3uyRywIDAQABo4GZMIGWMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwCQYDVR0TBAIwADATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwHQYDVR0OBBYEFCTaESKW9YVBwJNH6DEjTPTAhAL/MA0GCSqGSIb3DQEBCwUAA4ICAQA29wUDKatiQe1S0qfId+1dRWnYznrHE0Cx41HUaeI5hvdZrFbDIP6syb/S9oAXST6w4pfgh80jk1xVL+B7NT5kFC+AI7mpd8dK8Z+K67tagYg41TdLGfSHqK+lljln5ElqUEN21fba5CVZplE286jy973XFOFbWZUpJC/5onCCAh8pK8AqpN7k3ovR6bfAga41UWdTnGeiyw9+XOj30ryebseTKaDfjQxsxEmyuA8YYCu9lgb58cvVrvc99So8KdOBaxHnxeEfiUqvPA8Y0QG7lc5elZYQ6cbiIqqsb/k9XSgB2Gk4CjuacBSxCAfd06NlJvZSDFSR1HTKhQfPLIQY1OpBC+NrKRWnQT4/IORL6F36gI9lTK+ioX8mzQ2bvXn4sXA3jrpRnGM2WemQvMPvstfSDKfcUdKjwX3rZ2jMwREkx/thtF3Huvsc8suOyzto1faD8mV0m4guq85fb4c9ki6cinz3QM2k6otVvh67gK116RZ7I8P/urTWvK7IOdwOE7UVqtpEe6TKvNhr1rzeaxUMdPcD0kY7fhBpuPwEQA+Xk0uiVR+XbpaPD4HWuapJm+31jC7zBp/BamRI25v26P5qMUQF/+P7eE4Ah/X0Rtf2Qvr2+p9kbfqalT8EiqOsvRiTvlMG1hdo33JdcwsxC05BWvZ++7Af0FgJ3TtFlw==&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cert &lt;span style="color:#f92672"&gt;=&lt;/span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load_der_x509_certificate(base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(certBase64))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int&lt;span style="color:#f92672"&gt;.&lt;/span&gt;from_bytes(cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;signature, byteorder&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;big&amp;#34;&lt;/span&gt;, )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;sign:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;sign&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;modBits &lt;span style="color:#f92672"&gt;=&lt;/span&gt; public_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;key_size
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;digest_cert &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SHA256&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tbs_certificate_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int&lt;span style="color:#f92672"&gt;.&lt;/span&gt;from_bytes(pkcs15_encode(digest_cert, ceil_div(modBits, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;)), byteorder&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;, signed&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;result:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;r&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;licenseId &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;R7FP0YWA38&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;licensePart &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;{&amp;#34;licenseId&amp;#34;:&amp;#34;R7FP0YWA38&amp;#34;,&amp;#34;licenseeName&amp;#34;:&amp;#34;Braindance&amp;#34;,&amp;#34;assigneeName&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;assigneeEmail&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;licenseRestriction&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;checkConcurrentUse&amp;#34;:false,&amp;#34;products&amp;#34;:[{&amp;#34;code&amp;#34;:&amp;#34;DPN&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;PS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;II&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;GO&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DM&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSF&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;DS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;PC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;CL&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;WS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RD&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RS0&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RM&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;AC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSV&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;DC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSU&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DP&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PDB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PWS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PSI&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PPS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PCWMP&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PGO&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PPC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PRB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PSW&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;RS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true}],&amp;#34;metadata&amp;#34;:&amp;#34;0120211210PPAM000005&amp;#34;,&amp;#34;hash&amp;#34;:&amp;#34;28822622/0:1202205338&amp;#34;,&amp;#34;gracePeriodDays&amp;#34;:7,&amp;#34;autoProlongated&amp;#34;:false,&amp;#34;isAutoProlongated&amp;#34;:false}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;digest &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SHA1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(licensePart&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;ca.key&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; prifile:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; private_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; RSA&lt;span style="color:#f92672"&gt;.&lt;/span&gt;import_key(prifile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 使用私钥对HASH值进行签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; signature &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pkcs1_15&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(private_key)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign(digest)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sig_results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64encode(signature)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; licensePartBase64 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64encode(bytes(licensePart&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; public_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;verify(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(sig_results),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(licensePartBase64),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; padding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;padding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PKCS1v15(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashes&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SHA1(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; licenseId &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; licensePartBase64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; sig_results&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; certBase64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 Crypto 依赖使用 &lt;code&gt;pip install pycrytodome&lt;/code&gt;。&lt;strong&gt;需要修改变量&lt;/strong&gt; &lt;code&gt;certBase64 &lt;/code&gt; &lt;strong&gt;为第一个文件生成的 cert 证书内容（自行删除换行）&lt;/strong&gt;。其中变量 &lt;code&gt;licensePart&lt;/code&gt; 中的信息和变量 &lt;code&gt;licenseId&lt;/code&gt; 对应，&lt;code&gt;licenseeName&lt;/code&gt; 可以自行修改，&lt;code&gt;code&lt;/code&gt; 应该就是全家桶各个软件的缩写，&lt;code&gt;paidUpTo&lt;/code&gt; 过期时间。&lt;/p&gt;
&lt;p&gt;配置文件&lt;code&gt;congig/power.conf&lt;/code&gt; 的格式&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Result]
EQUAL,sign,y,z-&amp;gt;result
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;sign&lt;/code&gt; 和 &lt;code&gt;result&lt;/code&gt; 分别对应第二个文件的两行输出，分别是签名密文、证书签名。&lt;code&gt;y&lt;/code&gt;,&lt;code&gt;z&lt;/code&gt; 分别是 RSA 中的指数、jetbrains内置root证书的公钥（&lt;strong&gt;不用修改&lt;/strong&gt;）。最终配置文件。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Result]
EQUAL,688827393930711928512275549698293070665686146516966052655941231404870441973710402205123355604429394140415171936010826276494797379204430556181912308828215621834023869095264591943036963130120724420798769592253168800129581361086511367675773802899334078239434964778238252446370058840916752890687348786357248109407287360623267817632253915161513374442235501450990684679388233149022805420822037547053343732736438118829252210572948271275369220730128852181626787073863828515056541044882335869396696141056207575568411139674823212977124270019967190277434142980781559286683916236429191621661925978231096547985871015033045347745040517507548703203423373963474065307957598679613534182723075187728429764246533540129748262856350129370323776549193166705032852633517719905394268849453593835332705268187404502153581134679736820933961668519544538659820375073084965933956885058156852851457008982063229683626311524790625910341414580691932545385821852904086377007435193707757250435137675275183055336401236456974574121655434382553698002922301524374402422775517514284490136029700408044713357398902530280387081498510385206614656124276242043287045844898682620475564484729941780647067683830306648941012819834344380065067184504095694554818053932782057955011188082,65537,860106576952879101192782278876319243486072481962999610484027161162448933268423045647258145695082284265933019120714643752088997312766689988016808929265129401027490891810902278465065056686129972085119605237470899952751915070244375173428976413406363879128531449407795115913715863867259163957682164040613505040314747660800424242248055421184038777878268502955477482203711835548014501087778959157112423823275878824729132393281517778742463067583320091009916141454657614089600126948087954465055321987012989937065785013284988096504657892738536613208311013047138019418152103262155848541574327484510025594166239784429845180875774012229784878903603491426732347994359380330103328705981064044872334790365894924494923595382470094461546336020961505275530597716457288511366082299255537762891238136381924520749228412559219346777184174219999640906007205260040707839706131662149325151230558316068068139406816080119906833578907759960298749494098180107991752250725928647349597506532778539709852254478061194098069801549845163358315116260915270480057699929968468068015735162890213859113563672040630687357054902747438421559817252127187138838514773245413540030800888215961904267348727206110582505606182944023582459006406137831940959195566364811905585377246353-&amp;gt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;激活key&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;R7FP0YWA38-eyJsaWNlbnNlSWQiOiJSN0ZQMFlXQTM4IiwibGljZW5zZWVOYW1lIjoiQnJhaW5kYW5jZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFAiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIxMTIxMFBQQU0wMDAwMDUiLCJoYXNoIjoiMjg4MjI2MjIvMDoxMjAyMjA1MzM4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-QKNmzjld8JemH5e62uP6QaxyIRaUP5Ov06/L2xdMVWR2g02DjtzF7kvkZhkAwWs+g7YrU9PeaJRdyzK9PgLJoS/+yrMUtsaqxka6tATAm8uqdtiMf2ZGp1mrzHrTsRep//CXOORBh8q0PYWb5adRVLsP7AaDHDlcspGZcToKUz4W1gFiLCUo+HGgwZpQYqbcCBuSrj7iT3NomyOwLh1aF2bFrJ8vHGoIA4YltxyUb9kpOoRID5TorBB9Oe6boFRF7kl6dFJVy5UnKWH/nUy6neK/7vkdAp/s7cIutefMwqtzRAVKsxqDBtzlLcrjTumDZBx/yp8mQtnTX4OEjQPtAJctUQQyrqe9gfnsIvXt3FtOKb87l6PM+ljODQ6+whjxwwyzgyMDesmw+TK0ZAjc7umQblGCvLsJonfJhuLuP8ADf3ljqdI4eUi43MdpiQsP5J+qAV4rmfU//0tiRaKyjgKGgb0VC2bheUgiGQmD4DQ48i3/DRRYajOhtAHy+xN2/QtM2NMQNxENBsayslQaWWDsPGExqB0tsPcNi0nlavgs1q287cQ/W2JX3qUVcTzcX4oQdHlGQokvsK5XTQcve5ME4N8BGaSVozKOBc0Z/Odp0eTrodHtWP96qDflq49Nn+pZ9W8c6le5s+MZbsn0e292cE+iVNtEuH4AGbmtkqE=-MIIExTCCAq2gAwIBAgIUJLLU4fyG1ih/kD7yVKDEcupXa/wwDQYJKoZIhvcNAQELBQAwGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQTAeFw0yMzA4MjkxNzQ2MjdaFw0zMzA4MjcxNzQ2MjdaMCExHzAdBgNVBAMMFk1vWXVuby1mcm9tLTIwMjItMDctMjUwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC8p8n50PDucW3lOmkTe/n3N00ZrxEWG9ppVXjC9hwa7NXkn50ksn64yC6gnUa/Y5/n6Zk4N/iF9tQHYsO8sy8eJoEJL9ADKWieeuSaOynvMfiY06bzwKD5EMr2Us9FKy0VUEw8QTmZuTZXIkY1ff4vX2uH+AwyMzS7DQ5XEoh3PfU7gfBwDqZGTWpiARBhEV2PWdNvzGg8x3qtCP+wFKrWNbi+M1QssyrI0BUB3oNbLf1VJKYqyz7PYTZ8llOgwCdf8AwLV7zeqR6WraV3O3uzTPi9Jt/y00Xts7I6u2pglgo42ZFmoGgr967lvRDU4QvwaP1z1L/XdbE122zDguAOoXc9rBIOL98cR7THzH/QVFkdBSDFCRdGqF86G/LI2RGptHAHMqD2L2p/IqRQ071fFroocJwkjPKofts2ZQ8Mf8BvouavaIKzZbzBt0SgJm+eF634JEj1HDClsarH87zf4NO+H97/xF3jp2kL2TcFE2qBzSMwYaSEhJAw3+PPoo7VxVplNO/FMcFq3LhTGWXksl04FD80HdkE9wCFFjhcusDQOzNOheTlrpVR9d2HEQ3AsdI4kbPrXsZ9kOTkn3MRlBKYaXX+6DV+zU9iYrN03/yIwqNOTBItrVak6MSW2KEcnNf0rkhBarOI/2dlTM+y2rhTf2cQtB6Z4kO7Pz41KwIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQCo2FAsW/7hbXFFCcVEst2FEPjhN7kTlQ4yDyBc2picY+aEyNy2qP8dgIvo4aMO5UOE8Hx2KWaj1/dkOpv1YN6VHI7acg//IXikW7ne7neUOw9Jyh15iZboVmJ5muKhzpc0brWIEgSwbk8pmTodS6gvBuzrddEaMsAW9lSf3tr9jJNGvc7fcYpSniQ9I+IGT+7kf4ffo0quScuYZUlq8ORFI8QC8I+LKHEQYzEtqxKgKqWGIm4mb1PPMWgtnIyYnOpWmw3AA/ZzibdcJIUCUiwhR9/t8Ws/mjIijldsoKw5rUL9NA7K8lTgcLIQlCrOb1bSGr2Wtq73bvmS4aeAyABQ/M72X1ODPbTdY+1GnU714PvZRiTZJfdh780YtOR3jnjTJkeInh3iiDxOv87N1yrO7ufFvJg6OkTpNkgjQWHAmEiKwItXrVuq58nWhoO0JXdNrAt65uj2jxlfnpUIq7kgaMYsgAV1ZxvBgz06KZkrKHYU3jSZtMZboAdeFkYIOPk+rKe4DDq8QJwuP7khJGmXwgRdKzpbkcTGQLLJxQoqYqr991lxbrGE9S5hxgWdyAWJrZAfHAX1hhQWFepKNQ6TZ4P+DzK2uZjhjaRrPv1Whyl53aI2ryX7IHBxB7d5xEIZXXSFxtxG/zucEkIMYOz0k0aBr2EsVbaCt0Hvi2XVcg==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应该可以直接使用我上面的配置，自己生成也可以。重启软件激活&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/07/6520eff16b4a4.png"
loading="lazy"
alt="1696657436047.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2024年10月21日&lt;/strong&gt;发现了个新问题。参照[博客][https://www.cnblogs.com/airlongdianblog/p/18418285]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2024.2后jetbrains新的安装程序自带了三个区域语言包，其中若选择中文大陆区域语言包，会将激活验证服务器地址修改为国内新验证地址。而jetbra/ja-netfaliter的拦截是黑名单制度，该新服务器地址并不在原本的拦截列表中。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这时激活失效并且会不断弹窗，只需要在&lt;code&gt;config/url.conf&lt;/code&gt;中加入拦截域名，重新启动即可。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面文章内容已经添加了。&lt;/p&gt;</description></item><item><title>软路由日记(一)</title><link>https://www.braindance.top/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;在学校疫情期间买了一个 j4125 的软路由，一直等到回家过了很久才到手，因为买的是裸机，还有些配件是在别的店买的，回家以后发现地址只能在区以内修改，只能取消订单重新下了单。&lt;/p&gt;
&lt;p&gt;最后的配件列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDR4 8G * 2&lt;/li&gt;
&lt;li&gt;128G msata * 1&lt;/li&gt;
&lt;li&gt;金士顿 480G sata * 1 （送的有sata的电源线和数据线，要注意下电源线用那种带拐角的，不然不好插上去）&lt;/li&gt;
&lt;li&gt;DV 12V5A 电源 5.5mm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原来咸鱼上买了假三星内存条回来插上发现不能用，所以把笔记本上的两根 8G 换下来了，然后又觉得电脑单根有点卡，所以又下了一单，哈哈哈现在电脑上是假三星 32G。电源是发货最慢的，我把家里路由器机顶盒的电源找了个遍，发现都插不上去，重要的是同样是圆口的插孔，还分好多不一样的尺寸，这个是最大的 5.5mm 的，最后出去找了一家买监控的店，在压箱货里面找到了一个非常非常塑料感的电源，卖了我 30 块，我现在还记得我进去的时候老板正在玩魔兽骑着坐骑跑路。&lt;/p&gt;
&lt;p&gt;再安利两个视频，我前期了解主要通过这两个 up 的视频学习的。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.bilibili.com/video/BV1WL411P7yN" target="_blank" rel="noopener"
&gt;保姆级J4125英特尔2.5G安装PVE+Ikuai+Openwrt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.bilibili.com/video/BV13b4y1J7dX" target="_blank" rel="noopener"
&gt;用U盘直接给J4125软路由安装OpenWrt固件，超简单小白也看得懂&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="准备材料"&gt;准备材料
&lt;/h2&gt;&lt;p&gt;需要准备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;U盘一个。制作引导盘，安装完成以后可以恢复&lt;/li&gt;
&lt;li&gt;键盘。安装向导需要一些配置&lt;/li&gt;
&lt;li&gt;网线。安装完成以后可以访问 web页面配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件安装包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restful。官网：&lt;a class="link" href="http://rufus.ie/zh/" target="_blank" rel="noopener"
&gt;http://rufus.ie/zh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pve镜像。官网：&lt;a class="link" href="https://www.proxmox.com/en/downloads" target="_blank" rel="noopener"
&gt;https://www.proxmox.com/en/downloads&lt;/a&gt;。要下载名称有 ISO Installer 才是系统镜像文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="restful-制作安装"&gt;Restful 制作安装
&lt;/h2&gt;&lt;p&gt;插上U盘，打开 Restful 写入镜像文件，设备选择U盘盘符，引导类型选择镜像文件，然后右边选择下载好的 PVE 镜像文件，其他的配置默认即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/03/63dcb88214c79.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;确认以后会有一个弹窗选择 DD 镜像模式写入。用个网上找的图片&lt;/p&gt;
&lt;p&gt;&lt;img src="https://qnam.smzdm.com/202202/24/62174f66812b27757.png_e1080.jpg"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;引导盘算制作好了。如果引导盘安装完成以后想要恢复成原来U盘，插上U盘，注意一下识别的盘符，引导类型选择为&lt;code&gt;非可引导&lt;/code&gt;重新格式化一下即可，文件系统 FAT32 不能写入超过 2G 大小的文件，所以我一般选 NTFS。&lt;/p&gt;
&lt;h2 id="虚拟机网段规划分配"&gt;虚拟机网段规划分配
&lt;/h2&gt;&lt;p&gt;因为安装的时候需要配置 PVE 网络的网关，既然用了软路由肯定是要用 OpenWrt、爱快这种路由系统装到虚拟机里，所以在安装之前先规划一下虚拟机的 IP 分配问题。以我安装的 OpenWrt 为例。&lt;/p&gt;
&lt;p&gt;我打算把软路由作为旁路由使用，不会影响家里爸妈用网体验，自己只需要本地改一下 WIFI 的网关为软路由地址即可。因为我家的入户路由所在的 IP 段是 192.168.1.0/24 ，所以我选择一个其他的网段如 192.168.5.0/24，避免和主路由所在的网段搞混。选择 PVE 系统的 IP 为 192.168.5.2，OpenWrt 虚拟机的 IP 为 192.168.5.3，其他虚拟机顺延。所以在安装 PVE 系统的时候网关需要填为 OpenWrt 准备的虚拟机地址 192.168.5.3，PVE 地址也需要修改为对应的。&lt;/p&gt;
&lt;p&gt;所以最后的结果就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PVE 主系统：192.168.5.2&lt;/p&gt;
&lt;p&gt;OpenWrt：192.168.5.3&lt;/p&gt;
&lt;p&gt;Xbantu：192.168.5.4&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;如果是直接作为主路由拨号使用，网关同样要填上 OpenWrt 的地址，因为要用 OpenWrt 拨号。&lt;/p&gt;
&lt;h2 id="安装-pve-系统"&gt;安装 PVE 系统
&lt;/h2&gt;&lt;p&gt;U盘插上软路由，注意一下启动界面提示的进入 BIOS 界面的按键，我的是 F7，如果不一样问客服或者搜一搜。选择U盘作为引导盘启动安装系统，找一下自己的U盘名称。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/03/63dcbc8286845.png"
loading="lazy"
alt="1675410562364.png"
&gt;&lt;/p&gt;
&lt;p&gt;接下来进入PVE的安装界面。我已经装好系统了没图，可以看着上面推荐的视频里来，界面依次是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择默认的硬盘。&lt;/li&gt;
&lt;li&gt;输入国家、时区、键盘语言。&lt;/li&gt;
&lt;li&gt;设置管理员的密码、确认密码，设置邮箱。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个邮箱我暂时还没有用到，可能 PVE 官方远程管理用得上，先填一个能使用的吧。&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;设置管理网卡口、域名、虚拟机 IP 段、网关、DNS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;网卡&lt;/strong&gt;的选择是用于管理 PVE 虚拟机的网卡。比如我的软路由有四个物理网卡，我选择其中一个物理插上网线用来管理 PVE 及其虚拟机，其他三个物理网卡分配给其他虚拟机使用，通常是不可以直接访问 PVE 管理面板的。下拉列表有网卡真实的 MAC 地址，看最后两位一般是有顺序的，我也是大致对应软路由上的物理网口，&lt;del&gt;应该是从小到大吧&lt;/del&gt;，我选择了第四个最后一个网口最为 PVE 的管理网口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;域名&lt;/strong&gt;可能和 PVE 官方的远程管理有关。虚拟机 &lt;strong&gt;IP 段&lt;/strong&gt;就是 PVE 管理的虚拟机可获得的 IP 范围。&lt;strong&gt;DNS&lt;/strong&gt; 不多说了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网关&lt;/strong&gt;的设置，在&lt;a class="link" href="###%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%bd%91%e6%ae%b5%e8%a7%84%e5%88%92%e5%88%86%e9%85%8d" &gt;虚拟机网段规划分配&lt;/a&gt;章节中有说明，填上。&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;确认填写信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;确认安装后稍等一段时间，PVE 会自动重启，系统选择 &lt;strong&gt;Proxmox VE GUN/Linux&lt;/strong&gt;，之后会进入 PVE 系统的登陆页面。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/07/63e1ab32bee01.png"
loading="lazy"
alt="1675733810414.png"
&gt;&lt;/p&gt;
&lt;p&gt;登陆的用户名是 &lt;strong&gt;root&lt;/strong&gt;，密码是刚刚安装时填写的密码。上面的信息是 PVE 的 Web 控制台地址，图中的地址可能和我的不一样，这个和前面设置的 IP 段有关。&lt;/p&gt;
&lt;h3 id="连接-pve-主机"&gt;连接 PVE 主机
&lt;/h3&gt;&lt;p&gt;安装完成以后，使用网线连接软路由，并配置自己电脑的有线网卡保证和软路由在同一个网段。比如我前面规划我的 IP 网段为 192.168.5.0/24，电脑随便填一个不会冲突的 IP，网关和 DNS 可以填为 OpenWrt 预留的地址。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/07/63e1a9ce293c3.png"
loading="lazy"
alt="1675733453093.png"
&gt;&lt;/p&gt;
&lt;p&gt;之后可以直接访问安装成功时提示的 PVE Web 控制台地址和端口，即使没有证书也要使用 &lt;strong&gt;https&lt;/strong&gt; 访问，浏览器高级选项中有继续访问。用户名是 &lt;strong&gt;root&lt;/strong&gt; 密码就是安装时填写的。下面可以选择语言为简体中文。可能会有一个其他提示直接跳过即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/07/63e1ae4e965f6.png"
loading="lazy"
alt="1675734606058.png"
&gt;&lt;/p&gt;
&lt;h2 id="一些配置"&gt;一些配置
&lt;/h2&gt;&lt;p&gt;为了方便一些虚拟机可以直通硬件设备，比如 NAS 直通硬盘，提高工作效率，所以需要对 PVE 设置并开启硬件直通。&lt;/p&gt;
&lt;p&gt;前面步骤连上软路由，使用 Shell 连接 PVE 系统，以上面为例地址为 192.168.5.2，用户名密码同上面。虚拟的相关技术不太懂，本人也是跟着操作的。&lt;/p&gt;
&lt;p&gt;偶然发现一篇文章讲了一些相关内容，内核大佬请看 &lt;a class="link" href="https://blog.csdn.net/coolfishbone_joey/article/details/124411847" target="_blank" rel="noopener"
&gt;[转]关于Linux grub配置iommu=pt intel_iommu=on&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pve直通特性功能"&gt;PVE直通特性功能
&lt;/h3&gt;&lt;p&gt;注意 Intel 和 AMD 的CPU 一些参数不一样，我使用的 J4125 是 Intel 的。修改的文件都是 &lt;code&gt;/etc/default/grub&lt;/code&gt; ，需要修改的参数是 &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;，默认值应该是&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据 CPU 不同需要修改成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet intel_iommu=on iommu=pt&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;AMD CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet amd_iommu=on iommu=pt&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意参数之间的空格，修改之后保存退出，执行指令 &lt;code&gt;update-grub&lt;/code&gt; 更新一下引导程序，出现 &lt;strong&gt;done&lt;/strong&gt;字样就算成功。&lt;/p&gt;
&lt;h3 id="增加模块"&gt;增加模块
&lt;/h3&gt;&lt;p&gt;接下来增加一些模块，修改 &lt;code&gt;/etc/modules&lt;/code&gt;文件，添加#号下面的几个模块。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with &amp;#34;#&amp;#34; are ignored.
vfio
vfio_iommu_type1
vfio_pci
vfio_virqfd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行指令 &lt;code&gt;update-initramfs -u -k all&lt;/code&gt; 对模块的升级。没有出现 &lt;strong&gt;Error&lt;/strong&gt; 字样就算成功了，之后 &lt;strong&gt;reboot&lt;/strong&gt; 重启一下。&lt;/p&gt;
&lt;h2 id="结束"&gt;结束
&lt;/h2&gt;&lt;p&gt;这一篇就先写到 PVE 的安装和配置直通，下一篇打算写自己经历的固件的选择和安装。软路由老早就装好了，当时也没截图凭借一些其他的教程写了自己的经过，自己挖的坑一定要填上！&lt;/p&gt;</description></item><item><title>中国联通SK-D748光猫超级密码获取</title><link>https://www.braindance.top/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</guid><description>&lt;p&gt;折腾软路由百忙之中抽时间来简单&lt;del&gt;水&lt;/del&gt;一篇。&lt;/p&gt;
&lt;p&gt;有这个需求是因为目前在家里是用另一个无线路由器桥接联通的光猫的，但是在dhcp 里死活找不到桥接路由器分配的 ip，然后插上软路由竟然又把 ip 分配给软路由了，真是不服不行。&lt;/p&gt;
&lt;p&gt;之前装联通宽带的时候尝试过找师傅要超级管理员的密码，但是师傅给我打哈哈糊弄过去了，给的一个普通 user 用户并没有静态 ip 的权限，所以就去网上找教程了，自己记录一下。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a class="link" href="https://www.right.com.cn/forum/thread-8253868-1-1.html" target="_blank" rel="noopener"
&gt;https://www.right.com.cn/forum/thread-8253868-1-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设备型号 SK-D748-C&lt;/p&gt;
&lt;h2 id="第一步"&gt;第一步
&lt;/h2&gt;&lt;p&gt;保证可以局域网内正常访问联通光猫的管理界面。比如我的光猫地址为 192.168.1.1&lt;/p&gt;
&lt;h2 id="第二步"&gt;第二步
&lt;/h2&gt;&lt;p&gt;打开隐藏配置界面：&lt;a class="link" href="http://192.168.1.1/hidden_version_switch.html" target="_blank" rel="noopener"
&gt;http://192.168.1.1/hidden_version_switch.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/01/04/63b53083b2580.png"
loading="lazy"
alt="1672818822972.png"
&gt;&lt;/p&gt;
&lt;p&gt;勾选图中的 Telnet Enable 选项，网页会刷新一下，接下来测试一下光猫的 telent 是否成功打开。&lt;/p&gt;
&lt;p&gt;开始 - 运行 - cmd，运行 &lt;code&gt;telnet 192.168.1.1&lt;/code&gt; 提示输入登陆用户名称视为成功。&lt;/p&gt;
&lt;h2 id="第三步"&gt;第三步
&lt;/h2&gt;&lt;p&gt;使用 ftp 连接光猫，默认的账号密码是 &lt;code&gt;useradmin/useradmin&lt;/code&gt; ，在 &lt;code&gt;/var/tmp&lt;/code&gt; 目录下的 &lt;code&gt;telnet_su_passwd&lt;/code&gt; 文件就是管理员密码。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/01/04/63b533f299fab.png"
loading="lazy"
alt="1672819703315.png"
&gt;&lt;/p&gt;
&lt;p&gt;我最后获得的密码格式是：前半段是光猫默认的 wifi 密码，从 CUAdmin 开始到后面一串数字是超级管理员的登陆密码&lt;/p&gt;
&lt;p&gt;超级管理员用户名是 CUAdmin&lt;/p&gt;
&lt;h2 id="其他说明"&gt;其他说明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不要尝试在 ftp 里随意删除软件，可能导致设备异常&lt;/li&gt;
&lt;li&gt;获取超级管理员权限后，修改任何设置前自行评估有无风险。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>ZUT 使用路由器连接校园网</title><link>https://www.braindance.top/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;我们学校的校园网不光每个月要宽带费 20/月，而且要绑定一个校园卡，我的一个月月租下来要 49/月，而且校园网还限制设备数量只能连接一个，我一般都是电脑连校园网，手机用流量，但是教职工的校园网就可以两个设备连接，寝室里目前有6+个设备也需要联网，商量以后打算搞个路由器贡献一个账号连校园网开 wifi，之前就见贴吧有老哥已经成功了，所以自己也尝试一下做个记录，给以后的同学看也不错。由于我已经连好路由器了，所以部分图片取自网络图片作为参考，我也尽量说的详细些。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;对于任何硬件、软件的损坏，本人没有赔偿的责任，哪怕这样的后果是因教程中的错误造成的。也请认真对待每一步操作，也许因为你的操作不当硬件因此变成一块砖。另外本教程的操作会使你的路由器失去保修。&lt;/li&gt;
&lt;li&gt;本篇文章仅起指导性的作用，在操作的过程中遇到的问题也许我也没有遇到过，请先自行尝试解决，如果我有空也会尽量帮助。&lt;/li&gt;
&lt;li&gt;学校明令禁止安装路由器，本人绝对没有怂恿或建议任何同学安装路由器，本人安装路由器的行为完全属于个人意志，仅仅作为个人的学习技术交流，请读者在安装好路由器之后 24 小时内再将之拆除，请按照学校指明的方式连接到互联网。如果学校根据校规等文件追究责任，与本人无关。&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;叠甲过&lt;/p&gt;
&lt;h2 id="前置知识"&gt;前置知识
&lt;/h2&gt;&lt;p&gt;校园网插入网线认证是要模拟 Dr.com 软件的发包认证，除了账号密码认证校园网以外，软件还会定时发送心跳包保证校园网连接。&lt;/p&gt;
&lt;p&gt;zut 的校园网认证格式为账号：&lt;code&gt;\r\n你的学号@[unicom|telecom|cmcc]&lt;/code&gt; ，其中 &lt;code&gt;@&lt;/code&gt; 后面的是你的运营商，对照前面的格式分别为：联通、电信、移动，例如我的是联通校园网，账号就是：&lt;code&gt;\r\n2022********@unicom&lt;/code&gt;，密码就是你自己的密码。&lt;/p&gt;
&lt;p&gt;zut 校园网的客户端版本为：6.0.0（P）&lt;/p&gt;
&lt;p&gt;校园网的防检测插件原理还没有写，自己用的 小米4C 是社区固件资源中自带的。想看原理可以看最后挖坑部分&lt;/p&gt;
&lt;h2 id="需要的材料"&gt;需要的材料
&lt;/h2&gt;&lt;p&gt;本教程使用的路由器型号 &lt;code&gt;Xiaomi router 4c&lt;/code&gt; pdd二手35，安装的系统 &lt;code&gt;openwrt&lt;/code&gt;。&lt;strong&gt;请注意&lt;/strong&gt;：路由器的选择直接影响到你后面的操作，我专门在网上挑了好久选的这个路由器，但是，&lt;strong&gt;唯独这个路由器的社区资源最特殊&lt;/strong&gt;，本人也是经过各种尝试才成功。如果选择其他路由器，本教程中的主要安装思路相同，但是需要自行寻找适合自己路由器的固件资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由器。&lt;/li&gt;
&lt;li&gt;网线两根。一根我买的8m的，因为宿舍AP在门上面，另一根需要连接路由器和电脑，长度自己看。&lt;/li&gt;
&lt;li&gt;开通校园网的账号。&lt;/li&gt;
&lt;li&gt;自己思考的能力。&lt;/li&gt;
&lt;li&gt;需要的软件压缩包：&lt;a class="link" href="https://wwn.lanzouy.com/igsaW0dn0k3a" target="_blank" rel="noopener"
&gt;zut_Xiaomi_router_4c.zip&lt;/a&gt;。其中包含
&lt;ul&gt;
&lt;li&gt;dogcom.zip。用来进行校园网模拟拨号，定时发送心跳包的工具。&lt;/li&gt;
&lt;li&gt;R3GV2 patches.zip。刷机的主要部分包含了：R3GV2 patches（前期连接路由器的工具）、Mi4C.bin（小米 4c 的 openwrt 固件自带防检测插件）、breed.bin（breed web 恢复控制台）&lt;/li&gt;
&lt;li&gt;MobaXterm_Portable.zip。用来连接路由器和传输文件的软件&lt;/li&gt;
&lt;li&gt;小米路由器4C恢复官方固件工具包.zip。刷成砖的&lt;a class="link" href="https://web.vip.miui.com/page/info/mio/mio/detail?postId=19134127&amp;amp;app_version=dev.20051" target="_blank" rel="noopener"
&gt;官方补救措施&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="教程参考的网站或资料"&gt;教程参考的网站或资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;贴吧老哥的教程：&lt;a class="link" href="https://tieba.baidu.com/p/7760362347" target="_blank" rel="noopener"
&gt;https://tieba.baidu.com/p/7760362347&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;广东工业大学在 github 上的教程：&lt;a class="link" href="https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt" target="_blank" rel="noopener"
&gt;https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;【记录】小米路由器 4C 刷机过程：&lt;a class="link" href="https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27" target="_blank" rel="noopener"
&gt;https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;R4CM，说说我的小米路由器4C刷机过程：不用Linux也不用虚拟机…… ：&lt;a class="link" href="https://www.right.com.cn/FORUM/thread-4047571-1-1.html" target="_blank" rel="noopener"
&gt;https://www.right.com.cn/FORUM/thread-4047571-1-1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;路由器认证校园网drcom：&lt;a class="link" href="https://www.brothereye.cn/router/669/" target="_blank" rel="noopener"
&gt;https://www.brothereye.cn/router/669/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="开工"&gt;开工
&lt;/h2&gt;&lt;p&gt;接通路由器电源，&lt;strong&gt;使用网线连接路由器&lt;/strong&gt;，进入初始化管理页面通常是 &lt;code&gt;192.168.1.1&lt;/code&gt;，能跳过就跳过，下图右选择无需拨号即可。（网络图片仅供参考）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63450a2f460ac.png"
loading="lazy"
alt="ab3pm-21hcz.png"
&gt;&lt;/p&gt;
&lt;p&gt;接下来设置 wifi 名称和密码，可以勾选管理密码和 wifi 密码相同的框，保存以后会提示新的管理后台地址，通常是 &lt;code&gt;192.168.31.1&lt;/code&gt;，使用管理密码登陆以后，显示路由器界面就算初始化成功。&lt;/p&gt;
&lt;h2 id="刷入不死-breed"&gt;刷入不死 Breed
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Breed 是国内个人 hackpascal 开发的闭源 Bootloader（引导加载器，即为用于加载操作系统的程序），也被称为“不死鸟”。
因为有些官方升级固件自带 bootloader，如果从官方固件升级，会导致现有 bootloader 被覆盖。而当 Breed 更新固件时，它会自动删除固件附带的引导加载程序，因此可以防止 Breed 被覆盖。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;刷入 Breed 的作用就是为后面刷固件做个保险，失败以后可以进行 reset 复位，防止路由器刷成一块砖。&lt;/p&gt;
&lt;h3 id="开启路由器-telnet-和-ftp"&gt;开启路由器 telnet 和 ftp
&lt;/h3&gt;&lt;p&gt;打开前面下载的压缩包中的 &lt;code&gt;R3GV2 patches&lt;/code&gt; 文件夹，运行其中的 &lt;code&gt;0.start_main.bat&lt;/code&gt;，这个批处理的命令主要是运行了文件夹中的 &lt;code&gt;main.py&lt;/code&gt; ，而 &lt;code&gt;main.py&lt;/code&gt; 做的事情就是尝试发现你的路由器后台地址，然后需要输入&lt;strong&gt;管理后台的密码&lt;/strong&gt;，然后执行一些 exploit 在路由器中写入后门，界面中出现 &lt;code&gt;Done&lt;/code&gt; 字样就算成功。&lt;/p&gt;
&lt;p&gt;这里遇到过扫描不到管理后台的情况，如果遇到了可以参考以下步骤。修改 &lt;code&gt;main.py&lt;/code&gt; 文件中的第 10 行到 15 行，删掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;line4 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; subprocess&lt;span style="color:#f92672"&gt;.&lt;/span&gt;check_output([&lt;span style="color:#e6db74"&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;/c&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;chcp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;437&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;tracert&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;-d&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;-h&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;1.1.1.1&amp;#34;&lt;/span&gt;])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\r\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strip()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; data &lt;span style="color:#f92672"&gt;in&lt;/span&gt; line4:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; router_ip_address &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加 &lt;code&gt;router_ip_address&lt;/code&gt; 变量为你的管理后台地址，通常为 &lt;code&gt;192.168.31.1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;router_ip_address &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;192.168.31.1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来使用 MobaXterm 连接路由器，新建一个 session 类型选择 telnet，这时的路由器地址就是管理后台的地址应该是 &lt;code&gt;192.168.31.1&lt;/code&gt;，用户为 &lt;code&gt;root&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/6345188f255ec.png"
loading="lazy"
alt="创建session"
&gt;&lt;/p&gt;
&lt;p&gt;ps：如果连接不成功就多运行几次 &lt;code&gt;0.start_main.bat&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="备份原路由器信息"&gt;备份原路由器信息
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;以下步骤请注意！！！&lt;/strong&gt;
最好备份以下路由器原本分区文件，以防不备之需，其中&lt;code&gt;eeprom.bin&lt;/code&gt; 是最重要的，因为刷入 breed 以后可能会导致 MAC 地址全 0，需要刷入一次这个文件才会恢复。执行以下命令，&lt;code&gt;of&lt;/code&gt; 后面的就是文件输出的路径&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;dd if=/dev/mtd0 of=/tmp/all.bin
dd if=/dev/mtd2 of=/tmp/bootloader.bin
dd if=/dev/mtd3 of=/tmp/eeprom.bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开电脑资源管理器，输入 &lt;code&gt;ftp://192.168.31.1&lt;/code&gt; 按回车，使用 ftp 连接路由器（为什么不用 MobaXterm，因为后门创建的 ftp 是匿名用户，直接使用 windows 资源管理器打开更方便）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63451aca4e1e0.png"
loading="lazy"
alt="连接 ftp"
&gt;&lt;/p&gt;
&lt;p&gt;找到 &lt;code&gt;tmp&lt;/code&gt; 文件夹其中的三个文件：&lt;code&gt;all.bin&lt;/code&gt; 、&lt;code&gt;bootloader.bin&lt;/code&gt; 和 &lt;code&gt;eeprom.bin&lt;/code&gt;，复制到本地做备份，下载以后一定要看清楚三个文件的大小分别是 &lt;code&gt;16MB&lt;/code&gt; 、&lt;code&gt;64k&lt;/code&gt; 和 &lt;code&gt;64k&lt;/code&gt;，如果大小是 &lt;code&gt;1k&lt;/code&gt; 那就是错误的，再备份几次，也有可能是后门没写牢再执行 &lt;code&gt;0.start_main.bat&lt;/code&gt; 试试。&lt;/p&gt;
&lt;h3 id="上传-breed--文件并刷入"&gt;上传 Breed 文件并刷入
&lt;/h3&gt;&lt;p&gt;在资源管理器的 ftp 中把 &lt;code&gt;breed.bin&lt;/code&gt; 文件上传到 &lt;code&gt;/tmp&lt;/code&gt; 文件夹下，在 telnet 中执行指令刷入引导加载器&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mtd write /tmp/breed.bin Bootloader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不提示错误信息就是刷入成功了。&lt;/p&gt;
&lt;h3 id="重启路由器进入-breed"&gt;重启路由器进入 Breed
&lt;/h3&gt;&lt;p&gt;拔掉路由器电源，用一根牙签类似的东西，插入路由器后面的 reset 孔不要松开，再插上电源，路由器灯会先闪一下，直到连续闪烁几次以后再松开 reset，这时路由器已经进入 breed 了，打开浏览器访问 &lt;code&gt;192.168.1.1&lt;/code&gt; 就可以看到 Breed 的界面（网络图片仅供参考，系统信息可能不一样）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63451fb563c3a.png"
loading="lazy"
alt="Breed界面"
&gt;&lt;/p&gt;
&lt;p&gt;如果你在之后有不可挽回的错误操作，都可以通过以上操作进行复位重置。&lt;/p&gt;
&lt;h3 id="检查-mac-地址"&gt;检查 MAC 地址
&lt;/h3&gt;&lt;p&gt;进入 MAC 地址修改，通常你应该看到的前三个 MAC 地址应该是全0，这就需要刷入 一次之前的 &lt;code&gt;eeprom.bin&lt;/code&gt;。（网络图片仅供参考）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/6345201b6c592.png"
loading="lazy"
alt="MAC 地址修改"
&gt;&lt;/p&gt;
&lt;p&gt;进入&lt;strong&gt;固件更新&lt;/strong&gt; （界面同下面），勾选 &lt;strong&gt;EEPORM&lt;/strong&gt;，选择文件 &lt;code&gt;eeprom.bin&lt;/code&gt;，其他的都不要动，然后上传，根据提示更新，之后会重新回到 Breed 控制台。&lt;/p&gt;
&lt;h2 id="刷入-openwrt"&gt;刷入 openwrt
&lt;/h2&gt;&lt;p&gt;同样在 Breed 控制台选择&lt;strong&gt;固件更新&lt;/strong&gt; ，勾选&lt;strong&gt;固件&lt;/strong&gt;，选择 &lt;code&gt;Mi4C.bin&lt;/code&gt; openwrt 固件文件，根据提示上传安装。（网络图片仅供参考）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/634527710db18.png"
loading="lazy"
alt="固件更新"
&gt;&lt;/p&gt;
&lt;p&gt;之后路由器灯会全灭，然后电源灯进入&lt;strong&gt;黄色闪烁&lt;/strong&gt;的状态，就是正在安装，等待安装成功以后等会变成&lt;strong&gt;蓝色&lt;/strong&gt;，之后就可以访问 &lt;code&gt;192.168.1.1&lt;/code&gt; 进入openwrt 管理后台页面，默认密码为 &lt;code&gt;password&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/634524441d739.png"
loading="lazy"
alt="openwrt 界面"
&gt;&lt;/p&gt;
&lt;p&gt;说一下 &lt;code&gt;Mi4C.bin&lt;/code&gt; 这个openw 的固件。这个固件来自前面提到的广东工业大学项目中的 &lt;a class="link" href="https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27" target="_blank" rel="noopener"
&gt;issue&lt;/a&gt;，是一位同学自己找人定制的一份固件并且免费分享出来了，其中已经内置了 Dr.com 插件（用来发送心跳包）及防检测插件（ttl，ipid，cookieflash，ua2f 最新版），非常感谢这位同学的分享。&lt;/p&gt;
&lt;h3 id="配置-pppoe-拨号"&gt;配置 PPPoE 拨号
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：宿舍上面的AP接口插入路由器的 WAN 口&lt;/p&gt;
&lt;p&gt;选择 网络 &amp;mdash;&amp;gt; 接口，点击 &lt;code&gt;WAN&lt;/code&gt; 接口对应的 编辑（Edit）按钮。&lt;/p&gt;
&lt;p&gt;下面图中是我的已经配置好的界面，初次进入应该是有个 &lt;code&gt;WAN&lt;/code&gt; 和 &lt;code&gt;WAN6&lt;/code&gt; 接口，它们两个的下面并不是我图中的 &lt;code&gt;pppoe-wan&lt;/code&gt;，应该是 &lt;code&gt;eht0.2&lt;/code&gt;。&lt;code&gt;WAN6&lt;/code&gt; 接口是一个 DHCP IPV6 客户端，它和 &lt;code&gt;WAN&lt;/code&gt; 接口是同一个物理接口，留着也不影响 。&lt;code&gt;LAN&lt;/code&gt; 口尽量不要动。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452a57015e9.png"
loading="lazy"
alt="网络接口配置"
&gt;&lt;/p&gt;
&lt;p&gt;通信协议选择 &lt;code&gt;PPPoE&lt;/code&gt; 然后点击出现的&lt;strong&gt;切换协议&lt;/strong&gt;按钮。然后根据下表填入信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PAP/CHAP 用户名。校园网账号，前置知识中的&lt;code&gt;\r\n****@***&lt;/code&gt;格式。&lt;/li&gt;
&lt;li&gt;PAP/CHAP 密码。校园网密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他的不用动，请仔细检查校园网账号和密码是否正确。之后点击保存退出后，点击界面右下角的&lt;strong&gt;保存并应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452de3e1732.png"
loading="lazy"
alt="1665478137525.png"
&gt;&lt;/p&gt;
&lt;p&gt;PPPoE 部分配置完成。但是校园网目前还不能用。&lt;/p&gt;
&lt;h3 id="配置无线网络"&gt;配置无线网络
&lt;/h3&gt;&lt;p&gt;选择 网络 &amp;mdash;&amp;gt; 无线，如果提示已禁用就点击启用，只有一个你可以点击编辑的按钮。&lt;code&gt;ESSID&lt;/code&gt; 就是设备搜索到的无线网名称。网络是 &lt;code&gt;LAN&lt;/code&gt; 接口就不用动。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452e4608e41.png"
loading="lazy"
alt="无线网名称配置"
&gt;&lt;/p&gt;
&lt;p&gt;选择 无线安全 配置无线网密码，加密选择 &lt;code&gt;WPA2-PSK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452e93b28bc.png"
loading="lazy"
alt="无线网密码配置"
&gt;&lt;/p&gt;
&lt;p&gt;无线网络部分配置完成。&lt;/p&gt;
&lt;h3 id="配置管理后台密码"&gt;配置管理后台密码
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;192.168.1.1&lt;/code&gt; 管理后台默认密码 &lt;code&gt;password&lt;/code&gt; 容易被进入，进入 系统 &amp;mdash;&amp;gt; 管理权，可以更改访问后台管理员的密码。&lt;/p&gt;
&lt;h2 id="校园网认证"&gt;校园网认证
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：配置好 PPPoE 拨号&lt;/p&gt;
&lt;p&gt;在前面我们已经成功配置了 PPPoE 拨号，但是要记得校园网还要发送心跳包保证在线状态。这部分主要解决发送心跳包的问题。&lt;/p&gt;
&lt;p&gt;还需要说一下，发送心跳包的主要原理来自 &lt;a class="link" href="https://github.com/drcoms/drcom-generic" target="_blank" rel="noopener"
&gt;drcom-generic&lt;/a&gt; 项目，广工大项目中使用的 Dr.com 插件是这个项目的 openwrt 插件版本，并且现在刷入的 openwrt 固件自带的也是这个插件，我并没用使用成功。最终是结合了学校贴吧老哥使用的 &lt;a class="link" href="https://github.com/mchome/dogcom" target="_blank" rel="noopener"
&gt;dogcom&lt;/a&gt; 才成功，dogcom 则是前面那个项目的 C 语言实现版本。&lt;/p&gt;
&lt;h3 id="删除-drcom-插件"&gt;删除 Dr.com 插件
&lt;/h3&gt;&lt;p&gt;在使用 dogcom 之前，需要把之前的 Dr.com 插件删除，因为会造成重复发包的问题导致无法认证。&lt;/p&gt;
&lt;p&gt;进入 系统 &amp;mdash;&amp;gt; 软件包，在界面中筛选器部分搜索 drcom 或者 gdut （记不清了），然后选择 已安装列表，搜索到的软件包点击移除按钮，自动移除未使用的依赖可以取消勾选。&lt;/p&gt;
&lt;h3 id="通过-openwrt-提供的-ssh-连接路由器"&gt;通过 openwrt 提供的 ssh 连接路由器
&lt;/h3&gt;&lt;p&gt;openwrt 安装成功以后其实就可以通过 ssh 连接路由器了，使用 MobaXterm 连接路由器。这时连接的地址是 &lt;code&gt;192.168.1.1&lt;/code&gt;，用户名是 &lt;code&gt;root&lt;/code&gt;，密码是你 openwrt 的&lt;strong&gt;管理后台密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/6345354d1c8b6.png"
loading="lazy"
alt="ssh连接"
&gt;&lt;/p&gt;
&lt;p&gt;MobaXterm 使用 ssh 连接以后左边会自己创建一个 ftp 连接，就是图中的框框部分&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/634535f1bcec4.png"
loading="lazy"
alt="1665480198855.png"
&gt;&lt;/p&gt;
&lt;p&gt;上面蓝色选中的部分是当前的路径，可以修改当前所在路径，通过拖拽可以直接上传文件&lt;/p&gt;
&lt;h3 id="安装-dogcom"&gt;安装 dogcom
&lt;/h3&gt;&lt;p&gt;dogcom 安装方式有两种， 一种是使用 openwrt 版本的通过 opkg 软件包管理器安装，另一种是通过 ftp 上传 dogcom 可执行文件到 &lt;code&gt;/usr/bin/&lt;/code&gt; 文件夹中。就算使用 opkg 软件包安装，两个最后的结果都是一样的，就是在 &lt;code&gt;/usr/bin/&lt;/code&gt; 文件夹中有一个 dogcom 的可执行文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;方法一：使用 opkg 软件包安装&lt;/p&gt;
&lt;p&gt;还是在系统 &amp;mdash;&amp;gt; 软件包界面，有一个上传软件包按钮，点击上传下载的压缩包 &lt;code&gt;dogcom.zip&lt;/code&gt; 中的 &lt;code&gt;dogcom_v1.6.2-1_mipsel_24kc.ipk&lt;/code&gt;，之后执行安装即可。&lt;/p&gt;
&lt;p&gt;也可以通过 ftp 把文件上传到 &lt;code&gt;/tmp&lt;/code&gt; 文件夹中，然后在控制台执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;opkg install /tmp/dogcom_v1.6.2-1_mipsel_24kc.ipk
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;方法二：通过 ssh 上传到指定目录
在左侧的 ftp 界面上面路径输入 &lt;code&gt;/usr/bin&lt;/code&gt; 进入文件夹，然后拖动名为 &lt;strong&gt;dogcom&lt;/strong&gt; 的文件上传到该目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上方法两个方法上传安装 dogcom 以后，可以在控制台执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/usr/bin/dogcom -h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试软件是否可用，软件输出为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;root@iapp:~# /usr/bin/dogcom
Drcom-generic implementation in C.
Version: 1.6.2
Usage:
dogcom -m &amp;lt;dhcp/pppoe&amp;gt; -c &amp;lt;FILEPATH&amp;gt; [options &amp;lt;argument&amp;gt;]...
Options:
--mode &amp;lt;dhcp/pppoe&amp;gt;, -m &amp;lt;dhcp/pppoe&amp;gt; set your dogcom mode
--conf &amp;lt;FILEPATH&amp;gt;, -c &amp;lt;FILEPATH&amp;gt; import configuration file
--bindip &amp;lt;IPADDR&amp;gt;, -b &amp;lt;IPADDR&amp;gt; bind your ip address(default is 0.0.0.0)
--log &amp;lt;LOGPATH&amp;gt;, -l &amp;lt;LOGPATH&amp;gt; specify log file
--daemon, -d set daemon flag
--802.1x, -x enable 802.1x
--eternal, -e set eternal flag
--verbose, -v set verbose flag
--help, -h display this help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;视为成功。&lt;/p&gt;
&lt;h3 id="上传-dogcom-配置文件"&gt;上传 dogcom 配置文件
&lt;/h3&gt;&lt;p&gt;可以参考上一节安装 dogcom 的方法二，使用 ftp 上传 &lt;code&gt;dogcom.conf&lt;/code&gt; 文件到 &lt;code&gt;/usr/&lt;/code&gt; 目录下。这个 &lt;code&gt;dogcom.conf&lt;/code&gt; 内容是发送心跳包的配置文件，来源是通过 &lt;a class="link" href="https://github.com/drcoms/drcom-generic" target="_blank" rel="noopener"
&gt;drcom-generic&lt;/a&gt; 项目教程，使用 Wireshark 软件进行抓包并使用 &lt;a class="link" href="http://drcoms.github.io/drcom-generic/" target="_blank" rel="noopener"
&gt;在线配置器&lt;/a&gt; 获得的，如果以后校园网配置更改还需要自行抓包测试。&lt;code&gt;dogcom.conf&lt;/code&gt; 的内容如下&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server = &amp;#39;1.1.1.1&amp;#39;
pppoe_flag = &amp;#39;\x2f&amp;#39;
keep_alive2_flag = &amp;#39;\xdb&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="配置-pppoe-拨号文件"&gt;配置 PPPoE 拨号文件
&lt;/h3&gt;&lt;p&gt;在 ssh 中按照顺序执行以下指令，&lt;strong&gt;这一步十分的重要！！！&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cp /lib/netifd/proto/ppp.sh /lib/netifd/proto/ppp.sh_bak
sed -i &amp;#39;/proto_run_command/i username=`echo -e &amp;#34;$username&amp;#34;`&amp;#39; /lib/netifd/proto/ppp.sh
sed -i &amp;#39;/proto_run_command/i password=`echo -e &amp;#34;$password&amp;#34;`&amp;#39; /lib/netifd/proto/ppp.sh
chmod 777 /usr/bin/dogcom
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/usr/bin/dogcom -m pppoe -c /usr/drcom.conf -e -d &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dogcom 会自动启用一个守护进程发送心跳包认证，为了保证每次路由器重启以后自动连接校园网并认证，建议在 openwrt 管理页面的 系统 &amp;mdash;&amp;gt; 计划任务 中添加本地启动脚本&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sleep 10 &amp;amp;&amp;amp; /usr/bin/dogcom -m pppoe -c /usr/drcom.conf -e -d &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63453a962923a.png"
loading="lazy"
alt="1665481387645.png"
&gt;&lt;/p&gt;
&lt;h3 id="查看校园网是否成功认证"&gt;查看校园网是否成功认证
&lt;/h3&gt;&lt;p&gt;配置完成后，重启路由器，并请耐心等待若干分钟（3分钟内），重新回到 openwrt 管理页面的 网络 &amp;mdash;&amp;gt; 接口中，查看 &lt;code&gt;WAN&lt;/code&gt; 接口 PPPoE 是否拨号成功，如果运行时间、发送、接受均有数据，并且 IPv4 获得的一个地址，则说明路由器已经可以上网了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63453da03857e.png"
loading="lazy"
alt="拨号成功"
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wan中，学号密码输入错误。&lt;/p&gt;
&lt;p&gt;路由器的wan没有与校园网端口连接&lt;/p&gt;
&lt;p&gt;网线断了，或者路由器坏了&lt;/p&gt;
&lt;p&gt;压根没开通校园网&lt;/p&gt;
&lt;p&gt;dogcom 插件中，校园网心跳配置已经更改&lt;/p&gt;
&lt;p&gt;端口被学校网络中心拉黑了&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="挖个坑"&gt;挖个坑
&lt;/h2&gt;&lt;h3 id="校园网防检测"&gt;校园网防检测
&lt;/h3&gt;&lt;p&gt;常见的四种检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 IPv4 数据包包头内的 TTL 字段的检测（固定TTL）&lt;/li&gt;
&lt;li&gt;基于 HTTP 数据包请求头内的 User-Agent 字段的检测(UA2F)&lt;/li&gt;
&lt;li&gt;DPI (Deep Packet Inspection) 深度包检测技术）（不常用）&lt;/li&gt;
&lt;li&gt;基于 IPv4 数据包包头内的 Identification 字段的检测（rkp-ipid 设置 IPID）&lt;/li&gt;
&lt;li&gt;基于网络协议栈时钟偏移的检测技术（防时钟偏移检测）&lt;/li&gt;
&lt;li&gt;Flash Cookie 检测技术（iptables 拒绝 AC 进行 Flash 检测 不常用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大佬讲解文章：https://catalog.chn.moe/&lt;/p&gt;
&lt;p&gt;广东工业大学项目：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt#步骤六配置防检测&lt;/p&gt;
&lt;h3 id="校园网经常掉线"&gt;校园网经常掉线
&lt;/h3&gt;&lt;p&gt;2022.10.31 更新&lt;/p&gt;
&lt;p&gt;自己从网上找了一个检测断网并自动重新拨号的脚本，配合定时任务每天凌晨 4 点重启，已经用了 20 多天了感觉还不错，分享一波代码。可以在任意目录下创建一个 ping 文件夹（但是需要自己改下某些配置路径），下面的例子是在 /root/ping 目录里放的脚本。脚本包括产生的日志有三个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping.sh。每间隔 &lt;code&gt;SLEEP_SEC&lt;/code&gt; 时间测试两个外网地址能否访问，超过 &lt;code&gt;PING_SUM&lt;/code&gt; 次数无法访问判断为拨号掉线，重启 wan 口进行拨号。产生的日志文件存放到 &lt;code&gt;/root/ping/log.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;daemon.sh。检测 ping.sh 进程是否存活，如果不存在进程则重启进程；判断日志文件超过 50MB 清空日志文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ping.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PING_SUM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#ping interval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SLEEP_SEC&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#连续重启网卡 REBOOT_CNT 次网络都没有恢复正常，重启软路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#时间= (SLEEP_SEC * PING_SUM + 20) * REBOOT_CNT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;REBOOT_CNT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;LOG_PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/root/ping/log.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;reboot_cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ping -c &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; -W &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; 114.114.114.114 &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ret&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ping -c &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; -W &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; 223.6.6.6 &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ret2&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[[&lt;/span&gt; $ret -eq &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; $ret2 -eq &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;Network OK!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reboot_cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;expr $cnt + 1&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo -n &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; [%d/%d] Network maybe disconnected,checking again after %d seconds!\r\n&amp;#39;&lt;/span&gt; $cnt $PING_SUM $SLEEP_SEC &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; [%d/%d] Network maybe disconnected,checking again after %d seconds!\r\n&amp;#39;&lt;/span&gt; $cnt $PING_SUM $SLEEP_SEC
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; $cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; $PING_SUM &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;ifup wan!!!&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;ifup wan!!!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ifdown wan
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ifup wan
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#重连后，等待20秒再进行ping检测&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#网卡重启超过指定次数还没恢复正常，重启软路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reboot_cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;expr $reboot_cnt + 1&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; $reboot_cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; $REBOOT_CNT &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo -n &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; =============== reboot!&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; =============== reboot!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sshpass -p &lt;span style="color:#ae81ff"&gt;132465&lt;/span&gt; ssh -p &lt;span style="color:#ae81ff"&gt;22&lt;/span&gt; root@192.168.1.1 &lt;span style="color:#e6db74"&gt;&amp;#39;reboot&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep $SLEEP_SEC
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;daemon.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;LOG_PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/root/ping/log.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 用ps获取ups进程数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NUM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;ps | grep ping.sh | grep -v grep | wc -l&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;NUM&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 少于1，重启进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;NUM&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; -lt &lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; /root/ping/ping.sh &amp;gt; /dev/null &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo -n &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; Ping daemon start&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;du -k /root/ping/log.txt|awk &lt;span style="color:#e6db74"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; $s -gt &lt;span style="color:#ae81ff"&gt;500000&lt;/span&gt; &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; chengdatetime&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#34;+%Y-%m-%d %H:%M:%S&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo $chengdatetime&lt;span style="color:#e6db74"&gt;&amp;#34;:log size is large than expected and cleaning is started&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cat /dev/null &amp;gt; /root/ping/log.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;exit &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 openwrt 的管理后台 &amp;mdash;&amp;gt; 系统 &amp;mdash;&amp;gt; 计划任务中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; * * * reboot
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; */1 * * * /root/ping/daemon.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一行是每天 4 点重启路由器，第二行是启动检测存活脚本（看好文件路径别错），可以自行设置计划运行时间。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;分割线，以下是旧内容&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这个我也遇到过了，不知道是什么原因，毕竟我自己用电脑连着认证时不时也会掉，但是也有搜到的下面的办法&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/weixin_35251837/article/details/119553540" target="_blank" rel="noopener"
&gt;https://blog.csdn.net/weixin_35251837/article/details/119553540&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/etc/ppp/options&lt;/code&gt; 文件中添加 &lt;code&gt;persist&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="完工"&gt;完工
&lt;/h2&gt;&lt;p&gt;读到这里相信你也费了好大的力气了，也恭喜你，至少你是一个善于坚持的人，请享用你的校园网吧。有问题可以在评论区提问。&lt;/p&gt;</description></item><item><title>KKapi+ISpeak说说页面部署</title><link>https://www.braindance.top/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;感觉原来的 Artitalk 说说不好康，在开往里发现好多博客都用的说说功能叫叨叨点啥，看了看作者的&lt;a class="link" href="https://www.antmoe.com/speak/" target="_blank" rel="noopener"
&gt;说说页面&lt;/a&gt;，可以插入图片和标签分类，还有仅自己可见的功能，感觉挺不错的（实际是自己想折腾）所以就整一个。自己在部署过程中实在是踩了不少的坑，而且作者的文档感觉写的也不算完善，所以打算自己记录一下。&lt;/p&gt;
&lt;h2 id="项目结构"&gt;项目结构
&lt;/h2&gt;&lt;p&gt;作者的文档中各种仓库链接属实给我跳晕了，最后理出来的项目分为以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kkapi&lt;/code&gt;。是作为说说的后端部分，连接 MongoDB 数据库，还有一个&lt;code&gt;kkadmin&lt;/code&gt;的管理页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ISpeak&lt;/code&gt;。说说的主体部分，依赖于后端的 &lt;code&gt;kkapi&lt;/code&gt; ，分为前端的展示页面，和一个对接后端的发布说说页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者文档中给出很多部署方法，白嫖版的就是 vercel 后端 api + 管理界面 + MongoDB 提供的云服务，但是个人感觉 vercel 经常被墙，所以部署的 api 感觉也不会稳定，而且考虑到数据的存放问题，所以我选择的是都部署到自己服务器上。&lt;/p&gt;
&lt;h2 id="后端部署"&gt;后端部署
&lt;/h2&gt;&lt;h3 id="docker-安装-mongodb"&gt;Docker 安装 Mongodb
&lt;/h3&gt;&lt;p&gt;安装可以参考菜鸟教程的 &lt;a class="link" href="https://www.runoob.com/docker/docker-install-mongodb.html" target="_blank" rel="noopener"
&gt;Docker 安装 MongoDB&lt;/a&gt; 。因为之前听过 MongoDB 的未授权访问，所以考虑到安全性问题，创建容器的时候添加 &lt;code&gt;MONGO_INITDB_ROOT_USERNAME&lt;/code&gt; 和 &lt;code&gt;MONGO_INITDB_ROOT_PASSWORD&lt;/code&gt; 设置用户的账号密码，开启Docker MongoDB 的身份验证。考虑到数据未来的迁移可以通过 &lt;code&gt;-v&lt;/code&gt; 挂载宿主机的一个目录。可以修改默认端口再减少一些风险。最后我启动的命令如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run -d --name mongodb &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -p xxxxx:27017 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -v /my/own/datadir:/data/db &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -e MONGO_INITDB_ROOT_USERNAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mongoadmin &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -e MONGO_INITDB_ROOT_PASSWORD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;secret &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --restart&lt;span style="color:#f92672"&gt;=&lt;/span&gt;always
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mongo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后可以使用工具测试一下连接。&lt;/p&gt;
&lt;h3 id="kkapi-部署"&gt;kkapi 部署
&lt;/h3&gt;&lt;p&gt;和项目文档中的教程差不多，要注意使用的 node 版本请高于 &lt;code&gt;16.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先克隆项目源码
&lt;code&gt;git clone https://ghproxy.com/https://github.com/kkfive/kkapi-open.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接下来项目需要安装的工具 &lt;code&gt;yarn&lt;/code&gt; 和 &lt;code&gt;pm2&lt;/code&gt;，分别是
&lt;code&gt;npm i yarn -g&lt;/code&gt;
&lt;code&gt;npm i pm2 -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后安装项目所需依赖 &lt;code&gt;yarn install&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;之后再执行 &lt;code&gt;yarn build&lt;/code&gt; 编译项目。这里我的小鸡顶不住编译所以自己在本地编译传上去了💧。&lt;/li&gt;
&lt;li&gt;在项目文件夹创建环境变量文件，格式如&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-env" data-lang="env"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PORT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DATABASE_URL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mongodb://127.0.0.1:27017/kkpaiopen?authSource&lt;span style="color:#f92672"&gt;=&lt;/span&gt;admin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DATABASE_USER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mongoadmin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DATABASE_PASSWORD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;secret
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 加密密钥 测试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SECRETKEY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;xxxxxxxxxxxxxxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的数据库连接地址我原来还想使用MongoDB提供的免费云服务当数据库，但是没搞成功，所以最后使用了本地的 MongoDB，有大佬知道的可以指点一下。&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;使用 &lt;code&gt;pm2&lt;/code&gt; 使用守护线程启动项目
&lt;code&gt;pm2 start pm2.json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我启动项目遇到了 &lt;code&gt;[PM2][WARN] Expect “restart_delay” to be a typeof [object Number], but now is [object String]&lt;/code&gt; 错误，这个错误原因是作者的 pm2.json 中的 &lt;code&gt;restart_delay&lt;/code&gt; 值是字符串类型 &lt;code&gt;60s&lt;/code&gt; 改成数值 &lt;code&gt;60&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;测试项目是否成功启动
可以使用 &lt;code&gt;lsof -i:端口&lt;/code&gt; 查看端口是否被监听判断项目是否成功启动。没成功的原因大概率是因为数据库连接地址、数据库账号密码不正确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建初始化用户
&lt;code&gt;curl http://127.0.0.1:3000/api/user/init&lt;/code&gt;
创建的默认用户名和密码是 &lt;code&gt;admin&lt;/code&gt; 和 &lt;code&gt;123456&lt;/code&gt;，这个用户名密码用来登陆可视化的管理后台，并且用户似乎&lt;strong&gt;只能拥有一个&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="kkapiadmin可视化管理后台"&gt;kkapiadmin（可视化管理后台）
&lt;/h3&gt;&lt;p&gt;参考&lt;a class="link" href="https://kkapi.js.org/guide/admin/setup.html" target="_blank" rel="noopener"
&gt;官方文档&lt;/a&gt;中的教程，使用的 Vercel 部署的。这个墙不墙的就无所谓了，注意的坑有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改部署分支和生产分支为 &lt;code&gt;vercel&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;fork 作者仓库的时候记得把 only fork master 取消勾选。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后登录就是用前面初始化的用户名密码，进入后台以后可以修改密码。登陆后台以后需要设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISpeak 标签。因为发布说说是需要选择标签的，标签中的背景颜色值是&lt;strong&gt;十六进制的颜色&lt;/strong&gt;代码&lt;/li&gt;
&lt;li&gt;添加用户token。&lt;strong&gt;需要注意！！！&lt;/strong&gt;，添加的token的&lt;strong&gt;标题&lt;/strong&gt;只能是 &lt;code&gt;speak&lt;/code&gt; 不能是其他的，否则发布说说时会提示token不存在，发布时验证的就是字段为 &lt;code&gt;speak&lt;/code&gt; 的token的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/c5191febc049fbed86f5b77df8367c89.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;接下来可以在前端说说页面测试发布说说，发布说说需要输入后端 kkapi 地址、用户id （在管理后台可以找到）、token。网址：https://ispeak-biubiu.vercel.app/&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/778dcc5fe051722e4f9a919b7a9e2a61.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/491fff2969d731ff17d8799fe6a20d14.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;发布成功可以在后端看到发布的说说。&lt;/p&gt;
&lt;h2 id="前端部署"&gt;前端部署
&lt;/h2&gt;&lt;p&gt;我使用的是 Ispeak 搭配的 twikoo 评论，因为现在博客使用的就是 twikoo，省去了再部署评论的麻烦。根据&lt;a class="link" href="https://kkapi.js.org/posts/ispeak/" target="_blank" rel="noopener"
&gt;ISpeak文档部分&lt;/a&gt;，&lt;a class="link" href="https://github.com/kkfive/ISpeak/blob/master/src/types/parameter.ts" target="_blank" rel="noopener"
&gt;ispeak 配置项&lt;/a&gt;中 &lt;code&gt;comment&lt;/code&gt; 是一个回调函数，可以自行初始化评论，参照twikoo评论初始化的格式。我博客中的说说页面代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;tip&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text-align:center;&amp;#34;&lt;/span&gt;&amp;gt;ipseak加载中&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;ispeak&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.jsdelivr.net/npm/ispeak@4.4.0/style.css&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/marked/2.0.0/marked.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.jsdelivr.net/npm/ispeak@4.4.0/ispeak.umd.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/twikoo/1.6.7/twikoo.all.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;head&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementsByTagName&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;createElement&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;meta&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;referrer&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;no-referrer&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;head&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;appendChild&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;ispeak&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ispeak&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;el&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;#ispeak&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;api&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;这里是后端kkapi地址&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;author&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;后端用户id&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pageSize&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;loading_img&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;https://bu.dusays.com/2021/03/04/d2d5e983e2961.gif&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;comment&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;speak&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;_id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;title&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; } &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;speak&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 4.4.0 之后在此回调函数中初始化评论
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;//这里是twikoo的初始化配置，如果使用其他评论可以在这里修改
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;twikoo&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;el&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.ispeak-comment&amp;#39;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// 默认情况下 ipseak 生成class为 ispeak-comment 的div
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/shuoshuo/?q=&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_id&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;envId&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;twikoo后端地址&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;ispeak 加载完成&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;display&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;innerHTML&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;ipseak依赖加载失败！&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新一波。被人发现了说说的评论没有独立，自己改了下配置。
上面的代码加入了 32 和 37 行代码，其中 37 行 &lt;code&gt;path&lt;/code&gt; 属性设置为你当前的说说页面路径加 &lt;code&gt;q&lt;/code&gt; 参数，这个参数可能无所谓吧，但是 &lt;code&gt;_id&lt;/code&gt; 是当前说说的唯一 id，因为自己在页面中测试时，说说评论请求的地址格式也是根据 37 行代码这个进行请求查询的。&lt;/p&gt;
&lt;h2 id="github-登陆验证可选"&gt;Github 登陆验证（可选*）
&lt;/h2&gt;&lt;p&gt;可以发布仅登陆可见的说说，但是需要配置 Github app。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参考&lt;a class="link" href="https://kkapi.js.org/guide/setup/github.html" target="_blank" rel="noopener"
&gt;项目文档&lt;/a&gt;创建 app ，其中填写的 speak 页面路径就是 ISpeak 所在的博客路径&lt;/li&gt;
&lt;li&gt;创建以后拥有了 &lt;code&gt;Client ID&lt;/code&gt; 和 &lt;code&gt;Client Secrets&lt;/code&gt;，这两项需要填写在 kkapi 后端部署的 &lt;code&gt;local.env&lt;/code&gt; 配置中。&lt;/li&gt;
&lt;li&gt;在 kkapi 的后端界面个人设置中填写 &lt;code&gt;GitHubId&lt;/code&gt; 。获得方法访问 github 提供的接口
&lt;code&gt;https://api.github.com/users/&amp;lt;Your UserName&amp;gt;&lt;/code&gt;注意替换尖括号整体为你github的用户名，不是昵称。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://file.acs.pw/picGo/2022/03/13/20220313121930.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;在前端页面的 &lt;code&gt;speak&lt;/code&gt; 初始化中添加两个属性&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ispeak&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;speakPage&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;：&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/shuoshuo/&amp;#34;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;//这里是说说的页面路径，对应于 github app 中填写的 speak 页面路径（用双引号括起来，我不知道为啥单引号不行）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;githubClientId&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Iv1.*******&amp;#39;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;//github app 的 Client ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以在你的说说下面找到一个 Github 授权登陆。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/4aeea0532e5dc44c83a6822033d9971e.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="完工"&gt;完工
&lt;/h2&gt;&lt;p&gt;说说还支持 markdown 格式的图片插入，看起来更好用了，给作者点个赞。&lt;/p&gt;</description></item><item><title>博客图床迁移</title><link>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</guid><description>&lt;h2 id="起因"&gt;起因
&lt;/h2&gt;&lt;p&gt;原来博客的图片使用Jsdelivr和github的方式存储访问，但是最近Jsdelivr频繁的被墙，感觉可能在未来的不久会失效，毕竟好多人用来当免费的CDN（&lt;del&gt;比如我&lt;/del&gt;），也会有人使用其访问些zz敏感或其他的文件，被墙了也情有可原，而且github的仓库的作用也是用来存储代码而非图床，像我这样的人也导致了仓库的滥用，所以决定找个新的途径。&lt;/p&gt;
&lt;h2 id="过程"&gt;过程
&lt;/h2&gt;&lt;p&gt;当时在网上找了好久，最后在loc上找到了 一个&lt;a class="link" href="https://hostloc.com/thread-807685-1-1.html" target="_blank" rel="noopener"
&gt;帖子&lt;/a&gt;，感觉把目前行得通的方法都列出来了。&lt;/p&gt;
&lt;p&gt;一、第三方存储&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;github+jsdelivr 或 gitee 可以搭配PicGo使用&lt;/li&gt;
&lt;li&gt;茎肛互撸娃大佬的鸡霸图床&lt;/li&gt;
&lt;li&gt;国内对象存储&lt;/li&gt;
&lt;li&gt;使用Onedrive 或 Google Drive 搭建图床&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、自行搭建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;（腾讯云轻量香港 or CDN） 反代 （本地 or 大盘鸡）&lt;/li&gt;
&lt;li&gt;北岸域名+国内机器&lt;/li&gt;
&lt;li&gt;国内机器非标准端口&lt;/li&gt;
&lt;li&gt;家宽开通公网IP存在家里&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、直接嵌在文档中，图片转base64，markdown插入&lt;/p&gt;
&lt;p&gt;最后我是选择了良心云的cos对象存储，新用户第一年便宜，就算以后续费一年差不多也70左右。之前自己有了解过对象存储这一技术，但是当时听闻的是有人被套路云的流量计费给掏空了，这次在良心云的计费方式中找到了按量计费，这也刚好满足了博客图片也不多的需求，更不怕被人把钱包给刷爆了。&lt;/p&gt;
&lt;p&gt;上传的方式还是配合PicGo上传，又添加了一个&lt;a class="link" href="https://github.com/liuwave/picgo-plugin-rename-file" target="_blank" rel="noopener"
&gt;rename-file&lt;/a&gt;插件实现上传路径的命名。因为感觉对象存储给的链接太长，国内没有备案的域名，使用了一个服务器直接域名重定向到对象存储给的域名。&lt;/p&gt;
&lt;h2 id="结果"&gt;结果
&lt;/h2&gt;&lt;p&gt;宣布从这篇文章开始往后的图片都会用对象存储，之前的文章如果有需要评论或者联系我再补上吧。&lt;/p&gt;
&lt;h3 id="插曲避坑"&gt;插曲（避坑）
&lt;/h3&gt;&lt;p&gt;期间使用对象存储测试图片的时候，发现过一阵子图片就访问不了了，去桶里一看发现空空如也，发生了两次清空也不知道啥原因，最后一次点了下清空存储桶，发现使用方式里有个&lt;strong&gt;生命周期管理&lt;/strong&gt;，发现是这玩意自动删除文件，所以记得把&lt;strong&gt;生命周期规则修改一下&lt;/strong&gt;。&lt;/p&gt;</description></item><item><title>博客搬迁</title><link>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/</link><pubDate>Mon, 31 Jan 2022 11:31:54 +0800</pubDate><guid>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/</guid><description>&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202201311142110.jpg"
loading="lazy"
alt="202201311142110"
&gt;&lt;/p&gt;
&lt;p&gt;大四开始写毕业设计了，在学的过程中想记一记笔记，但是之前的hexo博客没动很久了，就想着把博客搬迁下顺便起个头，激起一些学习的劲头。&lt;/p&gt;
&lt;h1 id="为什么选择hugo"&gt;为什么选择Hugo
&lt;/h1&gt;&lt;p&gt;因为静态的网站生成框架也没几个，搜索的时候也就hexo、hugo、jekyll。之前用的hexo确实很顺手，但是自己改网站，加功能的时候搞了好多&lt;strong&gt;依赖&lt;/strong&gt;，感觉很臃肿，当时的博客文件夹带上依赖大概就有500+MB，现在换了hugo看下是90MB。&lt;/p&gt;
&lt;p&gt;hugo还有一个特点就是生成网站的速度很快。这一点我没有截图作比较，但是明显的感觉hugo比hexo快好多。引用一片文章里的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据相关博主提供的数据，他200篇左右的博文用Hexo 需要10分钟去生成静态网页，而Hugo 只需要10秒。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;所以感觉要是长期写东西的话，&lt;strong&gt;选个好的框架也是个长远的选择&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;hugo在github上的⭐也比hexo多。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=gohugoio&amp;amp;repo=hugo"
loading="lazy"
alt="Readme Card"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=hexojs&amp;amp;repo=hexo"
loading="lazy"
alt="Readme Card"
&gt;&lt;/p&gt;
&lt;p&gt;不过在迁移的过程中，最大的感受就是：&lt;strong&gt;Hugo在国内的使用者不多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网上想要找个合适的教程非常难，然后就是去官网啃英文的文档。而且hugo框架和hexo比起来完全的不一样，鄙人go还没接触过，主要还是自己菜。一开始选了&lt;a class="link" href="https://github.com/luizdepra/hugo-coder" target="_blank" rel="noopener"
&gt;coder&lt;/a&gt;这个主题，但是觉得还是对hugo本身的了解不够多，四处碰壁，最后选择了一个有国人维护的也是我现在在用的主题，就是&lt;a class="link" href="https://github.com/HEIGE-PCloud/DoIt" target="_blank" rel="noopener"
&gt;DoIt&lt;/a&gt;，这个主题也是从上一代的主题迭代下来的，因为原来的那个已经很久没有维护了(可能觉得已经完工了)。这个主题的教程也很友好，摸完感觉我有点上手了。&lt;/p&gt;
&lt;h1 id="博客的部署"&gt;博客的部署
&lt;/h1&gt;&lt;p&gt;之前使用hexo，在最后使用的时候发现了&lt;a class="link" href="https://www.travis-ci.com/" target="_blank" rel="noopener"
&gt;Travis CI - Test and Deploy with Confidence&lt;/a&gt; &lt;strong&gt;持续集成&lt;/strong&gt;这个好东西，每次在本地写完博客以后push到github的仓库，然后这个app会自动构建博客发布到github pages。&lt;/p&gt;
&lt;p&gt;所以这次也是一样的选择，一个仓库用来放博客本体(顺便当一个备份)，使用持续集成发布到github pages和自己服务器里。不过这次学到的是github Actions。因为之前有用过一些自动签到的脚本，所以这个东西也略有了解，差不多就借一个生产环境干一些事情。具体的配置github的官方docs也写的比较清楚还有中文翻译，上手还看了一篇阮老师的博客&lt;a class="link" href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener"
&gt;GitHub Actions 入门教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;发布到自己服务器上那块感觉处理的还不是很好，找了好几种方法：ftp上传、webhook，最后用了执行git clone的命令从github pages拉仓库。&lt;/p&gt;
&lt;p&gt;所以最后的部署的流程就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地push到github仓库 &amp;ndash;&amp;gt; 仓库Actions发布到github pages、服务器拉取page仓库。&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>PicGo复制自定义链接</title><link>https://www.braindance.top/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 30 Nov 2020 09:54:11 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/</guid><description>&lt;p&gt;2022年2月3日22:41:32&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议直接看文章末尾，我发现我就是个笨比。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="前言"&gt;前言
&lt;/h1&gt;&lt;p&gt;现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PicGo 本体支持如下图床：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;七牛图床&lt;/code&gt; v1.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;腾讯云 COS v4\v5 版本&lt;/code&gt; v1.1 &amp;amp; v1.5.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;又拍云&lt;/code&gt; v1.2.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GitHub&lt;/code&gt; v1.5.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SM.MS V2&lt;/code&gt; v2.3.0-beta.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;阿里云 OSS&lt;/code&gt; v1.6.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Imgur&lt;/code&gt; v1.6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本体不再增加默认的图床支持。你可以自行开发第三方图床插件。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a class="link" href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener"
&gt;PicGo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;软件界面：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130095609.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="起因"&gt;起因
&lt;/h1&gt;&lt;p&gt;PicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含&lt;code&gt;$url&lt;/code&gt;参数，也就是默认的url地址：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130093835.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。&lt;/p&gt;
&lt;h1 id="解决方法"&gt;解决方法
&lt;/h1&gt;&lt;p&gt;在软件设置的配置文件里找到了&lt;code&gt;customLink&lt;/code&gt;，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130094455.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130094651.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="结语"&gt;结语
&lt;/h1&gt;&lt;p&gt;软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了&lt;code&gt;$filename&lt;/code&gt;变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是&lt;code&gt;png&lt;/code&gt;格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接&lt;code&gt;Crtl+Shift+i&lt;/code&gt;，把图片链接贴里面就彳亍了。~&lt;del&gt;白嫖真爽&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2022-1-31 11:43:48&lt;/p&gt;
&lt;p&gt;这时候发现自定义链接直接用markdown格式就更好了&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-other" data-lang="other"&gt;![$fileName](https://cdn.jsdelivr.net/gh/username/repo@master/artical/$fileName.png)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="最简单修改"&gt;最简单修改
&lt;/h1&gt;&lt;p&gt;前面的都是我在改自定义链接，至少明白了可以绕过自定义链接必须包含变量名称这个限制。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032246055.png"
loading="lazy"
alt="image-20220203224558136"
&gt;&lt;/p&gt;
&lt;p&gt;直接在自定义域名那里修改成jsDeliver对应的仓库路径，比如我的&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-other" data-lang="other"&gt;https://cdn.jsdelivr.net/gh/penginman/PicBed@master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后返回的链接就会把原来的&lt;code&gt;raw.github.com/xxxxxx&lt;/code&gt;给替代了。&lt;/p&gt;</description></item><item><title>jsdelivr 缓存刷新</title><link>https://www.braindance.top/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</link><pubDate>Fri, 20 Nov 2020 22:02:46 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。&lt;/p&gt;
&lt;h2 id="缓存刷新"&gt;缓存刷新
&lt;/h2&gt;&lt;p&gt;把原来访问的链接&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://cdn.jsdelivr.net/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;改为&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://purge.jsdelivr.net/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;访问资源就会进行刷新，然后页面会返回刷新信息：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201120222419.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;划水收工。&lt;/p&gt;</description></item><item><title>萌娘百科黑幕实现</title><link>https://www.braindance.top/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 20 Nov 2020 10:13:07 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 老早就觉得&lt;a class="link" href="https://zh.moegirl.org.cn/Mainpage" target="_blank" rel="noopener"
&gt;萌娘百科&lt;/a&gt;里的&lt;code&gt;&amp;lt;span class='heimu'&amp;gt;黑幕&amp;lt;/span&amp;gt;&lt;/code&gt;很好玩，所以摸索着给自己博客加了一个。参考博客&lt;a class="link" href="https://www.cnblogs.com/send-off-a-friend/p/12355387.html" target="_blank" rel="noopener"
&gt;Re：萌娘百科上的黑幕实现&lt;/a&gt;。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线&lt;code&gt;~~ ~~&lt;/code&gt;标签修改了。我回来又想到了更好的方法，markdown支持文章中的&lt;strong&gt;自定义标签&lt;/strong&gt;，自己增加一个&lt;code&gt;&amp;lt;span class='heimu'&amp;gt;...&amp;lt;/span&amp;gt;&lt;/code&gt;标签更好。那么两种都记一下吧。当然用&lt;strong&gt;自定义标签&lt;/strong&gt;的话还可以保留&lt;strong&gt;删除线&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="示例"&gt;示例
&lt;/h2&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;~~我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气~~&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;**我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气**&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气`&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原博客图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210818171850.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;萌娘百科&lt;a class="link" href="https://zh.moegirl.org.cn/Template:%E9%BB%91%E5%B9%95" target="_blank" rel="noopener"
&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="准备工作"&gt;准备工作
&lt;/h2&gt;&lt;p&gt;​ 先进入主题的资源文件夹&lt;code&gt;themes\butterfly\source\&lt;/code&gt;，修改需要用到的文件&lt;code&gt;css\_global\index.styl&lt;/code&gt;、&lt;code&gt;js/main.js&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​ 说明一下两个文件的作用：主题的总样式表&lt;code&gt;index.css&lt;/code&gt;是经过整合形成的，而**.styl文件是基于Node.js的CSS的预处理框架**，我们会在这个里面添加黑幕的样式。&lt;code&gt;main.js&lt;/code&gt;里面使用选择器为标签添加&lt;code&gt;title='你知道的太多了'&lt;/code&gt;，这个可以修改成自己喜欢的。&lt;/p&gt;
&lt;h2 id="修改自定义标签"&gt;修改自定义标签
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;index.styl&lt;/code&gt;文件末尾添加&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-stylus" data-lang="stylus"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;, &lt;span style="color:#f92672"&gt;a&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background&lt;span style="color:#f92672"&gt;-&lt;/span&gt;color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt; !important
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt; !important
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text-shadow: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;,.&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;code&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#66d9ef"&gt;white&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;, &lt;span style="color:#f92672"&gt;a&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;, &lt;span style="color:#f92672"&gt;a&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#66d9ef"&gt;lightblue&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#ae81ff"&gt;#BA0000&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为是&lt;code&gt;.styl&lt;/code&gt;的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;在&lt;code&gt;main.js&lt;/code&gt;的&lt;code&gt;unRefreshFn&lt;/code&gt;和&lt;code&gt;refreshFn&lt;/code&gt;方法之前定义&lt;code&gt;addheimuTitle&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//你知道的太多了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;addheimuTitle&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;$&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;.heimu&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;attr&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;你知道的太多了&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以&lt;code&gt;ctrl+f&lt;/code&gt;搜索上面那两个&lt;code&gt;..refreshFn&lt;/code&gt;函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的&lt;code&gt;addheimuTitle&lt;/code&gt;函数在这里面调用。我盲猜的嗷&lt;code&gt;refreshFn&lt;/code&gt;这个函数是在载入页面会调用，直接在里面第二行加上&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201120173713.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="修改删除线"&gt;修改删除线
&lt;/h2&gt;&lt;p&gt;​ 修改&lt;code&gt;css\_layout\post.styl&lt;/code&gt;文件，在文件中找到id为&lt;code&gt;#article-container&lt;/code&gt;的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-stylus" data-lang="stylus"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt;&lt;span style="color:#f92672"&gt;article&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;.....&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;.....&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;del&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background&lt;span style="color:#f92672"&gt;-&lt;/span&gt;color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text-shadow: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text-decoration: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;&amp;amp;&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#66d9ef"&gt;white&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 因为文章中的删除线被渲染以后页面的标签为&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt;，选中id为&lt;code&gt;article-container&lt;/code&gt;下的所有&lt;code&gt;del&lt;/code&gt;标签添加样式，剩下的还有在&lt;code&gt;main.js&lt;/code&gt;中添加&lt;code&gt;title&lt;/code&gt;和上面的方法差不多，只需要把选择器修改为&lt;code&gt;$('#article-container del').attr('title','你知道的太多了')&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="完工"&gt;完工
&lt;/h2&gt;&lt;p&gt;​ 两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。&lt;/p&gt;</description></item><item><title>jsDelivr加速静态博客</title><link>https://www.braindance.top/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 11 Nov 2020 21:37:53 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在犹豫要不要买的时候，发现了这个东西：&lt;a class="link" href="https://www.jsdelivr.com/" target="_blank" rel="noopener"
&gt;jsdelivr&lt;/a&gt;，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞&lt;/p&gt;
&lt;h2 id="1-新建仓库"&gt;1. 新建仓库
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111202508.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 名字重了是因为我已经创建好了并且使用了以后才来写的博客。&lt;/p&gt;
&lt;h2 id="2-克隆git仓库到本地"&gt;2. 克隆Git仓库到本地
&lt;/h2&gt;&lt;p&gt;​ 在自己电脑建个文件夹然后打开git输入&lt;code&gt;git clone 你仓库的链接&lt;/code&gt;，把刚刚创建的仓库拉倒本地方便上传到仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111203733.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener"
&gt;Git简介&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="3-上传需要加速的资源"&gt;3. 上传需要加速的资源
&lt;/h2&gt;&lt;p&gt;​ 把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;git status //查看状态
git add . //添加所有文件到暂存区
git commit -m &amp;#39;第一次提交&amp;#39; //把文件提交到仓库
git push //推送至远程仓库
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。&lt;/p&gt;
&lt;p&gt;​ 接下来是要上传哪些文件，我使用的是&lt;code&gt;butterfly&lt;/code&gt;这个主题，&lt;a class="link" href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener"
&gt;主题github&lt;/a&gt;支持一下作者，直接在主题&lt;code&gt;theme/butterfly&lt;/code&gt;文件夹下面找到资源文件夹&lt;code&gt;source&lt;/code&gt;发现里面都是一些零碎的文件，但是在发布文件夹&lt;code&gt;public&lt;/code&gt;下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111205045.png"
loading="lazy"
&gt; 穷人流下了不争气的泪。传！(真加速还得选好服务器)&lt;/p&gt;
&lt;p&gt;​ 这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。&lt;/p&gt;
&lt;p&gt;​ 做法：配置文件里找到引用的是本地资源的项，然后在生成网站的&lt;code&gt;public&lt;/code&gt;文件下找到对应的资源文件。&lt;/p&gt;
&lt;p&gt;我列一下我在配置文件里修改的项：&lt;code&gt;main_css&lt;/code&gt;、&lt;code&gt;main&lt;/code&gt;、&lt;code&gt;utils&lt;/code&gt;、&lt;code&gt;local_search&lt;/code&gt;、&lt;code&gt;algolia_js&lt;/code&gt;、&lt;code&gt;translate&lt;/code&gt;，因为使用的是&lt;code&gt;Valine&lt;/code&gt;评论，里面可以设置自定义表情，我也使用这个方法修改了。&lt;/p&gt;
&lt;h2 id="3-获取地址"&gt;3. 获取地址
&lt;/h2&gt;&lt;p&gt;​ 官网首页很清楚的写明了如何获取资源链接&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201111211357.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ &lt;code&gt;https://cdn.jsdelivr.net/gh/user/repo@version/file&lt;/code&gt;，&lt;code&gt;user&lt;/code&gt;就是你的github用户名，&lt;code&gt;repo@version&lt;/code&gt;，仓库加上版本号，&lt;code&gt;file&lt;/code&gt;就是仓库下的路径。&lt;/p&gt;
&lt;p&gt;​ 这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接&lt;code&gt;reop@分支名&lt;/code&gt;，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。&lt;/p&gt;
&lt;p&gt;​ 贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/penginman/PicBed@master/top_img/83531406_p0.png&lt;/p&gt;
&lt;p&gt;​ 这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。&lt;/p&gt;
&lt;h2 id="4-引用链接"&gt;4. 引用链接
&lt;/h2&gt;&lt;p&gt;​ 配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了&lt;strong&gt;你现在引用的是之前的上传的静态资源&lt;/strong&gt;，别忘啦！别忘啦！别忘啦！&lt;/p&gt;
&lt;p&gt;​ 我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。&lt;/p&gt;
&lt;p&gt;​ 还有我整理的&lt;code&gt;Valine&lt;/code&gt;评论的自定义表情，大伙可以直接拿去用：&lt;a class="link" href="https://cdn.jsdelivr.net/gh/penginman/CDN@master/emoji/" target="_blank" rel="noopener"
&gt;图片地址&lt;/a&gt;，&lt;a class="link" href="https://cdn.jsdelivr.net/gh/penginman/CDN@master/emoji/valine.json" target="_blank" rel="noopener"
&gt;emojimap&lt;/a&gt;。完工&lt;/p&gt;</description></item><item><title>Chevereto-搭建一个自己的图床</title><link>https://www.braindance.top/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</link><pubDate>Sun, 20 Sep 2020 11:09:02 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</guid><description>&lt;p&gt;博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章&lt;del&gt;越写越多&lt;/del&gt;用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到&lt;del&gt;限制&lt;/del&gt;，正好发现了&lt;code&gt;Chevereto&lt;/code&gt;这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。&lt;/p&gt;
&lt;h3 id="chevereto-说明"&gt;Chevereto 说明
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Chevereto&lt;/code&gt;分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣&lt;/p&gt;
&lt;h3 id="环境说明"&gt;环境说明
&lt;/h3&gt;&lt;p&gt;因为&lt;code&gt;Chevereto&lt;/code&gt;所需要的环境为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apache/Nginx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHP 5.5+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL 5.0+&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;我太懒了不想动&lt;/del&gt;所以我选择使用宝塔面板为我们搭建web环境。&lt;/p&gt;
&lt;p&gt;宝塔面板官网：https://www.bt.cn/&lt;/p&gt;
&lt;p&gt;安装完成以后进入管理面板应该会直接提示你安装需要的环境&lt;/p&gt;
&lt;p&gt;我的环境如下图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9TVP.png"
loading="lazy"
alt="BJ9TVP.png"
&gt;&lt;/p&gt;
&lt;h3 id="总结安装步骤"&gt;总结安装步骤
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;去github下载Chevereto的压缩包。&lt;/li&gt;
&lt;li&gt;在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。&lt;/li&gt;
&lt;li&gt;将Chevereto的压缩包上传到网站目录解压。&lt;/li&gt;
&lt;li&gt;访问新建的网站就是Chevereto的管理面板，并进行初始配置。&lt;/li&gt;
&lt;li&gt;无了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="开始"&gt;开始
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="https://github.com/Chevereto/Chevereto-Free/releases" target="_blank" rel="noopener"
&gt;github下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建网站目录和数据库用户&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9H58.png"
loading="lazy"
alt="BJ9H58.png"
&gt;&lt;/p&gt;
&lt;p&gt;因为我域名所以域名留空，提示默认使用&lt;code&gt;80&lt;/code&gt;端口，访问地址就是服务器ip地址，剩下的自己随机发挥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建完成后需要配置一下网站配置文件才可以访问到配置页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9Ibt.png"
loading="lazy"
alt="BJ9Ibt.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9qPS.png"
loading="lazy"
alt="BJ9qPS.png"
&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;server{...}&lt;/code&gt;中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;location&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;try_files&lt;/span&gt; $uri $uri/ &lt;span style="color:#e6db74"&gt;/index.php?&lt;/span&gt;$query_string;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置完成以后应该会自动保存并重启&lt;code&gt;Nginx&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将在github上下载的&lt;code&gt;Chevereto&lt;/code&gt;压缩包上传到刚刚创建的网站目录中（上图是&lt;code&gt;/www/wwwroot&lt;/code&gt;）并解压。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后就可以直接访问&lt;code&gt;服务器ip:80&lt;/code&gt;（80端口可以省略），然后一步一步的进行配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可能会出现的错误&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Chevereto can’t create the app/settings.php file. You must manually create this file&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;解决方法：这个错误就是没有找到&lt;code&gt;setting.php&lt;/code&gt;配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在&lt;code&gt;Chevereto&lt;/code&gt;的网站目录下的&lt;code&gt;/app&lt;/code&gt;目录下执行命令创建文件，并修改文件权限&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;touch settings.php
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x settings.php
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ97Uf.jpg"
loading="lazy"
alt="BJ97Uf.jpg"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9O2Q.jpg"
loading="lazy"
alt="BJ9O2Q.jpg"
&gt;&lt;/p&gt;
&lt;p&gt;完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。&lt;/p&gt;
&lt;h3 id="完工"&gt;完工
&lt;/h3&gt;&lt;p&gt;管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习&lt;/p&gt;
&lt;p&gt;然后我的图床地址：http://47.97.231.10/ (已失效) &lt;del&gt;🈚👇👻来丶se兔&lt;/del&gt;&lt;/p&gt;</description></item><item><title>Let_s_Encrypt 免费Https证书</title><link>https://www.braindance.top/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/</link><pubDate>Thu, 03 Sep 2020 15:30:37 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/</guid><description>&lt;p&gt;参考文章:&lt;a class="link" href="https://imququ.com/post/letsencrypt-certificate.html" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt，免费好用的 HTTPS 证书&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="先放官网"&gt;先放官网
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://letsencrypt.org/" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://letsencrypt.org/" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id="所需环境"&gt;所需环境
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个 HTTP 服务，以 Nginx 为例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个目录:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/site 网站目录&lt;/p&gt;
&lt;p&gt;/site_site_cert 保存证书的目录&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;证书的颁发有两种方式：&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="通过在线生成"&gt;通过在线生成
&lt;/h4&gt;&lt;p&gt;通过网址在线生成，需要验证文件&lt;/p&gt;
&lt;h4 id="通过程序生成"&gt;通过程序生成
&lt;/h4&gt;&lt;p&gt;通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。&lt;/p&gt;
&lt;p&gt;我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let&amp;rsquo;s Encrypt会对网站进行访问，下载密钥进行验证。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="开工"&gt;开工
&lt;/h3&gt;&lt;h3 id="创建账号"&gt;创建账号
&lt;/h3&gt;&lt;p&gt;首先创建一个目录，我是在根目录下创建文件夹site_cert&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir /site_cert
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let&amp;rsquo;s Encrypt识别你的身份&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa &lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt; &amp;gt; account.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="创建csr文件"&gt;创建CSR文件
&lt;/h3&gt;&lt;p&gt;在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa &lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt; &amp;gt; domain.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RSA 私钥：兼容性好&lt;/p&gt;
&lt;p&gt;ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 &lt;code&gt;www&lt;/code&gt; 和不带 &lt;code&gt;www&lt;/code&gt; 的两种情况都加进去，一张证书最多可以包含100个域名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -sha256 -key domain.key -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/&amp;#34;&lt;/span&gt; -reqexts SAN -config &amp;lt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;cat /etc/ssl/openssl.cnf &amp;lt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;printf &lt;span style="color:#e6db74"&gt;&amp;#34;[SAN]\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;))&lt;/span&gt; &amp;gt; domain.csr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其中DNS的&lt;code&gt;yoursite.com&lt;/code&gt;和&lt;code&gt;www.yoursite.com&lt;/code&gt;记得要换成自己的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在这里遇到了问题提示找不到&lt;code&gt;/etc/ssl/openssl.cnf&lt;/code&gt;文件，在网上找的的&lt;a class="link" href="https://blog.csdn.net/hjxdreamer/article/details/103296944" target="_blank" rel="noopener"
&gt;解决办法&lt;/a&gt;是&lt;/p&gt;
&lt;p&gt;执行 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl version -a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会输出openssl的信息，其中&lt;code&gt;OPENSSLDIR&lt;/code&gt;对应的路径就是&lt;code&gt;openssl.cnf&lt;/code&gt;文件的地址，自行将上面的&lt;code&gt;cat /etc/ssl/openssl.cnf&lt;/code&gt;,改为自己的路径运行。&lt;/p&gt;
&lt;h3 id="配置验证服务"&gt;配置验证服务
&lt;/h3&gt;&lt;p&gt;前面介绍过了Let&amp;rsquo;s Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。&lt;/p&gt;
&lt;p&gt;创建用于存放网站的目录site以及用于验证文件存放的子目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p /site/.well-known/acme-challenge/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后再Nginx中配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;server_name&lt;/span&gt; &lt;span style="color:#e6db74"&gt;www.yoursite.com&lt;/span&gt; &lt;span style="color:#e6db74"&gt;yoursite.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;location&lt;/span&gt; &lt;span style="color:#e6db74"&gt;^~&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/.well-known/acme-challenge/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;alias&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/home/xxx/www/challenges/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;try_files&lt;/span&gt; $uri =&lt;span style="color:#ae81ff"&gt;404&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;location&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;rewrite&lt;/span&gt; &lt;span style="color:#e6db74"&gt;^/(.*)&lt;/span&gt;$ &lt;span style="color:#e6db74"&gt;https://yoursite.com/&lt;/span&gt;$1 &lt;span style="color:#e6db74"&gt;permanent&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;别忘了改&lt;code&gt;yoursite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个配置会优先查找&lt;code&gt;/site&lt;/code&gt;目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。&lt;/p&gt;
&lt;h3 id="获取网站证书"&gt;获取网站证书
&lt;/h3&gt;&lt;p&gt;先下载&lt;code&gt;acme-tiny&lt;/code&gt;脚本到之前的site_cert目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指定账户私钥、CSR以及网站上验证文件的目录，执行脚本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &amp;gt; ./signed.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行成功的话会在当前目录生成一个&lt;code&gt;signed.crt&lt;/code&gt;文件，这个文件就是申请好的证书文件。&lt;/p&gt;
&lt;p&gt;我在这里出现了错误提示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn&amp;#39;t download http://www.yoursite.com/.well-known/acme-challenge/blablabla
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大概的意思就是，在网站目录里写入了一个验证文件，但是Let&amp;rsquo;s Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://dns.he.net/" target="_blank" rel="noopener"
&gt;Hurricane Electric Free DNS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.zoneedit.com/" target="_blank" rel="noopener"
&gt;ZoneEdit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cloudflare.com/" target="_blank" rel="noopener"
&gt;CloudFlare&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。&lt;/p&gt;
&lt;p&gt;网站证书到手以后，还要下载 Let&amp;rsquo;s Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &amp;gt; intermediate.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat signed.crt intermediate.pem &amp;gt; chained.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;最终&lt;/strong&gt;，在Nginx中添加证书配置，并reload，我的部分配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;listen&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;443&lt;/span&gt; &lt;span style="color:#e6db74"&gt;ssl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_certificate&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/site_cert/chained.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_certificate_key&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/site_cert/domain.key&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_protocols&lt;/span&gt; &lt;span style="color:#e6db74"&gt;TLSv1&lt;/span&gt; &lt;span style="color:#e6db74"&gt;TLSv1.1&lt;/span&gt; &lt;span style="color:#e6db74"&gt;TLSv1.2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_ciphers&lt;/span&gt; &lt;span style="color:#e6db74"&gt;HIGH:!aNULL:!MD5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;server_name&lt;/span&gt; &lt;span style="color:#e6db74"&gt;braindance.tk&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;index&lt;/span&gt; &lt;span style="color:#e6db74"&gt;index.html&lt;/span&gt; &lt;span style="color:#e6db74"&gt;index.htm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;root&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;…………………………&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="证书自动更新-计划任务"&gt;证书自动更新 计划任务
&lt;/h3&gt;&lt;p&gt;​ 至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;vi&lt;/code&gt; 在 &lt;code&gt;/site_cert&lt;/code&gt; 文件夹 创建 计划任务脚本 &lt;code&gt;renew_cert.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vi /site_cert/renew_cert.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;vi&lt;/code&gt;输入以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd /fakesite_cert/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &amp;gt; ./signed.crt &lt;span style="color:#f92672"&gt;||&lt;/span&gt; exit
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &amp;gt; intermediate.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat signed.crt intermediate.pem &amp;gt; chained.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新的大致过程是，运行python脚本再次更新&lt;code&gt;signed.crt&lt;/code&gt;申请证书文件，再进行证书合并写入&lt;code&gt;chained.pem&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;然后给这个文件赋予 可执行 属性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x /fakesite_cert/renew_cert.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;crontab -e&lt;/code&gt;指令打开定时任务配置文件，并加入以下内容。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0 0 1 * * /home/xxx/shell/renew_cert.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于上面指令的具体意思请自行搜索&lt;code&gt;crontab&lt;/code&gt;命令&lt;/p&gt;
&lt;h3 id="完工"&gt;完工
&lt;/h3&gt;</description></item><item><title>Freenom域名注册解析到服务器</title><link>https://www.braindance.top/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Wed, 02 Sep 2020 12:25:37 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;h3 id="1官网"&gt;&lt;strong&gt;1.官网&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener"
&gt;Freenom - 人人都熟悉的名字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网右上角可以切换中文，简直了。&lt;/p&gt;
&lt;p&gt;然后觉得我讲的有点啰嗦的还可以看油管上的&lt;a class="link" href="https://www.youtube.com/watch?v=IAZDrtmQeh0" target="_blank" rel="noopener"
&gt;freenom教学视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9Xvj.png"
loading="lazy"
alt="BJ9Xvj.png"
&gt;&lt;/p&gt;
&lt;h3 id="2搜索想要的域名"&gt;&lt;strong&gt;2.搜索想要的域名&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCFGF.png"
loading="lazy"
alt="BJCFGF.png"
&gt;&lt;/p&gt;
&lt;p&gt;​ 搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。&lt;/p&gt;
&lt;p&gt;​ 我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是&lt;a class="link" href="https://dns.he.net/" target="_blank" rel="noopener"
&gt;Hurricane Electric Hosted &lt;em&gt;DNS&lt;/em&gt;&lt;/a&gt;，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9xrn.png"
loading="lazy"
alt="BJ9xrn.png"
&gt;接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9vKs.png"
loading="lazy"
alt="BJ9vKs.png"
&gt;点击continue按钮会提示注册，这里又有坑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于蝗虫一般涌入试图薅羊毛的中国人让 &lt;code&gt;freenom&lt;/code&gt; 极度不爽, &lt;code&gt;freenom&lt;/code&gt; 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 &lt;a class="link" href="https://www.fakenamegenerator.com/" target="_blank" rel="noopener"
&gt;fakenamegenerator.com&lt;/a&gt; 胡诌个美国住址, 就可以随意注册免费域名了.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="3域名解析"&gt;&lt;strong&gt;3.域名解析&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;​ 完成以后点击Services&amp;ndash;&amp;gt;My Domains进入域名管理页面。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCk24.png"
loading="lazy"
alt="BJCk24.png"
&gt;&lt;/p&gt;
&lt;p&gt;点击域名后面的Manage Domain进入域名解析&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/penginman/PicBed/master/20201029160037.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCpV0.png"
loading="lazy"
alt="BJCpV0.png"
&gt;&lt;/p&gt;
&lt;p&gt;​ Nameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJC9aV.png"
loading="lazy"
alt="BJC9aV.png"
&gt;&lt;/p&gt;
&lt;p&gt;之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCiPU.png"
loading="lazy"
alt="BJCiPU.png"
&gt;&lt;/p&gt;</description></item></channel></rss>