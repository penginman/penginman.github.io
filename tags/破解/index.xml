<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>破解 on Braindance</title><link>https://www.braindance.top/tags/%E7%A0%B4%E8%A7%A3/</link><description>Recent content in 破解 on Braindance</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 30 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.braindance.top/tags/%E7%A0%B4%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>JetBrains 全家桶破解</title><link>https://www.braindance.top/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</link><pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.braindance.top/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</guid><description>&lt;p&gt;&lt;del&gt;突然想开发了我的 IDEA 还是 2021 的，IDEA 和 Pycharm 还在机械硬盘，装个最新的到固态里面。教育邮箱懒得申请了，失效了又要麻烦续杯。写出来记录一下以后自己参考。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="准备"&gt;准备
&lt;/h2&gt;&lt;p&gt;破解使用的是 &lt;a class="link" href="https://gitee.com/ja-netfilter/ja-netfilter" target="_blank" rel="noopener"
&gt;ja-netfilter&lt;/a&gt;：https://gitee.com/ja-netfilter/ja-netfilter。release 下载以后解压。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/07/6520f05f102ea.png"
loading="lazy"
alt="1696657544950.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config&lt;/code&gt; 配置文件默认为空，需要添加一些配置。plugins 是可以加载一些其他联动插件，本文使用的方法不用其他插件。&lt;/p&gt;
&lt;p&gt;找到 IDEA 或者 Pycharm 的 &lt;code&gt;Help&lt;/code&gt; &amp;mdash;&amp;gt; &lt;code&gt;Edit Custom VM Options&lt;/code&gt; 添加启动参数，路径是&lt;code&gt;ja-netfilter&lt;/code&gt;的 jar 包路径。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-javaagent:C:\\path\\to\\ja-netfilter.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Jetbrain全家桶在2022.2版本以上默认启用Java17&lt;/strong&gt;，所以用的时候需要在 VM Options 里额外增加下面两行参数。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里修改的 VM Options 配置文件路径是 C 盘下的本版本全局配置，也可以修改添加到安装目录下的 bin 目录中的 &lt;code&gt;idea64.exe.vmoptions&lt;/code&gt; 配置文件。&lt;/p&gt;
&lt;h2 id="修改其他配置"&gt;修改其他配置
&lt;/h2&gt;&lt;p&gt;修改 &lt;code&gt;config&lt;/code&gt; 修改文件夹下的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;congig/url.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[URL]
PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action
PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;congig/dns.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[DNS]
EQUAL,jetbrains.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="激活"&gt;激活
&lt;/h2&gt;&lt;h3 id="使用-power-插件"&gt;使用 power 插件
&lt;/h3&gt;&lt;p&gt;power 插件被作者成为非对称加密的屠龙刀，这种方式激活可以自定义信息，并且可以设置全家桶激活。&lt;/p&gt;
&lt;p&gt;参考大佬&lt;a class="link" href="https://xuzhengtong.com/2022/07/25/ja-netfilter/ja-netfilter-plugins-power/" target="_blank" rel="noopener"
&gt;博客文章&lt;/a&gt; 本地运行两个 python 文件，一个用于生成本地证书签名文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography &lt;span style="color:#f92672"&gt;import&lt;/span&gt; x509
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.backends &lt;span style="color:#f92672"&gt;import&lt;/span&gt; default_backend
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashes, serialization
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style="color:#f92672"&gt;import&lt;/span&gt; rsa
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.x509.oid &lt;span style="color:#f92672"&gt;import&lt;/span&gt; NameOID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;one_day &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ten_day &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3650&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;today &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;today()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;yesterday &lt;span style="color:#f92672"&gt;=&lt;/span&gt; today &lt;span style="color:#f92672"&gt;-&lt;/span&gt; one_day
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tomorrow &lt;span style="color:#f92672"&gt;=&lt;/span&gt; today &lt;span style="color:#f92672"&gt;+&lt;/span&gt; ten_day
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;private_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; rsa&lt;span style="color:#f92672"&gt;.&lt;/span&gt;generate_private_key(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; public_exponent&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;65537&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; key_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backend&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default_backend()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; private_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;CertificateBuilder()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;subject_name(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Name([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NameAttribute(NameOID&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMMON_NAME, &lt;span style="color:#e6db74"&gt;&amp;#39;MoYuno-from-2022-07-25&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;issuer_name(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Name([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NameAttribute(NameOID&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMMON_NAME, &lt;span style="color:#e6db74"&gt;&amp;#39;JetProfile CA&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;not_valid_before(yesterday)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;not_valid_after(tomorrow)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;serial_number(x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;random_serial_number())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key(public_key)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;certificate &lt;span style="color:#f92672"&gt;=&lt;/span&gt; builder&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; private_key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;private_key, algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashes&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SHA256(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backend&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default_backend()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;private_bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; private_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;private_bytes(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Encoding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PEM,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PrivateFormat&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TraditionalOpenSSL,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encryption_algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;NoEncryption())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; certificate&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_bytes(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; encoding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;serialization&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Encoding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PEM)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;ca.key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fout:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(private_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#34;ca.crt&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; fout:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fout&lt;span style="color:#f92672"&gt;.&lt;/span&gt;write(public_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有一个生成 key 和伪造验签&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Hash &lt;span style="color:#f92672"&gt;import&lt;/span&gt; SHA1, SHA256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.PublicKey &lt;span style="color:#f92672"&gt;import&lt;/span&gt; RSA
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Signature &lt;span style="color:#f92672"&gt;import&lt;/span&gt; pkcs1_15
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Util.asn1 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; DerSequence, DerObjectId, DerNull, DerOctetString
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style="color:#f92672"&gt;import&lt;/span&gt; ceil_div
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography &lt;span style="color:#f92672"&gt;import&lt;/span&gt; x509
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style="color:#f92672"&gt;import&lt;/span&gt; hashes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style="color:#f92672"&gt;import&lt;/span&gt; padding
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# noinspection PyTypeChecker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkcs15_encode&lt;/span&gt;(msg_hash, emLen, with_hash_parameters&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; Implement the ``EMSA-PKCS1-V1_5-ENCODE`` function, as defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param msg_hash: hash object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param emLen: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :param with_hash_parameters: bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; :return: An ``emLen`` byte long string that encodes the hash.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerSequence([DerObjectId(msg_hash&lt;span style="color:#f92672"&gt;.&lt;/span&gt;oid)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; with_hash_parameters:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(DerNull()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digest &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerOctetString(msg_hash&lt;span style="color:#f92672"&gt;.&lt;/span&gt;digest())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestInfo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DerSequence([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digestAlgo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; digest&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# We need at least 11 bytes for the remaining data: 3 fixed bytes and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# at least 8 bytes of padding).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; emLen &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len(digestInfo) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TypeError&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Selected hash algorithm has a too long digest (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt; bytes).&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; len(digest))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PS &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\xFF&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (emLen &lt;span style="color:#f92672"&gt;-&lt;/span&gt; len(digestInfo) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\x00\x01&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; PS &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;b&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\x00&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; digestInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;certBase64 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;MIIFTDCCAzSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMDcyNTIzMTcwOVoXDTMyMDcyMzIzMTcwOVowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDDx3gz77KvezmZJhwkF/10Q3vESk96tK6wJ00CSKkLybRDeQVOlHX3QAnPL7BjwCTzHqErsuyPuiZ6YTAVE/n7hLhIbh3lC+EBbxpa2hpIdIvUimr70iSrH9ZBWmnn5Fxy4r/r0tbxr34zpQzu4uWLiEqmOiDfRN+Zzj9FBaJ/gKsuhF7zNAbFHsClYntim5furDRITBra28nu0hfQIEBSHGPS2EKWTbKk2ifBLzMEDp99zIGEe/hrLpgBhdwGVD7VJsoeTXnvcgpt+91kiM918GWThO1L3eKU6W2mGZQv1bRyps7Fo61NElNWtJqqZ3KKyxJGyR1QpdOHd9flAesvYwb/lvc4uqYiKqwvvn+4iHPQlLtZDbzj0ICbKtVKSWgSprh0T5ZQGGNWXN4OMHtg9EuXvbagLshTEDkLKLzEBqSNpNmMmyzwyNO9/voQmHLjiWLdjVIYndjl15G+A9Dw5mVYqzKPMLEpHzg6ldkKJkGAxNBhCMUsmbEypT6r7wsdTvgEwFnP8ToOsAb12lSLxoR2bOT3xJ3WIfbyjvlBnauXfdu6SFF/82QFrLtQyddPvCHEiJTI0NmSYhjQObFohXMVVoXjGbXvuqgJNbc5UK06pCGQ2jKw4j6k1kw2g4fEYBd1fvEzb1/t+izpP8dEI0365xh0C1dpQjUj3uyRywIDAQABo4GZMIGWMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwCQYDVR0TBAIwADATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwHQYDVR0OBBYEFCTaESKW9YVBwJNH6DEjTPTAhAL/MA0GCSqGSIb3DQEBCwUAA4ICAQA29wUDKatiQe1S0qfId+1dRWnYznrHE0Cx41HUaeI5hvdZrFbDIP6syb/S9oAXST6w4pfgh80jk1xVL+B7NT5kFC+AI7mpd8dK8Z+K67tagYg41TdLGfSHqK+lljln5ElqUEN21fba5CVZplE286jy973XFOFbWZUpJC/5onCCAh8pK8AqpN7k3ovR6bfAga41UWdTnGeiyw9+XOj30ryebseTKaDfjQxsxEmyuA8YYCu9lgb58cvVrvc99So8KdOBaxHnxeEfiUqvPA8Y0QG7lc5elZYQ6cbiIqqsb/k9XSgB2Gk4CjuacBSxCAfd06NlJvZSDFSR1HTKhQfPLIQY1OpBC+NrKRWnQT4/IORL6F36gI9lTK+ioX8mzQ2bvXn4sXA3jrpRnGM2WemQvMPvstfSDKfcUdKjwX3rZ2jMwREkx/thtF3Huvsc8suOyzto1faD8mV0m4guq85fb4c9ki6cinz3QM2k6otVvh67gK116RZ7I8P/urTWvK7IOdwOE7UVqtpEe6TKvNhr1rzeaxUMdPcD0kY7fhBpuPwEQA+Xk0uiVR+XbpaPD4HWuapJm+31jC7zBp/BamRI25v26P5qMUQF/+P7eE4Ah/X0Rtf2Qvr2+p9kbfqalT8EiqOsvRiTvlMG1hdo33JdcwsxC05BWvZ++7Af0FgJ3TtFlw==&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cert &lt;span style="color:#f92672"&gt;=&lt;/span&gt; x509&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load_der_x509_certificate(base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(certBase64))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;public_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;public_key()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int&lt;span style="color:#f92672"&gt;.&lt;/span&gt;from_bytes(cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;signature, byteorder&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;big&amp;#34;&lt;/span&gt;, )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;sign:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;sign&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;modBits &lt;span style="color:#f92672"&gt;=&lt;/span&gt; public_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;key_size
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;digest_cert &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SHA256&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(cert&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tbs_certificate_bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int&lt;span style="color:#f92672"&gt;.&lt;/span&gt;from_bytes(pkcs15_encode(digest_cert, ceil_div(modBits, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;)), byteorder&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;, signed&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;result:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;r&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;licenseId &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;R7FP0YWA38&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;licensePart &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;{&amp;#34;licenseId&amp;#34;:&amp;#34;R7FP0YWA38&amp;#34;,&amp;#34;licenseeName&amp;#34;:&amp;#34;Braindance&amp;#34;,&amp;#34;assigneeName&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;assigneeEmail&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;licenseRestriction&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;checkConcurrentUse&amp;#34;:false,&amp;#34;products&amp;#34;:[{&amp;#34;code&amp;#34;:&amp;#34;DPN&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;PS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;II&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;GO&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DM&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSF&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;DS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;PC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;CL&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;WS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RD&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RS0&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RM&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;AC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSV&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;DC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;RSU&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:false},{&amp;#34;code&amp;#34;:&amp;#34;DP&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PDB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PWS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PSI&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PPS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PCWMP&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PGO&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PPC&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PRB&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;PSW&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true},{&amp;#34;code&amp;#34;:&amp;#34;RS&amp;#34;,&amp;#34;paidUpTo&amp;#34;:&amp;#34;2077-01-01&amp;#34;,&amp;#34;extended&amp;#34;:true}],&amp;#34;metadata&amp;#34;:&amp;#34;0120211210PPAM000005&amp;#34;,&amp;#34;hash&amp;#34;:&amp;#34;28822622/0:1202205338&amp;#34;,&amp;#34;gracePeriodDays&amp;#34;:7,&amp;#34;autoProlongated&amp;#34;:false,&amp;#34;isAutoProlongated&amp;#34;:false}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;digest &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SHA1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(licensePart&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;ca.key&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; prifile:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; private_key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; RSA&lt;span style="color:#f92672"&gt;.&lt;/span&gt;import_key(prifile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 使用私钥对HASH值进行签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; signature &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pkcs1_15&lt;span style="color:#f92672"&gt;.&lt;/span&gt;new(private_key)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sign(digest)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sig_results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64encode(signature)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; licensePartBase64 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64encode(bytes(licensePart&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; public_key&lt;span style="color:#f92672"&gt;.&lt;/span&gt;verify(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(sig_results),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; base64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;b64decode(licensePartBase64),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; padding&lt;span style="color:#f92672"&gt;=&lt;/span&gt;padding&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PKCS1v15(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;hashes&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SHA1(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; licenseId &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; licensePartBase64&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; sig_results&lt;span style="color:#f92672"&gt;.&lt;/span&gt;decode(&lt;span style="color:#e6db74"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; certBase64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(result)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 Crypto 依赖使用 &lt;code&gt;pip install pycrytodome&lt;/code&gt;。&lt;strong&gt;需要修改变量&lt;/strong&gt; &lt;code&gt;certBase64 &lt;/code&gt; &lt;strong&gt;为第一个文件生成的 cert 证书内容（自行删除换行）&lt;/strong&gt;。其中变量 &lt;code&gt;licensePart&lt;/code&gt; 中的信息和变量 &lt;code&gt;licenseId&lt;/code&gt; 对应，&lt;code&gt;licenseeName&lt;/code&gt; 可以自行修改，&lt;code&gt;code&lt;/code&gt; 应该就是全家桶各个软件的缩写，&lt;code&gt;paidUpTo&lt;/code&gt; 过期时间。&lt;/p&gt;
&lt;p&gt;配置文件&lt;code&gt;congig/power.conf&lt;/code&gt; 的格式&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Result]
EQUAL,sign,y,z-&amp;gt;result
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;sign&lt;/code&gt; 和 &lt;code&gt;result&lt;/code&gt; 分别对应第二个文件的两行输出，分别是签名密文、证书签名。&lt;code&gt;y&lt;/code&gt;,&lt;code&gt;z&lt;/code&gt; 分别是 RSA 中的指数、jetbrains内置root证书的公钥（&lt;strong&gt;不用修改&lt;/strong&gt;）。最终配置文件。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[Result]
EQUAL,688827393930711928512275549698293070665686146516966052655941231404870441973710402205123355604429394140415171936010826276494797379204430556181912308828215621834023869095264591943036963130120724420798769592253168800129581361086511367675773802899334078239434964778238252446370058840916752890687348786357248109407287360623267817632253915161513374442235501450990684679388233149022805420822037547053343732736438118829252210572948271275369220730128852181626787073863828515056541044882335869396696141056207575568411139674823212977124270019967190277434142980781559286683916236429191621661925978231096547985871015033045347745040517507548703203423373963474065307957598679613534182723075187728429764246533540129748262856350129370323776549193166705032852633517719905394268849453593835332705268187404502153581134679736820933961668519544538659820375073084965933956885058156852851457008982063229683626311524790625910341414580691932545385821852904086377007435193707757250435137675275183055336401236456974574121655434382553698002922301524374402422775517514284490136029700408044713357398902530280387081498510385206614656124276242043287045844898682620475564484729941780647067683830306648941012819834344380065067184504095694554818053932782057955011188082,65537,860106576952879101192782278876319243486072481962999610484027161162448933268423045647258145695082284265933019120714643752088997312766689988016808929265129401027490891810902278465065056686129972085119605237470899952751915070244375173428976413406363879128531449407795115913715863867259163957682164040613505040314747660800424242248055421184038777878268502955477482203711835548014501087778959157112423823275878824729132393281517778742463067583320091009916141454657614089600126948087954465055321987012989937065785013284988096504657892738536613208311013047138019418152103262155848541574327484510025594166239784429845180875774012229784878903603491426732347994359380330103328705981064044872334790365894924494923595382470094461546336020961505275530597716457288511366082299255537762891238136381924520749228412559219346777184174219999640906007205260040707839706131662149325151230558316068068139406816080119906833578907759960298749494098180107991752250725928647349597506532778539709852254478061194098069801549845163358315116260915270480057699929968468068015735162890213859113563672040630687357054902747438421559817252127187138838514773245413540030800888215961904267348727206110582505606182944023582459006406137831940959195566364811905585377246353-&amp;gt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;激活key&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;R7FP0YWA38-eyJsaWNlbnNlSWQiOiJSN0ZQMFlXQTM4IiwibGljZW5zZWVOYW1lIjoiQnJhaW5kYW5jZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFAiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJwYWlkVXBUbyI6IjIwNzctMDEtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwicGFpZFVwVG8iOiIyMDc3LTAxLTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsInBhaWRVcFRvIjoiMjA3Ny0wMS0wMSIsImV4dGVuZGVk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
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应该可以直接使用我上面的配置，自己生成也可以。重启软件激活&lt;/p&gt;
&lt;p&gt;&lt;img src="https://img.braindance.top/article/2023/10/07/6520eff16b4a4.png"
loading="lazy"
alt="1696657436047.png"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2024年10月21日&lt;/strong&gt;发现了个新问题。参照[博客][https://www.cnblogs.com/airlongdianblog/p/18418285]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2024.2后jetbrains新的安装程序自带了三个区域语言包，其中若选择中文大陆区域语言包，会将激活验证服务器地址修改为国内新验证地址。而jetbra/ja-netfaliter的拦截是黑名单制度，该新服务器地址并不在原本的拦截列表中。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这时激活失效并且会不断弹窗，只需要在&lt;code&gt;config/url.conf&lt;/code&gt;中加入拦截域名，重新启动即可。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面文章内容已经添加了。&lt;/p&gt;</description></item></channel></rss>