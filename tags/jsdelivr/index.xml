<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jsdelivr on</title><link>/tags/jsdelivr/</link><description>Recent content in Jsdelivr on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 20 Nov 2020 22:02:46 +0000</lastBuildDate><atom:link href="/tags/jsdelivr/index.xml" rel="self" type="application/rss+xml"/><item><title>jsdelivr 缓存刷新</title><link>/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</link><pubDate>Fri, 20 Nov 2020 22:02:46 +0000</pubDate><guid>/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>​	上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。&lt;/p>
&lt;h2 id="缓存刷新">缓存刷新&lt;/h2>
&lt;p>把原来访问的链接&lt;/p>
&lt;p>&lt;code>https://cdn.jsdelivr.net/...&lt;/code>&lt;/p>
&lt;p>改为&lt;/p>
&lt;p>&lt;code>https://purge.jsdelivr.net/...&lt;/code>&lt;/p>
&lt;p>访问资源就会进行刷新，然后页面会返回刷新信息：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201120222419.png" alt="">&lt;/p>
&lt;p>划水收工。&lt;/p></description></item><item><title>jsDelivr加速静态博客</title><link>/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 11 Nov 2020 21:37:53 +0000</pubDate><guid>/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>​	这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。&lt;/p>
&lt;blockquote>
&lt;p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科&lt;/p>&lt;/blockquote>
&lt;p>在犹豫要不要买的时候，发现了这个东西：&lt;a href="https://www.jsdelivr.com/">jsdelivr&lt;/a>，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞&lt;/p>
&lt;h2 id="1-新建仓库">1. 新建仓库&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111202508.png" alt="">&lt;/p>
&lt;p>​	名字重了是因为我已经创建好了并且使用了以后才来写的博客。&lt;/p>
&lt;h2 id="2-克隆git仓库到本地">2. 克隆Git仓库到本地&lt;/h2>
&lt;p>​	在自己电脑建个文件夹然后打开git输入&lt;code>git clone 你仓库的链接&lt;/code>，把刚刚创建的仓库拉倒本地方便上传到仓库。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111203733.png" alt="">&lt;/p>
&lt;p>廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：&lt;a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">Git简介&lt;/a>。&lt;/p>
&lt;h2 id="3-上传需要加速的资源">3. 上传需要加速的资源&lt;/h2>
&lt;p>​	把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。&lt;/p>
&lt;pre tabindex="0">&lt;code>git status //查看状态
git add . //添加所有文件到暂存区
git commit -m &amp;#39;第一次提交&amp;#39; //把文件提交到仓库
git push //推送至远程仓库
&lt;/code>&lt;/pre>&lt;p>​	这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。&lt;/p>
&lt;p>​	接下来是要上传哪些文件，我使用的是&lt;code>butterfly&lt;/code>这个主题，&lt;a href="https://github.com/jerryc127/hexo-theme-butterfly">主题github&lt;/a>支持一下作者，直接在主题&lt;code>theme/butterfly&lt;/code>文件夹下面找到资源文件夹&lt;code>source&lt;/code>发现里面都是一些零碎的文件，但是在发布文件夹&lt;code>public&lt;/code>下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed/artical/20201111205045.png" alt="">	穷人流下了不争气的泪。传！(真加速还得选好服务器)&lt;/p>
&lt;p>​	这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。&lt;/p>
&lt;p>​	做法：配置文件里找到引用的是本地资源的项，然后在生成网站的&lt;code>public&lt;/code>文件下找到对应的资源文件。&lt;/p>
&lt;p>我列一下我在配置文件里修改的项：&lt;code>main_css&lt;/code>、&lt;code>main&lt;/code>、&lt;code>utils&lt;/code>、&lt;code>local_search&lt;/code>、&lt;code>algolia_js&lt;/code>、&lt;code>translate&lt;/code>，因为使用的是&lt;code>Valine&lt;/code>评论，里面可以设置自定义表情，我也使用这个方法修改了。&lt;/p>
&lt;h2 id="3-获取地址">3. 获取地址&lt;/h2>
&lt;p>​	官网首页很清楚的写明了如何获取资源链接&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/penginman/PicBed@master/artical/20201111211357.png" alt="">&lt;/p>
&lt;p>​	&lt;code>https://cdn.jsdelivr.net/gh/user/repo@version/file&lt;/code>，&lt;code>user&lt;/code>就是你的github用户名，&lt;code>repo@version&lt;/code>，仓库加上版本号，&lt;code>file&lt;/code>就是仓库下的路径。&lt;/p>
&lt;p>​	这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接&lt;code>reop@分支名&lt;/code>，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。&lt;/p>
&lt;p>​	贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/penginman/PicBed@master/top_img/83531406_p0.png&lt;/p>
&lt;p>​	这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。&lt;/p>
&lt;h2 id="4-引用链接">4. 引用链接&lt;/h2>
&lt;p>​	配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了&lt;strong>你现在引用的是之前的上传的静态资源&lt;/strong>，别忘啦！别忘啦！别忘啦！&lt;/p>
&lt;p>​	我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。&lt;/p>
&lt;p>​	还有我整理的&lt;code>Valine&lt;/code>评论的自定义表情，大伙可以直接拿去用：&lt;a href="https://cdn.jsdelivr.net/gh/penginman/CDN@master/emoji/">图片地址&lt;/a>，&lt;a href="https://cdn.jsdelivr.net/gh/penginman/CDN@master/emoji/valine.json">emojimap&lt;/a>。完工&lt;/p></description></item></channel></rss>